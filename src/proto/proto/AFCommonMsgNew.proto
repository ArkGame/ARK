syntax = "proto3";
package AFMsg;

message pb_array {
  repeated pb_entity_data datas_value = 1;
}

message pb_table {
  map<uint32, pb_entity_data> datas_value = 1;
}

message pb_container {
  map<uint32, pb_entity> datas_value = 1;
}

message pb_entity_data {
  map<uint32, bool> datas_bool              = 1;     // bool
  map<uint32, sint32> datas_int32           = 2;     // int32
  map<uint32, uint32> datas_uint32          = 3;     // uint32
  map<uint32, sint64> datas_int64           = 4;     // int64
  map<uint32, uint64> datas_uint64          = 5;     // uint64
  map<uint32, float> datas_float            = 6;     // float
  map<uint32, double> datas_double          = 7;     // double
  map<uint32, bytes> datas_string           = 8;     // string
  map<uint32, pb_array> datas_array         = 9;     // array
  map<uint32, pb_table> datas_table         = 10;    // table
  map<uint32, pb_container> datas_container = 11;    // multi-data
}

message pb_entity{
  int64 id            = 1;
  pb_entity_data data = 2;
}

message pb_entity_table_delete{
  int64 id            = 1;
  pb_entity_data data = 2;
}

message pb_entity_table_swap{
  int64 id                  = 1;
  uint32 origin_table_index = 2;
  uint32 target_table_index = 3;
  uint32 origin_row         = 4;
  uint32 target_row         = 5;
}

message pb_entity_table_update{
  int64 id            = 1;
  pb_entity_data data = 2;
}

message pb_entity_table_add{
  int64 id            = 1;
  pb_entity_data data = 2;
}

//container change
message pb_container_create{
  int64 id            = 1;
  uint32 index        = 2;
  uint32 entity_index = 3;
  pb_entity data      = 4;
}

message pb_container_place{
  int64 id            = 1;
  uint32 index        = 2;
  uint32 entity_index = 3;
  int64 entity_id     = 4;
}

message pb_container_remove{
  int64 id            = 1;
  uint32 index        = 2;
  uint32 entity_index = 3;
}

message pb_container_swap{
  int64 id            = 1;
  uint32 index        = 2;
  uint32 src_index    = 3;
  uint32 dest_index   = 4;
}

message pb_container_destroy{
  int64 id            = 1;
  uint32 index        = 2;
  uint32 entity_index = 3;
}

//多人玩家全部表数据，可直接发送--统一发,为节约包
message multi_entity_data_list {
  repeated pb_entity data_list = 1;
}

// delay sync message
message pb_delay_entity{
  int64 id                                      = 1;
  pb_entity_data data                           = 2;
  repeated uint32 clear_tables                  = 3; // tables need to be cleared before update
  map<uint32, delay_clear_row> clear_rows       = 4; // row index list of a table need to be cleared before update
  map<uint32, delay_container> destroy_entity   = 5; 
  map<uint32, delay_container> container_entity = 6; 
}

message delay_clear_row{
  repeated uint32 row_list = 1;
}

message delay_container{
  map<uint32, int64> entity_list = 1;
}

// variant data
message pb_variant_data {
  oneof pb_af_data {
    bool bool_value     = 1;
    int32 int_value     = 2;
    uint32 uint_value   = 3;
    int64 int64_value   = 4;
    uint64 uint64_value = 5;
    float float_value   = 6;
    double double_value = 7;
    string str_value    = 8;
  }
}

// custom message
message pb_custom_message {
  uint32 message_id                  = 1;
  repeated pb_variant_data data_list = 2;
}