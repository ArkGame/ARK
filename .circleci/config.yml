version: 2
jobs:
  build:
    filters:
      branches:
        ignore:
          - gh-pages
    docker:
      - image: rikorose/gcc-cmake
    steps:
      - checkout
      - run:
          name: Update submodule
          command: |
            git submodule sync
            git submodule update --init
      - run:
          name: Building dependencies
          command: |
            cd dep
            eval ./build_dep.sh
      - run:
          name: Install C++ build wrapper
          command: |
            wget https://binaries.sonarsource.com/CommercialDistribution/sonar-cpp-plugin/build-wrapper-3.11.zip
            unzip build-wrapper-3.11.zip
      - run:
          name: Building src
          command: |
            if [ -d "build" ]; then rm -rf build; fi
            mkdir build && cd build
            cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DENABLE_COVERAGE=OFF  -DBUILD_SAMPLES=ON -DBUILD_TESTS=ON ..
            ../build-wrapper-3.11/linux-x86-64/build-wrapper-linux-x86-64 --out-dir bw-output make -j 4
      #- run:
      #    name: Install sonarqube
      #    command: |
      #      wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      #      unzip sonar-scanner-cli-3.3.0.1492-linux.zip
      #- run:
      #    name: Run Sonarqube scanner
      #    command: |
      #      eval ./sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dsonar.projectKey=ark \
      #      -Dsonar.organization=ark-game \
      #      -Dsonar.projectName=ARK \
      #      -Dsonar.host.url=https://sonarcloud.io \
      #      -Dsonar.sourceEncoding=UTF-8 \
      #      -Dsonar.projectVersion=0.9.4 \
      #      -Dsonar.login=${SONAR_TOKEN} \
      #      -Dsonar.sources=src \
      #      -Dsonar.exclusions=src/proto/** \
      #      -Dsonar.cfamily.build-wrapper-output=build/bw-output -X
