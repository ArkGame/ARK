// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgPreGame.proto

#include "AFMsgPreGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace AFMsg {
class ServerInfoReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfoReport>
      _instance;
} _ServerInfoReport_default_instance_;
class ServerInfoReportListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfoReportList>
      _instance;
} _ServerInfoReportList_default_instance_;
class AckEventResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckEventResult>
      _instance;
} _AckEventResult_default_instance_;
class ReqAccountLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAccountLogin>
      _instance;
} _ReqAccountLogin_default_instance_;
class ReqAccountLogoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAccountLogout>
      _instance;
} _ReqAccountLogout_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo>
      _instance;
} _ServerInfo_default_instance_;
class ReqServerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqServerList>
      _instance;
} _ReqServerList_default_instance_;
class AckServerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckServerList>
      _instance;
} _AckServerList_default_instance_;
class ReqConnectWorldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqConnectWorld>
      _instance;
} _ReqConnectWorld_default_instance_;
class AckConnectWorldResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckConnectWorldResult>
      _instance;
} _AckConnectWorldResult_default_instance_;
class ReqSelectServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSelectServer>
      _instance;
} _ReqSelectServer_default_instance_;
class ReqKickFromWorldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqKickFromWorld>
      _instance;
} _ReqKickFromWorld_default_instance_;
class ReqRoleListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqRoleList>
      _instance;
} _ReqRoleList_default_instance_;
class RoleLiteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleLiteInfo>
      _instance;
} _RoleLiteInfo_default_instance_;
class AckRoleLiteInfoListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckRoleLiteInfoList>
      _instance;
} _AckRoleLiteInfoList_default_instance_;
class ReqCreateRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCreateRole>
      _instance;
} _ReqCreateRole_default_instance_;
class ReqDeleteRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqDeleteRole>
      _instance;
} _ReqDeleteRole_default_instance_;
class ReqRecoverRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqRecoverRole>
      _instance;
} _ReqRecoverRole_default_instance_;
class ServerHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerHeartBeat>
      _instance;
} _ServerHeartBeat_default_instance_;
class RoleOnlineNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleOnlineNotify>
      _instance;
} _RoleOnlineNotify_default_instance_;
class RoleOfflineNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoleOfflineNotify>
      _instance;
} _RoleOfflineNotify_default_instance_;
}  // namespace AFMsg
namespace protobuf_AFMsgPreGame_2eproto {
void InitDefaultsServerInfoReportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ServerInfoReport_default_instance_;
    new (ptr) ::AFMsg::ServerInfoReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ServerInfoReport::InitAsDefaultInstance();
}

void InitDefaultsServerInfoReport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerInfoReportImpl);
}

void InitDefaultsServerInfoReportListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReport();
  {
    void* ptr = &::AFMsg::_ServerInfoReportList_default_instance_;
    new (ptr) ::AFMsg::ServerInfoReportList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ServerInfoReportList::InitAsDefaultInstance();
}

void InitDefaultsServerInfoReportList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerInfoReportListImpl);
}

void InitDefaultsAckEventResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckEventResult_default_instance_;
    new (ptr) ::AFMsg::AckEventResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckEventResult::InitAsDefaultInstance();
}

void InitDefaultsAckEventResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckEventResultImpl);
}

void InitDefaultsReqAccountLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAccountLogin_default_instance_;
    new (ptr) ::AFMsg::ReqAccountLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAccountLogin::InitAsDefaultInstance();
}

void InitDefaultsReqAccountLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAccountLoginImpl);
}

void InitDefaultsReqAccountLogoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAccountLogout_default_instance_;
    new (ptr) ::AFMsg::ReqAccountLogout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAccountLogout::InitAsDefaultInstance();
}

void InitDefaultsReqAccountLogout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAccountLogoutImpl);
}

void InitDefaultsServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ServerInfo_default_instance_;
    new (ptr) ::AFMsg::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerInfoImpl);
}

void InitDefaultsReqServerListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqServerList_default_instance_;
    new (ptr) ::AFMsg::ReqServerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqServerList::InitAsDefaultInstance();
}

void InitDefaultsReqServerList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqServerListImpl);
}

void InitDefaultsAckServerListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfo();
  {
    void* ptr = &::AFMsg::_AckServerList_default_instance_;
    new (ptr) ::AFMsg::AckServerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckServerList::InitAsDefaultInstance();
}

void InitDefaultsAckServerList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckServerListImpl);
}

void InitDefaultsReqConnectWorldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqConnectWorld_default_instance_;
    new (ptr) ::AFMsg::ReqConnectWorld();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqConnectWorld::InitAsDefaultInstance();
}

void InitDefaultsReqConnectWorld() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqConnectWorldImpl);
}

void InitDefaultsAckConnectWorldResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckConnectWorldResult_default_instance_;
    new (ptr) ::AFMsg::AckConnectWorldResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckConnectWorldResult::InitAsDefaultInstance();
}

void InitDefaultsAckConnectWorldResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckConnectWorldResultImpl);
}

void InitDefaultsReqSelectServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqSelectServer_default_instance_;
    new (ptr) ::AFMsg::ReqSelectServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSelectServer::InitAsDefaultInstance();
}

void InitDefaultsReqSelectServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSelectServerImpl);
}

void InitDefaultsReqKickFromWorldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqKickFromWorld_default_instance_;
    new (ptr) ::AFMsg::ReqKickFromWorld();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqKickFromWorld::InitAsDefaultInstance();
}

void InitDefaultsReqKickFromWorld() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqKickFromWorldImpl);
}

void InitDefaultsReqRoleListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqRoleList_default_instance_;
    new (ptr) ::AFMsg::ReqRoleList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqRoleList::InitAsDefaultInstance();
}

void InitDefaultsReqRoleList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqRoleListImpl);
}

void InitDefaultsRoleLiteInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_RoleLiteInfo_default_instance_;
    new (ptr) ::AFMsg::RoleLiteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::RoleLiteInfo::InitAsDefaultInstance();
}

void InitDefaultsRoleLiteInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleLiteInfoImpl);
}

void InitDefaultsAckRoleLiteInfoListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleLiteInfo();
  {
    void* ptr = &::AFMsg::_AckRoleLiteInfoList_default_instance_;
    new (ptr) ::AFMsg::AckRoleLiteInfoList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckRoleLiteInfoList::InitAsDefaultInstance();
}

void InitDefaultsAckRoleLiteInfoList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckRoleLiteInfoListImpl);
}

void InitDefaultsReqCreateRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqCreateRole_default_instance_;
    new (ptr) ::AFMsg::ReqCreateRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqCreateRole::InitAsDefaultInstance();
}

void InitDefaultsReqCreateRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqCreateRoleImpl);
}

void InitDefaultsReqDeleteRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqDeleteRole_default_instance_;
    new (ptr) ::AFMsg::ReqDeleteRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqDeleteRole::InitAsDefaultInstance();
}

void InitDefaultsReqDeleteRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqDeleteRoleImpl);
}

void InitDefaultsReqRecoverRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqRecoverRole_default_instance_;
    new (ptr) ::AFMsg::ReqRecoverRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqRecoverRole::InitAsDefaultInstance();
}

void InitDefaultsReqRecoverRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqRecoverRoleImpl);
}

void InitDefaultsServerHeartBeatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ServerHeartBeat_default_instance_;
    new (ptr) ::AFMsg::ServerHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ServerHeartBeat::InitAsDefaultInstance();
}

void InitDefaultsServerHeartBeat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerHeartBeatImpl);
}

void InitDefaultsRoleOnlineNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_RoleOnlineNotify_default_instance_;
    new (ptr) ::AFMsg::RoleOnlineNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::RoleOnlineNotify::InitAsDefaultInstance();
}

void InitDefaultsRoleOnlineNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleOnlineNotifyImpl);
}

void InitDefaultsRoleOfflineNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_RoleOfflineNotify_default_instance_;
    new (ptr) ::AFMsg::RoleOfflineNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::RoleOfflineNotify::InitAsDefaultInstance();
}

void InitDefaultsRoleOfflineNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleOfflineNotifyImpl);
}

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_max_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_cur_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReport, server_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfoReportList, server_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckEventResult, event_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckEventResult, event_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckEventResult, event_client_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, security_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, signbuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, clientversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, loginmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, clientmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, device_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogin, platform_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogout, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAccountLogout, extra_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfo, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfo, wait_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerInfo, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqServerList, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckServerList, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckServerList, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqConnectWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqConnectWorld, world_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqConnectWorld, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqConnectWorld, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqConnectWorld, login_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, world_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, login_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, world_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, world_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckConnectWorldResult, world_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSelectServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSelectServer, world_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqKickFromWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqKickFromWorld, world_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqKickFromWorld, account_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRoleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRoleList, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRoleList, account_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, career_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, race_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, noob_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, role_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, delete_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, reg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, last_offline_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, last_offline_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleLiteInfo, view_record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckRoleLiteInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckRoleLiteInfoList, char_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, career_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, race_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, noob_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreateRole, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqDeleteRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqDeleteRole, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqDeleteRole, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqDeleteRole, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRecoverRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRecoverRole, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRecoverRole, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqRecoverRole, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ServerHeartBeat, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleOnlineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleOnlineNotify, guild_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::RoleOfflineNotify, guild_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AFMsg::ServerInfoReport)},
  { 13, -1, sizeof(::AFMsg::ServerInfoReportList)},
  { 19, -1, sizeof(::AFMsg::AckEventResult)},
  { 27, -1, sizeof(::AFMsg::ReqAccountLogin)},
  { 43, -1, sizeof(::AFMsg::ReqAccountLogout)},
  { 50, -1, sizeof(::AFMsg::ServerInfo)},
  { 59, -1, sizeof(::AFMsg::ReqServerList)},
  { 65, -1, sizeof(::AFMsg::AckServerList)},
  { 72, -1, sizeof(::AFMsg::ReqConnectWorld)},
  { 81, -1, sizeof(::AFMsg::AckConnectWorldResult)},
  { 93, -1, sizeof(::AFMsg::ReqSelectServer)},
  { 99, -1, sizeof(::AFMsg::ReqKickFromWorld)},
  { 106, -1, sizeof(::AFMsg::ReqRoleList)},
  { 113, -1, sizeof(::AFMsg::RoleLiteInfo)},
  { 130, -1, sizeof(::AFMsg::AckRoleLiteInfoList)},
  { 136, -1, sizeof(::AFMsg::ReqCreateRole)},
  { 147, -1, sizeof(::AFMsg::ReqDeleteRole)},
  { 155, -1, sizeof(::AFMsg::ReqRecoverRole)},
  { 163, -1, sizeof(::AFMsg::ServerHeartBeat)},
  { 169, -1, sizeof(::AFMsg::RoleOnlineNotify)},
  { 175, -1, sizeof(::AFMsg::RoleOfflineNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ServerInfoReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ServerInfoReportList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckEventResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAccountLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAccountLogout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqServerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckServerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqConnectWorld_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckConnectWorldResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSelectServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqKickFromWorld_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqRoleList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_RoleLiteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckRoleLiteInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqCreateRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqDeleteRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqRecoverRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ServerHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_RoleOnlineNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_RoleOfflineNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AFMsgPreGame.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022AFMsgPreGame.proto\022\005AFMsg\032\016AFDefine.pr"
      "oto\032\017AFMsgBase.proto\"\327\001\n\020ServerInfoRepor"
      "t\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_name\030\002 \001("
      "\t\022\021\n\tserver_ip\030\003 \001(\t\022\023\n\013server_port\030\004 \001("
      "\005\022\031\n\021server_max_online\030\005 \001(\005\022\030\n\020server_c"
      "ur_count\030\006 \001(\005\022)\n\014server_state\030\007 \001(\0162\023.A"
      "FMsg.EServerState\022\023\n\013server_type\030\010 \001(\005\"D"
      "\n\024ServerInfoReportList\022,\n\013server_list\030\001 "
      "\003(\0132\027.AFMsg.ServerInfoReport\"\203\001\n\016AckEven"
      "tResult\022)\n\nevent_code\030\001 \001(\0162\025.AFMsg.EGam"
      "eEventCode\022\"\n\014event_object\030\002 \001(\0132\014.AFMsg"
      ".Ident\022\"\n\014event_client\030\003 \001(\0132\014.AFMsg.Ide"
      "nt\"\354\001\n\017ReqAccountLogin\022\017\n\007account\030\002 \001(\t\022"
      "\020\n\010password\030\003 \001(\t\022\025\n\rsecurity_code\030\004 \001(\t"
      "\022\020\n\010signBuff\030\005 \001(\t\022\025\n\rclientVersion\030\006 \001("
      "\005\022\021\n\tloginMode\030\007 \001(\005\022\020\n\010clientIP\030\010 \001(\005\022\021"
      "\n\tclientMAC\030\t \001(\003\022\023\n\013device_info\030\n \001(\t\022\022"
      "\n\nextra_info\030\013 \001(\t\022\025\n\rplatform_type\030\014 \001("
      "\005\"7\n\020ReqAccountLogout\022\017\n\007account\030\002 \001(\t\022\022"
      "\n\nextra_info\030\003 \001(\t\"f\n\nServerInfo\022\021\n\tserv"
      "er_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\022\n\nwait_count\030"
      "\003 \001(\005\022#\n\006status\030\004 \001(\0162\023.AFMsg.EServerSta"
      "te\"7\n\rReqServerList\022&\n\004type\030\001 \001(\0162\030.AFMs"
      "g.ReqServerListType\"X\n\rAckServerList\022&\n\004"
      "type\030\001 \001(\0162\030.AFMsg.ReqServerListType\022\037\n\004"
      "info\030\002 \003(\0132\021.AFMsg.ServerInfo\"d\n\017ReqConn"
      "ectWorld\022\020\n\010world_id\030\001 \001(\005\022\017\n\007account\030\002 "
      "\001(\t\022\034\n\006sender\030\003 \001(\0132\014.AFMsg.Ident\022\020\n\010log"
      "in_id\030\004 \001(\005\"\243\001\n\025AckConnectWorldResult\022\020\n"
      "\010world_id\030\001 \001(\005\022\034\n\006sender\030\002 \001(\0132\014.AFMsg."
      "Ident\022\020\n\010login_id\030\003 \001(\005\022\017\n\007account\030\004 \001(\t"
      "\022\020\n\010world_ip\030\005 \001(\t\022\022\n\nworld_port\030\006 \001(\005\022\021"
      "\n\tworld_key\030\007 \001(\t\"#\n\017ReqSelectServer\022\020\n\010"
      "world_id\030\001 \001(\005\"5\n\020ReqKickFromWorld\022\020\n\010wo"
      "rld_id\030\001 \001(\005\022\017\n\007account\030\002 \001(\t\"/\n\013ReqRole"
      "List\022\017\n\007game_id\030\001 \001(\005\022\017\n\007account\030\002 \001(\t\"\373"
      "\001\n\014RoleLiteInfo\022\030\n\002id\030\001 \001(\0132\014.AFMsg.Iden"
      "t\022\016\n\006career\030\002 \001(\005\022\013\n\003sex\030\003 \001(\005\022\014\n\004race\030\004"
      " \001(\005\022\021\n\tnoob_name\030\005 \001(\t\022\017\n\007game_id\030\006 \001(\005"
      "\022\022\n\nrole_level\030\007 \001(\005\022\023\n\013delete_time\030\010 \001("
      "\005\022\020\n\010reg_time\030\t \001(\005\022\031\n\021last_offline_time"
      "\030\n \001(\005\022\027\n\017last_offline_ip\030\013 \001(\005\022\023\n\013view_"
      "record\030\014 \001(\t\"=\n\023AckRoleLiteInfoList\022&\n\tc"
      "har_data\030\001 \003(\0132\023.AFMsg.RoleLiteInfo\"o\n\rR"
      "eqCreateRole\022\017\n\007account\030\001 \001(\t\022\016\n\006career\030"
      "\002 \001(\005\022\013\n\003sex\030\003 \001(\005\022\014\n\004race\030\004 \001(\005\022\021\n\tnoob"
      "_name\030\005 \001(\t\022\017\n\007game_id\030\006 \001(\005\"\?\n\rReqDelet"
      "eRole\022\017\n\007account\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007"
      "game_id\030\003 \001(\005\"@\n\016ReqRecoverRole\022\017\n\007accou"
      "nt\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007game_id\030\003 \001(\005\""
      " \n\017ServerHeartBeat\022\r\n\005count\030\001 \001(\005\"/\n\020Rol"
      "eOnlineNotify\022\033\n\005guild\030\001 \001(\0132\014.AFMsg.Ide"
      "nt\"0\n\021RoleOfflineNotify\022\033\n\005guild\030\001 \001(\0132\014"
      ".AFMsg.Ident*Z\n\014EServerState\022\r\n\tEST_CRAS"
      "H\020\000\022\016\n\nEST_NARMAL\020\001\022\014\n\010EST_BUSY\020\002\022\014\n\010EST"
      "_FIRE\020\003\022\017\n\013EST_MAINTEN\020\004*@\n\021ReqServerLis"
      "tType\022\025\n\021RSLT_WORLD_SERVER\020\000\022\024\n\020RSLT_GAM"
      "ES_ERVER\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AFMsgPreGame.proto", &protobuf_RegisterTypes);
  ::protobuf_AFDefine_2eproto::AddDescriptors();
  ::protobuf_AFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AFMsgPreGame_2eproto
namespace AFMsg {
const ::google::protobuf::EnumDescriptor* EServerState_descriptor() {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgPreGame_2eproto::file_level_enum_descriptors[0];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqServerListType_descriptor() {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgPreGame_2eproto::file_level_enum_descriptors[1];
}
bool ReqServerListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServerInfoReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfoReport::kServerIdFieldNumber;
const int ServerInfoReport::kServerNameFieldNumber;
const int ServerInfoReport::kServerIpFieldNumber;
const int ServerInfoReport::kServerPortFieldNumber;
const int ServerInfoReport::kServerMaxOnlineFieldNumber;
const int ServerInfoReport::kServerCurCountFieldNumber;
const int ServerInfoReport::kServerStateFieldNumber;
const int ServerInfoReport::kServerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfoReport::ServerInfoReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ServerInfoReport)
}
ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ip().size() > 0) {
    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ServerInfoReport)
}

void ServerInfoReport::SharedCtor() {
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _cached_size_ = 0;
}

ServerInfoReport::~ServerInfoReport() {
  // @@protoc_insertion_point(destructor:AFMsg.ServerInfoReport)
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfoReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReport::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfoReport& ServerInfoReport::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReport();
  return *internal_default_instance();
}


void ServerInfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear();
}

bool ServerInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ServerInfoReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ServerInfoReport.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ip().data(), static_cast<int>(this->server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ServerInfoReport.server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_max_online = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_max_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_cur_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.EServerState server_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server_state(static_cast< ::AFMsg::EServerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ServerInfoReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ServerInfoReport)
  return false;
#undef DO_
}

void ServerInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfoReport.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfoReport.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_ip(), output);
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_port(), output);
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_max_online(), output);
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_cur_count(), output);
  }

  // .AFMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_state(), output);
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ServerInfoReport)
}

::google::protobuf::uint8* ServerInfoReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfoReport.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfoReport.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ip(), target);
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_port(), target);
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_max_online(), target);
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_cur_count(), target);
  }

  // .AFMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_state(), target);
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ServerInfoReport)
  return target;
}

size_t ServerInfoReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ServerInfoReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string server_ip = 3;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ip());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_port());
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_max_online());
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_cur_count());
  }

  // .AFMsg.EServerState server_state = 7;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_state());
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfoReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ServerInfoReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ServerInfoReport)
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.server_max_online() != 0) {
    set_server_max_online(from.server_max_online());
  }
  if (from.server_cur_count() != 0) {
    set_server_cur_count(from.server_cur_count());
  }
  if (from.server_state() != 0) {
    set_server_state(from.server_state());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
}

void ServerInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
  return true;
}

void ServerInfoReport::Swap(ServerInfoReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfoReport::InternalSwap(ServerInfoReport* other) {
  using std::swap;
  server_name_.Swap(&other->server_name_);
  server_ip_.Swap(&other->server_ip_);
  swap(server_id_, other->server_id_);
  swap(server_port_, other->server_port_);
  swap(server_max_online_, other->server_max_online_);
  swap(server_cur_count_, other->server_cur_count_);
  swap(server_state_, other->server_state_);
  swap(server_type_, other->server_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfoReport::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfoReportList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfoReportList::kServerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfoReportList::ServerInfoReportList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReportList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ServerInfoReportList)
}
ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      server_list_(from.server_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ServerInfoReportList)
}

void ServerInfoReportList::SharedCtor() {
  _cached_size_ = 0;
}

ServerInfoReportList::~ServerInfoReportList() {
  // @@protoc_insertion_point(destructor:AFMsg.ServerInfoReportList)
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
}

void ServerInfoReportList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReportList::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfoReportList& ServerInfoReportList::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReportList();
  return *internal_default_instance();
}


void ServerInfoReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  _internal_metadata_.Clear();
}

bool ServerInfoReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ServerInfoReportList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.ServerInfoReport server_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_server_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ServerInfoReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ServerInfoReportList)
  return false;
#undef DO_
}

void ServerInfoReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.ServerInfoReport server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->server_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ServerInfoReportList)
}

::google::protobuf::uint8* ServerInfoReportList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.ServerInfoReport server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->server_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ServerInfoReportList)
  return target;
}

size_t ServerInfoReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ServerInfoReportList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ServerInfoReport server_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->server_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReportList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfoReportList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ServerInfoReportList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ServerInfoReportList)
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
}

void ServerInfoReportList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {
  return true;
}

void ServerInfoReportList::Swap(ServerInfoReportList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfoReportList::InternalSwap(ServerInfoReportList* other) {
  using std::swap;
  CastToBase(&server_list_)->InternalSwap(CastToBase(&other->server_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfoReportList::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckEventResult::InitAsDefaultInstance() {
  ::AFMsg::_AckEventResult_default_instance_._instance.get_mutable()->event_object_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckEventResult_default_instance_._instance.get_mutable()->event_client_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckEventResult::clear_event_object() {
  if (GetArenaNoVirtual() == NULL && event_object_ != NULL) {
    delete event_object_;
  }
  event_object_ = NULL;
}
void AckEventResult::clear_event_client() {
  if (GetArenaNoVirtual() == NULL && event_client_ != NULL) {
    delete event_client_;
  }
  event_client_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckEventResult::kEventCodeFieldNumber;
const int AckEventResult::kEventObjectFieldNumber;
const int AckEventResult::kEventClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckEventResult::AckEventResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckEventResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckEventResult)
}
AckEventResult::AckEventResult(const AckEventResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event_object()) {
    event_object_ = new ::AFMsg::Ident(*from.event_object_);
  } else {
    event_object_ = NULL;
  }
  if (from.has_event_client()) {
    event_client_ = new ::AFMsg::Ident(*from.event_client_);
  } else {
    event_client_ = NULL;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckEventResult)
}

void AckEventResult::SharedCtor() {
  ::memset(&event_object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&event_object_)) + sizeof(event_code_));
  _cached_size_ = 0;
}

AckEventResult::~AckEventResult() {
  // @@protoc_insertion_point(destructor:AFMsg.AckEventResult)
  SharedDtor();
}

void AckEventResult::SharedDtor() {
  if (this != internal_default_instance()) delete event_object_;
  if (this != internal_default_instance()) delete event_client_;
}

void AckEventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEventResult::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckEventResult& AckEventResult::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckEventResult();
  return *internal_default_instance();
}


void AckEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && event_object_ != NULL) {
    delete event_object_;
  }
  event_object_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_client_ != NULL) {
    delete event_client_;
  }
  event_client_ = NULL;
  event_code_ = 0;
  _internal_metadata_.Clear();
}

bool AckEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckEventResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.EGameEventCode event_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_code(static_cast< ::AFMsg::EGameEventCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident event_object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident event_client = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckEventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckEventResult)
  return false;
#undef DO_
}

void AckEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_code(), output);
  }

  // .AFMsg.Ident event_object = 2;
  if (this->has_event_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *event_object_, output);
  }

  // .AFMsg.Ident event_client = 3;
  if (this->has_event_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *event_client_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckEventResult)
}

::google::protobuf::uint8* AckEventResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_code(), target);
  }

  // .AFMsg.Ident event_object = 2;
  if (this->has_event_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *event_object_, deterministic, target);
  }

  // .AFMsg.Ident event_client = 3;
  if (this->has_event_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *event_client_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckEventResult)
  return target;
}

size_t AckEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckEventResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident event_object = 2;
  if (this->has_event_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_object_);
  }

  // .AFMsg.Ident event_client = 3;
  if (this->has_event_client()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_client_);
  }

  // .AFMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEventResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEventResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckEventResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckEventResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckEventResult)
    MergeFrom(*source);
  }
}

void AckEventResult::MergeFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_object()) {
    mutable_event_object()->::AFMsg::Ident::MergeFrom(from.event_object());
  }
  if (from.has_event_client()) {
    mutable_event_client()->::AFMsg::Ident::MergeFrom(from.event_client());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
}

void AckEventResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEventResult::CopyFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEventResult::IsInitialized() const {
  return true;
}

void AckEventResult::Swap(AckEventResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckEventResult::InternalSwap(AckEventResult* other) {
  using std::swap;
  swap(event_object_, other->event_object_);
  swap(event_client_, other->event_client_);
  swap(event_code_, other->event_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckEventResult::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAccountLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAccountLogin::kAccountFieldNumber;
const int ReqAccountLogin::kPasswordFieldNumber;
const int ReqAccountLogin::kSecurityCodeFieldNumber;
const int ReqAccountLogin::kSignBuffFieldNumber;
const int ReqAccountLogin::kClientVersionFieldNumber;
const int ReqAccountLogin::kLoginModeFieldNumber;
const int ReqAccountLogin::kClientIPFieldNumber;
const int ReqAccountLogin::kClientMACFieldNumber;
const int ReqAccountLogin::kDeviceInfoFieldNumber;
const int ReqAccountLogin::kExtraInfoFieldNumber;
const int ReqAccountLogin::kPlatformTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAccountLogin::ReqAccountLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAccountLogin)
}
ReqAccountLogin::ReqAccountLogin(const ReqAccountLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  security_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.security_code().size() > 0) {
    security_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_code_);
  }
  signbuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signbuff().size() > 0) {
    signbuff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signbuff_);
  }
  device_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_info().size() > 0) {
    device_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_info_);
  }
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra_info().size() > 0) {
    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  ::memcpy(&clientversion_, &from.clientversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_type_) -
    reinterpret_cast<char*>(&clientversion_)) + sizeof(platform_type_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAccountLogin)
}

void ReqAccountLogin::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  security_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signbuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_type_) -
      reinterpret_cast<char*>(&clientversion_)) + sizeof(platform_type_));
  _cached_size_ = 0;
}

ReqAccountLogin::~ReqAccountLogin() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAccountLogin)
  SharedDtor();
}

void ReqAccountLogin::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  security_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signbuff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAccountLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAccountLogin::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAccountLogin& ReqAccountLogin::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLogin();
  return *internal_default_instance();
}


void ReqAccountLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAccountLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  security_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signbuff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_type_) -
      reinterpret_cast<char*>(&clientversion_)) + sizeof(platform_type_));
  _internal_metadata_.Clear();
}

bool ReqAccountLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAccountLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string security_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->security_code().data(), static_cast<int>(this->security_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.security_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signBuff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signbuff()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signbuff().data(), static_cast<int>(this->signbuff().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.signBuff"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 loginMode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientIP = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 clientMAC = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientmac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_info().data(), static_cast<int>(this->device_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.device_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra_info().data(), static_cast<int>(this->extra_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogin.extra_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 platform_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAccountLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAccountLogin)
  return false;
#undef DO_
}

void ReqAccountLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAccountLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // string security_code = 4;
  if (this->security_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_code().data(), static_cast<int>(this->security_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.security_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->security_code(), output);
  }

  // string signBuff = 5;
  if (this->signbuff().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signbuff().data(), static_cast<int>(this->signbuff().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.signBuff");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signbuff(), output);
  }

  // int32 clientVersion = 6;
  if (this->clientversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clientversion(), output);
  }

  // int32 loginMode = 7;
  if (this->loginmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loginmode(), output);
  }

  // int32 clientIP = 8;
  if (this->clientip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clientip(), output);
  }

  // int64 clientMAC = 9;
  if (this->clientmac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->clientmac(), output);
  }

  // string device_info = 10;
  if (this->device_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_info().data(), static_cast<int>(this->device_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.device_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device_info(), output);
  }

  // string extra_info = 11;
  if (this->extra_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->extra_info(), output);
  }

  // int32 platform_type = 12;
  if (this->platform_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->platform_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAccountLogin)
}

::google::protobuf::uint8* ReqAccountLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAccountLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // string security_code = 4;
  if (this->security_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_code().data(), static_cast<int>(this->security_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.security_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->security_code(), target);
  }

  // string signBuff = 5;
  if (this->signbuff().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signbuff().data(), static_cast<int>(this->signbuff().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.signBuff");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signbuff(), target);
  }

  // int32 clientVersion = 6;
  if (this->clientversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clientversion(), target);
  }

  // int32 loginMode = 7;
  if (this->loginmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loginmode(), target);
  }

  // int32 clientIP = 8;
  if (this->clientip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clientip(), target);
  }

  // int64 clientMAC = 9;
  if (this->clientmac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->clientmac(), target);
  }

  // string device_info = 10;
  if (this->device_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_info().data(), static_cast<int>(this->device_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.device_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_info(), target);
  }

  // string extra_info = 11;
  if (this->extra_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogin.extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->extra_info(), target);
  }

  // int32 platform_type = 12;
  if (this->platform_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->platform_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAccountLogin)
  return target;
}

size_t ReqAccountLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAccountLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string security_code = 4;
  if (this->security_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->security_code());
  }

  // string signBuff = 5;
  if (this->signbuff().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signbuff());
  }

  // string device_info = 10;
  if (this->device_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_info());
  }

  // string extra_info = 11;
  if (this->extra_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra_info());
  }

  // int32 clientVersion = 6;
  if (this->clientversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientversion());
  }

  // int32 loginMode = 7;
  if (this->loginmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->loginmode());
  }

  // int64 clientMAC = 9;
  if (this->clientmac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->clientmac());
  }

  // int32 clientIP = 8;
  if (this->clientip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientip());
  }

  // int32 platform_type = 12;
  if (this->platform_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->platform_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAccountLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAccountLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAccountLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAccountLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAccountLogin)
    MergeFrom(*source);
  }
}

void ReqAccountLogin::MergeFrom(const ReqAccountLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.security_code().size() > 0) {

    security_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_code_);
  }
  if (from.signbuff().size() > 0) {

    signbuff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signbuff_);
  }
  if (from.device_info().size() > 0) {

    device_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_info_);
  }
  if (from.extra_info().size() > 0) {

    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  if (from.clientversion() != 0) {
    set_clientversion(from.clientversion());
  }
  if (from.loginmode() != 0) {
    set_loginmode(from.loginmode());
  }
  if (from.clientmac() != 0) {
    set_clientmac(from.clientmac());
  }
  if (from.clientip() != 0) {
    set_clientip(from.clientip());
  }
  if (from.platform_type() != 0) {
    set_platform_type(from.platform_type());
  }
}

void ReqAccountLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogin::CopyFrom(const ReqAccountLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogin::IsInitialized() const {
  return true;
}

void ReqAccountLogin::Swap(ReqAccountLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAccountLogin::InternalSwap(ReqAccountLogin* other) {
  using std::swap;
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  security_code_.Swap(&other->security_code_);
  signbuff_.Swap(&other->signbuff_);
  device_info_.Swap(&other->device_info_);
  extra_info_.Swap(&other->extra_info_);
  swap(clientversion_, other->clientversion_);
  swap(loginmode_, other->loginmode_);
  swap(clientmac_, other->clientmac_);
  swap(clientip_, other->clientip_);
  swap(platform_type_, other->platform_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAccountLogin::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAccountLogout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAccountLogout::kAccountFieldNumber;
const int ReqAccountLogout::kExtraInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAccountLogout::ReqAccountLogout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLogout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAccountLogout)
}
ReqAccountLogout::ReqAccountLogout(const ReqAccountLogout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra_info().size() > 0) {
    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAccountLogout)
}

void ReqAccountLogout::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqAccountLogout::~ReqAccountLogout() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAccountLogout)
  SharedDtor();
}

void ReqAccountLogout::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAccountLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAccountLogout::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAccountLogout& ReqAccountLogout::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLogout();
  return *internal_default_instance();
}


void ReqAccountLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAccountLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqAccountLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAccountLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogout.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra_info().data(), static_cast<int>(this->extra_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAccountLogout.extra_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAccountLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAccountLogout)
  return false;
#undef DO_
}

void ReqAccountLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAccountLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogout.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string extra_info = 3;
  if (this->extra_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogout.extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extra_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAccountLogout)
}

::google::protobuf::uint8* ReqAccountLogout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAccountLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogout.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string extra_info = 3;
  if (this->extra_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_info().data(), static_cast<int>(this->extra_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAccountLogout.extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extra_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAccountLogout)
  return target;
}

size_t ReqAccountLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAccountLogout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string extra_info = 3;
  if (this->extra_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAccountLogout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAccountLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAccountLogout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAccountLogout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAccountLogout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAccountLogout)
    MergeFrom(*source);
  }
}

void ReqAccountLogout::MergeFrom(const ReqAccountLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAccountLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.extra_info().size() > 0) {

    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
}

void ReqAccountLogout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAccountLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogout::CopyFrom(const ReqAccountLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAccountLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogout::IsInitialized() const {
  return true;
}

void ReqAccountLogout::Swap(ReqAccountLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAccountLogout::InternalSwap(ReqAccountLogout* other) {
  using std::swap;
  account_.Swap(&other->account_);
  extra_info_.Swap(&other->extra_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAccountLogout::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kServerIdFieldNumber;
const int ServerInfo::kNameFieldNumber;
const int ServerInfo::kWaitCountFieldNumber;
const int ServerInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ServerInfo)
}

void ServerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  _cached_size_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfo& ServerInfo::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfo();
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ServerInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wait_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.EServerState status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::AFMsg::EServerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_count(), output);
  }

  // .AFMsg.EServerState status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ServerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_count(), target);
  }

  // .AFMsg.EServerState status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wait_count());
  }

  // .AFMsg.EServerState status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.wait_count() != 0) {
    set_wait_count(from.wait_count());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(server_id_, other->server_id_);
  swap(wait_count_, other->wait_count_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqServerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqServerList::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqServerList::ReqServerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqServerList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqServerList)
}
ReqServerList::ReqServerList(const ReqServerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqServerList)
}

void ReqServerList::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ReqServerList::~ReqServerList() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqServerList)
  SharedDtor();
}

void ReqServerList::SharedDtor() {
}

void ReqServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServerList::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqServerList& ReqServerList::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqServerList();
  return *internal_default_instance();
}


void ReqServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.ReqServerListType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AFMsg::ReqServerListType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqServerList)
  return false;
#undef DO_
}

void ReqServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqServerList)
}

::google::protobuf::uint8* ReqServerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqServerList)
  return target;
}

size_t ReqServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqServerList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqServerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqServerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqServerList)
    MergeFrom(*source);
  }
}

void ReqServerList::MergeFrom(const ReqServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServerList::CopyFrom(const ReqServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServerList::IsInitialized() const {
  return true;
}

void ReqServerList::Swap(ReqServerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqServerList::InternalSwap(ReqServerList* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqServerList::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckServerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckServerList::kTypeFieldNumber;
const int AckServerList::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckServerList::AckServerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckServerList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckServerList)
}
AckServerList::AckServerList(const AckServerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_(from.info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckServerList)
}

void AckServerList::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

AckServerList::~AckServerList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckServerList)
  SharedDtor();
}

void AckServerList::SharedDtor() {
}

void AckServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckServerList::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckServerList& AckServerList::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckServerList();
  return *internal_default_instance();
}


void AckServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

bool AckServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.ReqServerListType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AFMsg::ReqServerListType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.ServerInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckServerList)
  return false;
#undef DO_
}

void AckServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .AFMsg.ServerInfo info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckServerList)
}

::google::protobuf::uint8* AckServerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .AFMsg.ServerInfo info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckServerList)
  return target;
}

size_t AckServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckServerList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ServerInfo info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  // .AFMsg.ReqServerListType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckServerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckServerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckServerList)
    MergeFrom(*source);
  }
}

void AckServerList::MergeFrom(const AckServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AckServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckServerList::CopyFrom(const AckServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckServerList::IsInitialized() const {
  return true;
}

void AckServerList::Swap(AckServerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckServerList::InternalSwap(AckServerList* other) {
  using std::swap;
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckServerList::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqConnectWorld::InitAsDefaultInstance() {
  ::AFMsg::_ReqConnectWorld_default_instance_._instance.get_mutable()->sender_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqConnectWorld::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqConnectWorld::kWorldIdFieldNumber;
const int ReqConnectWorld::kAccountFieldNumber;
const int ReqConnectWorld::kSenderFieldNumber;
const int ReqConnectWorld::kLoginIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqConnectWorld::ReqConnectWorld()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqConnectWorld();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqConnectWorld)
}
ReqConnectWorld::ReqConnectWorld(const ReqConnectWorld& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_sender()) {
    sender_ = new ::AFMsg::Ident(*from.sender_);
  } else {
    sender_ = NULL;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqConnectWorld)
}

void ReqConnectWorld::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(login_id_));
  _cached_size_ = 0;
}

ReqConnectWorld::~ReqConnectWorld() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqConnectWorld)
  SharedDtor();
}

void ReqConnectWorld::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void ReqConnectWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqConnectWorld::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqConnectWorld& ReqConnectWorld::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqConnectWorld();
  return *internal_default_instance();
}


void ReqConnectWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqConnectWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  _internal_metadata_.Clear();
}

bool ReqConnectWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqConnectWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqConnectWorld.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqConnectWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqConnectWorld)
  return false;
#undef DO_
}

void ReqConnectWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqConnectWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqConnectWorld.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // .AFMsg.Ident sender = 3;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *sender_, output);
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->login_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqConnectWorld)
}

::google::protobuf::uint8* ReqConnectWorld::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqConnectWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqConnectWorld.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // .AFMsg.Ident sender = 3;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *sender_, deterministic, target);
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->login_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqConnectWorld)
  return target;
}

size_t ReqConnectWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqConnectWorld)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // .AFMsg.Ident sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqConnectWorld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqConnectWorld* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqConnectWorld>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqConnectWorld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqConnectWorld)
    MergeFrom(*source);
  }
}

void ReqConnectWorld::MergeFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_sender()) {
    mutable_sender()->::AFMsg::Ident::MergeFrom(from.sender());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.login_id() != 0) {
    set_login_id(from.login_id());
  }
}

void ReqConnectWorld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConnectWorld::CopyFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConnectWorld::IsInitialized() const {
  return true;
}

void ReqConnectWorld::Swap(ReqConnectWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqConnectWorld::InternalSwap(ReqConnectWorld* other) {
  using std::swap;
  account_.Swap(&other->account_);
  swap(sender_, other->sender_);
  swap(world_id_, other->world_id_);
  swap(login_id_, other->login_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqConnectWorld::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckConnectWorldResult::InitAsDefaultInstance() {
  ::AFMsg::_AckConnectWorldResult_default_instance_._instance.get_mutable()->sender_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckConnectWorldResult::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckConnectWorldResult::kWorldIdFieldNumber;
const int AckConnectWorldResult::kSenderFieldNumber;
const int AckConnectWorldResult::kLoginIdFieldNumber;
const int AckConnectWorldResult::kAccountFieldNumber;
const int AckConnectWorldResult::kWorldIpFieldNumber;
const int AckConnectWorldResult::kWorldPortFieldNumber;
const int AckConnectWorldResult::kWorldKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckConnectWorldResult::AckConnectWorldResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckConnectWorldResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckConnectWorldResult)
}
AckConnectWorldResult::AckConnectWorldResult(const AckConnectWorldResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  world_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.world_ip().size() > 0) {
    world_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_ip_);
  }
  world_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.world_key().size() > 0) {
    world_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_key_);
  }
  if (from.has_sender()) {
    sender_ = new ::AFMsg::Ident(*from.sender_);
  } else {
    sender_ = NULL;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_port_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(world_port_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckConnectWorldResult)
}

void AckConnectWorldResult::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_port_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(world_port_));
  _cached_size_ = 0;
}

AckConnectWorldResult::~AckConnectWorldResult() {
  // @@protoc_insertion_point(destructor:AFMsg.AckConnectWorldResult)
  SharedDtor();
}

void AckConnectWorldResult::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void AckConnectWorldResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckConnectWorldResult::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckConnectWorldResult& AckConnectWorldResult::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckConnectWorldResult();
  return *internal_default_instance();
}


void AckConnectWorldResult::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckConnectWorldResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) {
    delete sender_;
  }
  sender_ = NULL;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_port_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(world_port_));
  _internal_metadata_.Clear();
}

bool AckConnectWorldResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckConnectWorldResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.AckConnectWorldResult.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string world_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->world_ip().data(), static_cast<int>(this->world_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.AckConnectWorldResult.world_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string world_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->world_key().data(), static_cast<int>(this->world_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.AckConnectWorldResult.world_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckConnectWorldResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckConnectWorldResult)
  return false;
#undef DO_
}

void AckConnectWorldResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckConnectWorldResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // .AFMsg.Ident sender = 2;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *sender_, output);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->login_id(), output);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // string world_ip = 5;
  if (this->world_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world_ip().data(), static_cast<int>(this->world_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.world_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->world_ip(), output);
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->world_port(), output);
  }

  // string world_key = 7;
  if (this->world_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world_key().data(), static_cast<int>(this->world_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.world_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->world_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckConnectWorldResult)
}

::google::protobuf::uint8* AckConnectWorldResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckConnectWorldResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // .AFMsg.Ident sender = 2;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *sender_, deterministic, target);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->login_id(), target);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // string world_ip = 5;
  if (this->world_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world_ip().data(), static_cast<int>(this->world_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.world_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->world_ip(), target);
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->world_port(), target);
  }

  // string world_key = 7;
  if (this->world_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world_key().data(), static_cast<int>(this->world_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckConnectWorldResult.world_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->world_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckConnectWorldResult)
  return target;
}

size_t AckConnectWorldResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckConnectWorldResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string world_ip = 5;
  if (this->world_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world_ip());
  }

  // string world_key = 7;
  if (this->world_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world_key());
  }

  // .AFMsg.Ident sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->world_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckConnectWorldResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckConnectWorldResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckConnectWorldResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckConnectWorldResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckConnectWorldResult)
    MergeFrom(*source);
  }
}

void AckConnectWorldResult::MergeFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.world_ip().size() > 0) {

    world_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_ip_);
  }
  if (from.world_key().size() > 0) {

    world_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_key_);
  }
  if (from.has_sender()) {
    mutable_sender()->::AFMsg::Ident::MergeFrom(from.sender());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.login_id() != 0) {
    set_login_id(from.login_id());
  }
  if (from.world_port() != 0) {
    set_world_port(from.world_port());
  }
}

void AckConnectWorldResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckConnectWorldResult::CopyFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckConnectWorldResult::IsInitialized() const {
  return true;
}

void AckConnectWorldResult::Swap(AckConnectWorldResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckConnectWorldResult::InternalSwap(AckConnectWorldResult* other) {
  using std::swap;
  account_.Swap(&other->account_);
  world_ip_.Swap(&other->world_ip_);
  world_key_.Swap(&other->world_key_);
  swap(sender_, other->sender_);
  swap(world_id_, other->world_id_);
  swap(login_id_, other->login_id_);
  swap(world_port_, other->world_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckConnectWorldResult::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSelectServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSelectServer::kWorldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSelectServer::ReqSelectServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqSelectServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSelectServer)
}
ReqSelectServer::ReqSelectServer(const ReqSelectServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  world_id_ = from.world_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSelectServer)
}

void ReqSelectServer::SharedCtor() {
  world_id_ = 0;
  _cached_size_ = 0;
}

ReqSelectServer::~ReqSelectServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSelectServer)
  SharedDtor();
}

void ReqSelectServer::SharedDtor() {
}

void ReqSelectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSelectServer::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSelectServer& ReqSelectServer::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqSelectServer();
  return *internal_default_instance();
}


void ReqSelectServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSelectServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqSelectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSelectServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSelectServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSelectServer)
  return false;
#undef DO_
}

void ReqSelectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSelectServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSelectServer)
}

::google::protobuf::uint8* ReqSelectServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSelectServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSelectServer)
  return target;
}

size_t ReqSelectServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSelectServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSelectServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSelectServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSelectServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSelectServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSelectServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSelectServer)
    MergeFrom(*source);
  }
}

void ReqSelectServer::MergeFrom(const ReqSelectServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSelectServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void ReqSelectServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSelectServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSelectServer::CopyFrom(const ReqSelectServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSelectServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSelectServer::IsInitialized() const {
  return true;
}

void ReqSelectServer::Swap(ReqSelectServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSelectServer::InternalSwap(ReqSelectServer* other) {
  using std::swap;
  swap(world_id_, other->world_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSelectServer::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqKickFromWorld::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqKickFromWorld::kWorldIdFieldNumber;
const int ReqKickFromWorld::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqKickFromWorld::ReqKickFromWorld()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqKickFromWorld();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqKickFromWorld)
}
ReqKickFromWorld::ReqKickFromWorld(const ReqKickFromWorld& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  world_id_ = from.world_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqKickFromWorld)
}

void ReqKickFromWorld::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_id_ = 0;
  _cached_size_ = 0;
}

ReqKickFromWorld::~ReqKickFromWorld() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqKickFromWorld)
  SharedDtor();
}

void ReqKickFromWorld::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqKickFromWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKickFromWorld::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqKickFromWorld& ReqKickFromWorld::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqKickFromWorld();
  return *internal_default_instance();
}


void ReqKickFromWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqKickFromWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqKickFromWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqKickFromWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqKickFromWorld.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqKickFromWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqKickFromWorld)
  return false;
#undef DO_
}

void ReqKickFromWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqKickFromWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqKickFromWorld.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqKickFromWorld)
}

::google::protobuf::uint8* ReqKickFromWorld::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqKickFromWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqKickFromWorld.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqKickFromWorld)
  return target;
}

size_t ReqKickFromWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqKickFromWorld)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKickFromWorld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqKickFromWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqKickFromWorld* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqKickFromWorld>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqKickFromWorld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqKickFromWorld)
    MergeFrom(*source);
  }
}

void ReqKickFromWorld::MergeFrom(const ReqKickFromWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqKickFromWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void ReqKickFromWorld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqKickFromWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKickFromWorld::CopyFrom(const ReqKickFromWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqKickFromWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKickFromWorld::IsInitialized() const {
  return true;
}

void ReqKickFromWorld::Swap(ReqKickFromWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqKickFromWorld::InternalSwap(ReqKickFromWorld* other) {
  using std::swap;
  account_.Swap(&other->account_);
  swap(world_id_, other->world_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqKickFromWorld::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqRoleList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRoleList::kGameIdFieldNumber;
const int ReqRoleList::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRoleList::ReqRoleList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRoleList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqRoleList)
}
ReqRoleList::ReqRoleList(const ReqRoleList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqRoleList)
}

void ReqRoleList::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _cached_size_ = 0;
}

ReqRoleList::~ReqRoleList() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqRoleList)
  SharedDtor();
}

void ReqRoleList::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoleList::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqRoleList& ReqRoleList::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRoleList();
  return *internal_default_instance();
}


void ReqRoleList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqRoleList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqRoleList.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqRoleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqRoleList)
  return false;
#undef DO_
}

void ReqRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRoleList.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqRoleList)
}

::google::protobuf::uint8* ReqRoleList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqRoleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRoleList.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqRoleList)
  return target;
}

size_t ReqRoleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqRoleList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoleList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRoleList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRoleList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqRoleList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqRoleList)
    MergeFrom(*source);
  }
}

void ReqRoleList::MergeFrom(const ReqRoleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqRoleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqRoleList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoleList::CopyFrom(const ReqRoleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqRoleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoleList::IsInitialized() const {
  return true;
}

void ReqRoleList::Swap(ReqRoleList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRoleList::InternalSwap(ReqRoleList* other) {
  using std::swap;
  account_.Swap(&other->account_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRoleList::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleLiteInfo::InitAsDefaultInstance() {
  ::AFMsg::_RoleLiteInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void RoleLiteInfo::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleLiteInfo::kIdFieldNumber;
const int RoleLiteInfo::kCareerFieldNumber;
const int RoleLiteInfo::kSexFieldNumber;
const int RoleLiteInfo::kRaceFieldNumber;
const int RoleLiteInfo::kNoobNameFieldNumber;
const int RoleLiteInfo::kGameIdFieldNumber;
const int RoleLiteInfo::kRoleLevelFieldNumber;
const int RoleLiteInfo::kDeleteTimeFieldNumber;
const int RoleLiteInfo::kRegTimeFieldNumber;
const int RoleLiteInfo::kLastOfflineTimeFieldNumber;
const int RoleLiteInfo::kLastOfflineIpFieldNumber;
const int RoleLiteInfo::kViewRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleLiteInfo::RoleLiteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleLiteInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.RoleLiteInfo)
}
RoleLiteInfo::RoleLiteInfo(const RoleLiteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  noob_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.noob_name().size() > 0) {
    noob_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  view_record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.view_record().size() > 0) {
    view_record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_record_);
  }
  if (from.has_id()) {
    id_ = new ::AFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&career_, &from.career_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_offline_ip_) -
    reinterpret_cast<char*>(&career_)) + sizeof(last_offline_ip_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.RoleLiteInfo)
}

void RoleLiteInfo::SharedCtor() {
  noob_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_offline_ip_) -
      reinterpret_cast<char*>(&id_)) + sizeof(last_offline_ip_));
  _cached_size_ = 0;
}

RoleLiteInfo::~RoleLiteInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.RoleLiteInfo)
  SharedDtor();
}

void RoleLiteInfo::SharedDtor() {
  noob_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void RoleLiteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleLiteInfo::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleLiteInfo& RoleLiteInfo::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleLiteInfo();
  return *internal_default_instance();
}


void RoleLiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.RoleLiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  noob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  ::memset(&career_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_offline_ip_) -
      reinterpret_cast<char*>(&career_)) + sizeof(last_offline_ip_));
  _internal_metadata_.Clear();
}

bool RoleLiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.RoleLiteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 career = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 race = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string noob_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noob_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->noob_name().data(), static_cast<int>(this->noob_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.RoleLiteInfo.noob_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 role_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delete_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reg_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_offline_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_offline_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_offline_ip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_offline_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string view_record = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->view_record().data(), static_cast<int>(this->view_record().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.RoleLiteInfo.view_record"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.RoleLiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.RoleLiteInfo)
  return false;
#undef DO_
}

void RoleLiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.RoleLiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_, output);
  }

  // int32 career = 2;
  if (this->career() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // int32 race = 4;
  if (this->race() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noob_name().data(), static_cast<int>(this->noob_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.RoleLiteInfo.noob_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->noob_name(), output);
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_id(), output);
  }

  // int32 role_level = 7;
  if (this->role_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_level(), output);
  }

  // int32 delete_time = 8;
  if (this->delete_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->delete_time(), output);
  }

  // int32 reg_time = 9;
  if (this->reg_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reg_time(), output);
  }

  // int32 last_offline_time = 10;
  if (this->last_offline_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->last_offline_time(), output);
  }

  // int32 last_offline_ip = 11;
  if (this->last_offline_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->last_offline_ip(), output);
  }

  // string view_record = 12;
  if (this->view_record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->view_record().data(), static_cast<int>(this->view_record().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.RoleLiteInfo.view_record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->view_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.RoleLiteInfo)
}

::google::protobuf::uint8* RoleLiteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.RoleLiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *id_, deterministic, target);
  }

  // int32 career = 2;
  if (this->career() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // int32 race = 4;
  if (this->race() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noob_name().data(), static_cast<int>(this->noob_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.RoleLiteInfo.noob_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->noob_name(), target);
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_id(), target);
  }

  // int32 role_level = 7;
  if (this->role_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_level(), target);
  }

  // int32 delete_time = 8;
  if (this->delete_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->delete_time(), target);
  }

  // int32 reg_time = 9;
  if (this->reg_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reg_time(), target);
  }

  // int32 last_offline_time = 10;
  if (this->last_offline_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->last_offline_time(), target);
  }

  // int32 last_offline_ip = 11;
  if (this->last_offline_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->last_offline_ip(), target);
  }

  // string view_record = 12;
  if (this->view_record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->view_record().data(), static_cast<int>(this->view_record().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.RoleLiteInfo.view_record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->view_record(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.RoleLiteInfo)
  return target;
}

size_t RoleLiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.RoleLiteInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->noob_name());
  }

  // string view_record = 12;
  if (this->view_record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->view_record());
  }

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 career = 2;
  if (this->career() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career());
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // int32 race = 4;
  if (this->race() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->race());
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  // int32 role_level = 7;
  if (this->role_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_level());
  }

  // int32 delete_time = 8;
  if (this->delete_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delete_time());
  }

  // int32 reg_time = 9;
  if (this->reg_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reg_time());
  }

  // int32 last_offline_time = 10;
  if (this->last_offline_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_offline_time());
  }

  // int32 last_offline_ip = 11;
  if (this->last_offline_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_offline_ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleLiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.RoleLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleLiteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleLiteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.RoleLiteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.RoleLiteInfo)
    MergeFrom(*source);
  }
}

void RoleLiteInfo::MergeFrom(const RoleLiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.RoleLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.noob_name().size() > 0) {

    noob_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  if (from.view_record().size() > 0) {

    view_record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_record_);
  }
  if (from.has_id()) {
    mutable_id()->::AFMsg::Ident::MergeFrom(from.id());
  }
  if (from.career() != 0) {
    set_career(from.career());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.race() != 0) {
    set_race(from.race());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.role_level() != 0) {
    set_role_level(from.role_level());
  }
  if (from.delete_time() != 0) {
    set_delete_time(from.delete_time());
  }
  if (from.reg_time() != 0) {
    set_reg_time(from.reg_time());
  }
  if (from.last_offline_time() != 0) {
    set_last_offline_time(from.last_offline_time());
  }
  if (from.last_offline_ip() != 0) {
    set_last_offline_ip(from.last_offline_ip());
  }
}

void RoleLiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.RoleLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleLiteInfo::CopyFrom(const RoleLiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.RoleLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLiteInfo::IsInitialized() const {
  return true;
}

void RoleLiteInfo::Swap(RoleLiteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleLiteInfo::InternalSwap(RoleLiteInfo* other) {
  using std::swap;
  noob_name_.Swap(&other->noob_name_);
  view_record_.Swap(&other->view_record_);
  swap(id_, other->id_);
  swap(career_, other->career_);
  swap(sex_, other->sex_);
  swap(race_, other->race_);
  swap(game_id_, other->game_id_);
  swap(role_level_, other->role_level_);
  swap(delete_time_, other->delete_time_);
  swap(reg_time_, other->reg_time_);
  swap(last_offline_time_, other->last_offline_time_);
  swap(last_offline_ip_, other->last_offline_ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleLiteInfo::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckRoleLiteInfoList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckRoleLiteInfoList::kCharDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckRoleLiteInfoList::AckRoleLiteInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckRoleLiteInfoList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckRoleLiteInfoList)
}
AckRoleLiteInfoList::AckRoleLiteInfoList(const AckRoleLiteInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      char_data_(from.char_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckRoleLiteInfoList)
}

void AckRoleLiteInfoList::SharedCtor() {
  _cached_size_ = 0;
}

AckRoleLiteInfoList::~AckRoleLiteInfoList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckRoleLiteInfoList)
  SharedDtor();
}

void AckRoleLiteInfoList::SharedDtor() {
}

void AckRoleLiteInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRoleLiteInfoList::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckRoleLiteInfoList& AckRoleLiteInfoList::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckRoleLiteInfoList();
  return *internal_default_instance();
}


void AckRoleLiteInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckRoleLiteInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_data_.Clear();
  _internal_metadata_.Clear();
}

bool AckRoleLiteInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckRoleLiteInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.RoleLiteInfo char_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_char_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckRoleLiteInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckRoleLiteInfoList)
  return false;
#undef DO_
}

void AckRoleLiteInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckRoleLiteInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.RoleLiteInfo char_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->char_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckRoleLiteInfoList)
}

::google::protobuf::uint8* AckRoleLiteInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckRoleLiteInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.RoleLiteInfo char_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->char_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckRoleLiteInfoList)
  return target;
}

size_t AckRoleLiteInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckRoleLiteInfoList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.RoleLiteInfo char_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->char_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->char_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRoleLiteInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckRoleLiteInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRoleLiteInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckRoleLiteInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckRoleLiteInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckRoleLiteInfoList)
    MergeFrom(*source);
  }
}

void AckRoleLiteInfoList::MergeFrom(const AckRoleLiteInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckRoleLiteInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  char_data_.MergeFrom(from.char_data_);
}

void AckRoleLiteInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckRoleLiteInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRoleLiteInfoList::CopyFrom(const AckRoleLiteInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckRoleLiteInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRoleLiteInfoList::IsInitialized() const {
  return true;
}

void AckRoleLiteInfoList::Swap(AckRoleLiteInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckRoleLiteInfoList::InternalSwap(AckRoleLiteInfoList* other) {
  using std::swap;
  CastToBase(&char_data_)->InternalSwap(CastToBase(&other->char_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckRoleLiteInfoList::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCreateRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreateRole::kAccountFieldNumber;
const int ReqCreateRole::kCareerFieldNumber;
const int ReqCreateRole::kSexFieldNumber;
const int ReqCreateRole::kRaceFieldNumber;
const int ReqCreateRole::kNoobNameFieldNumber;
const int ReqCreateRole::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreateRole::ReqCreateRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqCreateRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCreateRole)
}
ReqCreateRole::ReqCreateRole(const ReqCreateRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  noob_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.noob_name().size() > 0) {
    noob_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  ::memcpy(&career_, &from.career_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&career_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCreateRole)
}

void ReqCreateRole::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noob_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&career_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&career_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

ReqCreateRole::~ReqCreateRole() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCreateRole)
  SharedDtor();
}

void ReqCreateRole::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noob_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateRole::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCreateRole& ReqCreateRole::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqCreateRole();
  return *internal_default_instance();
}


void ReqCreateRole::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCreateRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&career_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&career_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

bool ReqCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCreateRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqCreateRole.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 career = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 race = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string noob_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noob_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->noob_name().data(), static_cast<int>(this->noob_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqCreateRole.noob_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCreateRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCreateRole)
  return false;
#undef DO_
}

void ReqCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCreateRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCreateRole.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // int32 career = 2;
  if (this->career() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // int32 race = 4;
  if (this->race() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noob_name().data(), static_cast<int>(this->noob_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCreateRole.noob_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->noob_name(), output);
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCreateRole)
}

::google::protobuf::uint8* ReqCreateRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCreateRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCreateRole.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // int32 career = 2;
  if (this->career() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // int32 race = 4;
  if (this->race() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noob_name().data(), static_cast<int>(this->noob_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCreateRole.noob_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->noob_name(), target);
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCreateRole)
  return target;
}

size_t ReqCreateRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCreateRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string noob_name = 5;
  if (this->noob_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->noob_name());
  }

  // int32 career = 2;
  if (this->career() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career());
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // int32 race = 4;
  if (this->race() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->race());
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreateRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCreateRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCreateRole)
    MergeFrom(*source);
  }
}

void ReqCreateRole::MergeFrom(const ReqCreateRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.noob_name().size() > 0) {

    noob_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noob_name_);
  }
  if (from.career() != 0) {
    set_career(from.career());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.race() != 0) {
    set_race(from.race());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateRole::CopyFrom(const ReqCreateRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateRole::IsInitialized() const {
  return true;
}

void ReqCreateRole::Swap(ReqCreateRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreateRole::InternalSwap(ReqCreateRole* other) {
  using std::swap;
  account_.Swap(&other->account_);
  noob_name_.Swap(&other->noob_name_);
  swap(career_, other->career_);
  swap(sex_, other->sex_);
  swap(race_, other->race_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreateRole::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqDeleteRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqDeleteRole::kAccountFieldNumber;
const int ReqDeleteRole::kNameFieldNumber;
const int ReqDeleteRole::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqDeleteRole::ReqDeleteRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqDeleteRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqDeleteRole)
}
ReqDeleteRole::ReqDeleteRole(const ReqDeleteRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqDeleteRole)
}

void ReqDeleteRole::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _cached_size_ = 0;
}

ReqDeleteRole::~ReqDeleteRole() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqDeleteRole)
  SharedDtor();
}

void ReqDeleteRole::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqDeleteRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeleteRole::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqDeleteRole& ReqDeleteRole::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqDeleteRole();
  return *internal_default_instance();
}


void ReqDeleteRole::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqDeleteRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqDeleteRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqDeleteRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqDeleteRole.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqDeleteRole.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqDeleteRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqDeleteRole)
  return false;
#undef DO_
}

void ReqDeleteRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqDeleteRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqDeleteRole.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqDeleteRole.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqDeleteRole)
}

::google::protobuf::uint8* ReqDeleteRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqDeleteRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqDeleteRole.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqDeleteRole.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqDeleteRole)
  return target;
}

size_t ReqDeleteRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqDeleteRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeleteRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqDeleteRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqDeleteRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqDeleteRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqDeleteRole)
    MergeFrom(*source);
  }
}

void ReqDeleteRole::MergeFrom(const ReqDeleteRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqDeleteRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqDeleteRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqDeleteRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteRole::CopyFrom(const ReqDeleteRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqDeleteRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteRole::IsInitialized() const {
  return true;
}

void ReqDeleteRole::Swap(ReqDeleteRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqDeleteRole::InternalSwap(ReqDeleteRole* other) {
  using std::swap;
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqDeleteRole::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqRecoverRole::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRecoverRole::kAccountFieldNumber;
const int ReqRecoverRole::kNameFieldNumber;
const int ReqRecoverRole::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRecoverRole::ReqRecoverRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRecoverRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqRecoverRole)
}
ReqRecoverRole::ReqRecoverRole(const ReqRecoverRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqRecoverRole)
}

void ReqRecoverRole::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _cached_size_ = 0;
}

ReqRecoverRole::~ReqRecoverRole() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqRecoverRole)
  SharedDtor();
}

void ReqRecoverRole::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRecoverRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecoverRole::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqRecoverRole& ReqRecoverRole::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRecoverRole();
  return *internal_default_instance();
}


void ReqRecoverRole::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqRecoverRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqRecoverRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqRecoverRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqRecoverRole.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqRecoverRole.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqRecoverRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqRecoverRole)
  return false;
#undef DO_
}

void ReqRecoverRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqRecoverRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRecoverRole.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRecoverRole.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqRecoverRole)
}

::google::protobuf::uint8* ReqRecoverRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqRecoverRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRecoverRole.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqRecoverRole.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqRecoverRole)
  return target;
}

size_t ReqRecoverRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqRecoverRole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecoverRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqRecoverRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRecoverRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRecoverRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqRecoverRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqRecoverRole)
    MergeFrom(*source);
  }
}

void ReqRecoverRole::MergeFrom(const ReqRecoverRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqRecoverRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqRecoverRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqRecoverRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecoverRole::CopyFrom(const ReqRecoverRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqRecoverRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecoverRole::IsInitialized() const {
  return true;
}

void ReqRecoverRole::Swap(ReqRecoverRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRecoverRole::InternalSwap(ReqRecoverRole* other) {
  using std::swap;
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRecoverRole::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerHeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerHeartBeat::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerHeartBeat::ServerHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerHeartBeat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ServerHeartBeat)
}
ServerHeartBeat::ServerHeartBeat(const ServerHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ServerHeartBeat)
}

void ServerHeartBeat::SharedCtor() {
  count_ = 0;
  _cached_size_ = 0;
}

ServerHeartBeat::~ServerHeartBeat() {
  // @@protoc_insertion_point(destructor:AFMsg.ServerHeartBeat)
  SharedDtor();
}

void ServerHeartBeat::SharedDtor() {
}

void ServerHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerHeartBeat::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerHeartBeat& ServerHeartBeat::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerHeartBeat();
  return *internal_default_instance();
}


void ServerHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ServerHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

bool ServerHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ServerHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ServerHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ServerHeartBeat)
  return false;
#undef DO_
}

void ServerHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ServerHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ServerHeartBeat)
}

::google::protobuf::uint8* ServerHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ServerHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ServerHeartBeat)
  return target;
}

size_t ServerHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ServerHeartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ServerHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ServerHeartBeat)
    MergeFrom(*source);
  }
}

void ServerHeartBeat::MergeFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ServerHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHeartBeat::CopyFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHeartBeat::IsInitialized() const {
  return true;
}

void ServerHeartBeat::Swap(ServerHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerHeartBeat::InternalSwap(ServerHeartBeat* other) {
  using std::swap;
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerHeartBeat::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleOnlineNotify::InitAsDefaultInstance() {
  ::AFMsg::_RoleOnlineNotify_default_instance_._instance.get_mutable()->guild_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void RoleOnlineNotify::clear_guild() {
  if (GetArenaNoVirtual() == NULL && guild_ != NULL) {
    delete guild_;
  }
  guild_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleOnlineNotify::kGuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleOnlineNotify::RoleOnlineNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOnlineNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.RoleOnlineNotify)
}
RoleOnlineNotify::RoleOnlineNotify(const RoleOnlineNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild()) {
    guild_ = new ::AFMsg::Ident(*from.guild_);
  } else {
    guild_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.RoleOnlineNotify)
}

void RoleOnlineNotify::SharedCtor() {
  guild_ = NULL;
  _cached_size_ = 0;
}

RoleOnlineNotify::~RoleOnlineNotify() {
  // @@protoc_insertion_point(destructor:AFMsg.RoleOnlineNotify)
  SharedDtor();
}

void RoleOnlineNotify::SharedDtor() {
  if (this != internal_default_instance()) delete guild_;
}

void RoleOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleOnlineNotify::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleOnlineNotify& RoleOnlineNotify::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOnlineNotify();
  return *internal_default_instance();
}


void RoleOnlineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.RoleOnlineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && guild_ != NULL) {
    delete guild_;
  }
  guild_ = NULL;
  _internal_metadata_.Clear();
}

bool RoleOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.RoleOnlineNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.RoleOnlineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.RoleOnlineNotify)
  return false;
#undef DO_
}

void RoleOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.RoleOnlineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.RoleOnlineNotify)
}

::google::protobuf::uint8* RoleOnlineNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.RoleOnlineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.RoleOnlineNotify)
  return target;
}

size_t RoleOnlineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.RoleOnlineNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.RoleOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleOnlineNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleOnlineNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.RoleOnlineNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.RoleOnlineNotify)
    MergeFrom(*source);
  }
}

void RoleOnlineNotify::MergeFrom(const RoleOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.RoleOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild()) {
    mutable_guild()->::AFMsg::Ident::MergeFrom(from.guild());
  }
}

void RoleOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.RoleOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOnlineNotify::CopyFrom(const RoleOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.RoleOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOnlineNotify::IsInitialized() const {
  return true;
}

void RoleOnlineNotify::Swap(RoleOnlineNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleOnlineNotify::InternalSwap(RoleOnlineNotify* other) {
  using std::swap;
  swap(guild_, other->guild_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleOnlineNotify::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoleOfflineNotify::InitAsDefaultInstance() {
  ::AFMsg::_RoleOfflineNotify_default_instance_._instance.get_mutable()->guild_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void RoleOfflineNotify::clear_guild() {
  if (GetArenaNoVirtual() == NULL && guild_ != NULL) {
    delete guild_;
  }
  guild_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleOfflineNotify::kGuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleOfflineNotify::RoleOfflineNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOfflineNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.RoleOfflineNotify)
}
RoleOfflineNotify::RoleOfflineNotify(const RoleOfflineNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild()) {
    guild_ = new ::AFMsg::Ident(*from.guild_);
  } else {
    guild_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.RoleOfflineNotify)
}

void RoleOfflineNotify::SharedCtor() {
  guild_ = NULL;
  _cached_size_ = 0;
}

RoleOfflineNotify::~RoleOfflineNotify() {
  // @@protoc_insertion_point(destructor:AFMsg.RoleOfflineNotify)
  SharedDtor();
}

void RoleOfflineNotify::SharedDtor() {
  if (this != internal_default_instance()) delete guild_;
}

void RoleOfflineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleOfflineNotify::descriptor() {
  ::protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleOfflineNotify& RoleOfflineNotify::default_instance() {
  ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOfflineNotify();
  return *internal_default_instance();
}


void RoleOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.RoleOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && guild_ != NULL) {
    delete guild_;
  }
  guild_ = NULL;
  _internal_metadata_.Clear();
}

bool RoleOfflineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.RoleOfflineNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.RoleOfflineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.RoleOfflineNotify)
  return false;
#undef DO_
}

void RoleOfflineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.RoleOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.RoleOfflineNotify)
}

::google::protobuf::uint8* RoleOfflineNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.RoleOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.RoleOfflineNotify)
  return target;
}

size_t RoleOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.RoleOfflineNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident guild = 1;
  if (this->has_guild()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleOfflineNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.RoleOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleOfflineNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleOfflineNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.RoleOfflineNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.RoleOfflineNotify)
    MergeFrom(*source);
  }
}

void RoleOfflineNotify::MergeFrom(const RoleOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.RoleOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild()) {
    mutable_guild()->::AFMsg::Ident::MergeFrom(from.guild());
  }
}

void RoleOfflineNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.RoleOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOfflineNotify::CopyFrom(const RoleOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.RoleOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOfflineNotify::IsInitialized() const {
  return true;
}

void RoleOfflineNotify::Swap(RoleOfflineNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleOfflineNotify::InternalSwap(RoleOfflineNotify* other) {
  using std::swap;
  swap(guild_, other->guild_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleOfflineNotify::GetMetadata() const {
  protobuf_AFMsgPreGame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgPreGame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ServerInfoReport* Arena::Create< ::AFMsg::ServerInfoReport >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ServerInfoReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ServerInfoReportList* Arena::Create< ::AFMsg::ServerInfoReportList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ServerInfoReportList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckEventResult* Arena::Create< ::AFMsg::AckEventResult >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckEventResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAccountLogin* Arena::Create< ::AFMsg::ReqAccountLogin >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAccountLogin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAccountLogout* Arena::Create< ::AFMsg::ReqAccountLogout >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAccountLogout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ServerInfo* Arena::Create< ::AFMsg::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ServerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqServerList* Arena::Create< ::AFMsg::ReqServerList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqServerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckServerList* Arena::Create< ::AFMsg::AckServerList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckServerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqConnectWorld* Arena::Create< ::AFMsg::ReqConnectWorld >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqConnectWorld >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckConnectWorldResult* Arena::Create< ::AFMsg::AckConnectWorldResult >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckConnectWorldResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSelectServer* Arena::Create< ::AFMsg::ReqSelectServer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSelectServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqKickFromWorld* Arena::Create< ::AFMsg::ReqKickFromWorld >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqKickFromWorld >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqRoleList* Arena::Create< ::AFMsg::ReqRoleList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqRoleList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::RoleLiteInfo* Arena::Create< ::AFMsg::RoleLiteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::RoleLiteInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckRoleLiteInfoList* Arena::Create< ::AFMsg::AckRoleLiteInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckRoleLiteInfoList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqCreateRole* Arena::Create< ::AFMsg::ReqCreateRole >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqCreateRole >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqDeleteRole* Arena::Create< ::AFMsg::ReqDeleteRole >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqDeleteRole >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqRecoverRole* Arena::Create< ::AFMsg::ReqRecoverRole >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqRecoverRole >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ServerHeartBeat* Arena::Create< ::AFMsg::ServerHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ServerHeartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::RoleOnlineNotify* Arena::Create< ::AFMsg::RoleOnlineNotify >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::RoleOnlineNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::RoleOfflineNotify* Arena::Create< ::AFMsg::RoleOfflineNotify >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::RoleOfflineNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
