// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgShare.proto

#ifndef PROTOBUF_AFMsgShare_2eproto_INCLUDED
#define PROTOBUF_AFMsgShare_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AFDefine.pb.h"
#include "AFMsgBase.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_AFMsgShare_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[91];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
void LIBPROTOC_EXPORT InitDefaultsReqEnterGameServerImpl();
void LIBPROTOC_EXPORT InitDefaultsReqEnterGameServer();
void LIBPROTOC_EXPORT InitDefaultsReqHeartBeatImpl();
void LIBPROTOC_EXPORT InitDefaultsReqHeartBeat();
void LIBPROTOC_EXPORT InitDefaultsReqLeaveGameServerImpl();
void LIBPROTOC_EXPORT InitDefaultsReqLeaveGameServer();
void LIBPROTOC_EXPORT InitDefaultsPlayerEntryInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsPlayerEntryInfo();
void LIBPROTOC_EXPORT InitDefaultsAckPlayerEntryListImpl();
void LIBPROTOC_EXPORT InitDefaultsAckPlayerEntryList();
void LIBPROTOC_EXPORT InitDefaultsAckPlayerLeaveListImpl();
void LIBPROTOC_EXPORT InitDefaultsAckPlayerLeaveList();
void LIBPROTOC_EXPORT InitDefaultsReqAckSynDataImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckSynData();
void LIBPROTOC_EXPORT InitDefaultsReqAckPlayerMoveImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckPlayerMove();
void LIBPROTOC_EXPORT InitDefaultsChatContainerImpl();
void LIBPROTOC_EXPORT InitDefaultsChatContainer();
void LIBPROTOC_EXPORT InitDefaultsReqAckPlayerChatImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckPlayerChat();
void LIBPROTOC_EXPORT InitDefaultsEffectDataImpl();
void LIBPROTOC_EXPORT InitDefaultsEffectData();
void LIBPROTOC_EXPORT InitDefaultsReqAckUseSkillImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckUseSkill();
void LIBPROTOC_EXPORT InitDefaultsReqAckUseItemImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckUseItem();
void LIBPROTOC_EXPORT InitDefaultsReqAckSwapSceneImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckSwapScene();
void LIBPROTOC_EXPORT InitDefaultsItemStructImpl();
void LIBPROTOC_EXPORT InitDefaultsItemStruct();
void LIBPROTOC_EXPORT InitDefaultsCurrencyStructImpl();
void LIBPROTOC_EXPORT InitDefaultsCurrencyStruct();
void LIBPROTOC_EXPORT InitDefaultsReqAckEndBattleImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckEndBattle();
void LIBPROTOC_EXPORT InitDefaultsReqPickDropItemImpl();
void LIBPROTOC_EXPORT InitDefaultsReqPickDropItem();
void LIBPROTOC_EXPORT InitDefaultsReqAcceptTaskImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAcceptTask();
void LIBPROTOC_EXPORT InitDefaultsReqCompeleteTaskImpl();
void LIBPROTOC_EXPORT InitDefaultsReqCompeleteTask();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinActivityImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinActivity();
void LIBPROTOC_EXPORT InitDefaultsReqAckSearchOppnentImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckSearchOppnent();
void LIBPROTOC_EXPORT InitDefaultsReqAckBattleOppnentImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckBattleOppnent();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateGuild();
void LIBPROTOC_EXPORT InitDefaultsReqSearchGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSearchGuild();
void LIBPROTOC_EXPORT InitDefaultsAckSearchGuild_SearchGuildObjectImpl();
void LIBPROTOC_EXPORT InitDefaultsAckSearchGuild_SearchGuildObject();
void LIBPROTOC_EXPORT InitDefaultsAckSearchGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsAckSearchGuild();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinGuild();
void LIBPROTOC_EXPORT InitDefaultsReqAckLeaveGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckLeaveGuild();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprGuildMemberImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprGuildMember();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprGuildImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprGuild();
void LIBPROTOC_EXPORT InitDefaultsReqAckDonateGuildItemImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckDonateGuildItem();
void LIBPROTOC_EXPORT InitDefaultsReqGuildEctypeInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsReqGuildEctypeInfo();
void LIBPROTOC_EXPORT InitDefaultsGuildEctypeInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsGuildEctypeInfo();
void LIBPROTOC_EXPORT InitDefaultsAckGuildEctypeInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsAckGuildEctypeInfo();
void LIBPROTOC_EXPORT InitDefaultsSetGuildEctypeInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsSetGuildEctypeInfo();
void LIBPROTOC_EXPORT InitDefaultsReqEnterGuildEctypeImpl();
void LIBPROTOC_EXPORT InitDefaultsReqEnterGuildEctype();
void LIBPROTOC_EXPORT InitDefaultsChatInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsChatInfo();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateChatGroupImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateChatGroup();
void LIBPROTOC_EXPORT InitDefaultsReqAckjoinChatGroupImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckjoinChatGroup();
void LIBPROTOC_EXPORT InitDefaultsReqAckQuitChatGroupImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckQuitChatGroup();
void LIBPROTOC_EXPORT InitDefaultsReqSubscriptionChatGroupImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSubscriptionChatGroup();
void LIBPROTOC_EXPORT InitDefaultsReqCancelSubscriptionChatGroupImpl();
void LIBPROTOC_EXPORT InitDefaultsReqCancelSubscriptionChatGroup();
void LIBPROTOC_EXPORT InitDefaultsReqIntensifylevelToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsReqIntensifylevelToEquip();
void LIBPROTOC_EXPORT InitDefaultsAckIntensifylevelToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsAckIntensifylevelToEquip();
void LIBPROTOC_EXPORT InitDefaultsReqHoleToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsReqHoleToEquip();
void LIBPROTOC_EXPORT InitDefaultsAckHoleToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsAckHoleToEquip();
void LIBPROTOC_EXPORT InitDefaultsReqInlaystoneToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsReqInlaystoneToEquip();
void LIBPROTOC_EXPORT InitDefaultsAckInlaystoneToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsAckInlaystoneToEquip();
void LIBPROTOC_EXPORT InitDefaultsReqElementlevelToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsReqElementlevelToEquip();
void LIBPROTOC_EXPORT InitDefaultsAckElementlevelToEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsAckElementlevelToEquip();
void LIBPROTOC_EXPORT InitDefaultsReqSetFightHeroImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSetFightHero();
void LIBPROTOC_EXPORT InitDefaultsReqWearEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsReqWearEquip();
void LIBPROTOC_EXPORT InitDefaultsTakeOffEquipImpl();
void LIBPROTOC_EXPORT InitDefaultsTakeOffEquip();
void LIBPROTOC_EXPORT InitDefaultsReqMiningTitleImpl();
void LIBPROTOC_EXPORT InitDefaultsReqMiningTitle();
void LIBPROTOC_EXPORT InitDefaultsReqSendMailImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSendMail();
void LIBPROTOC_EXPORT InitDefaultsReqSwitchServerImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSwitchServer();
void LIBPROTOC_EXPORT InitDefaultsAckSwitchServerImpl();
void LIBPROTOC_EXPORT InitDefaultsAckSwitchServer();
void LIBPROTOC_EXPORT InitDefaultsTeamInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsTeamInfo();
void LIBPROTOC_EXPORT InitDefaultsTeammemberInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsTeammemberInfo();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateTeamImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckCreateTeam();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinTeamImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckJoinTeam();
void LIBPROTOC_EXPORT InitDefaultsReqAckLeaveTeamImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckLeaveTeam();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprTeamMemberImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckOprTeamMember();
void LIBPROTOC_EXPORT InitDefaultsReqAckInviteTeamImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAckInviteTeam();
void LIBPROTOC_EXPORT InitDefaultsReqTeamEnterEctypeImpl();
void LIBPROTOC_EXPORT InitDefaultsReqTeamEnterEctype();
void LIBPROTOC_EXPORT InitDefaultsAckTeamEnterEctypeImpl();
void LIBPROTOC_EXPORT InitDefaultsAckTeamEnterEctype();
void LIBPROTOC_EXPORT InitDefaultsGridGuildBaseInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsGridGuildBaseInfo();
void LIBPROTOC_EXPORT InitDefaultsReqBigMapGridInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsReqBigMapGridInfo();
void LIBPROTOC_EXPORT InitDefaultsBigMapGridBaseInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsBigMapGridBaseInfo();
void LIBPROTOC_EXPORT InitDefaultsBigMapLeaveMsgImpl();
void LIBPROTOC_EXPORT InitDefaultsBigMapLeaveMsg();
void LIBPROTOC_EXPORT InitDefaultsBigMapWarHistoryImpl();
void LIBPROTOC_EXPORT InitDefaultsBigMapWarHistory();
void LIBPROTOC_EXPORT InitDefaultsBigMapGridDetailInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsBigMapGridDetailInfo();
void LIBPROTOC_EXPORT InitDefaultsAckBigMapGridInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsAckBigMapGridInfo();
void LIBPROTOC_EXPORT InitDefaultsReqBigMapInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsReqBigMapInfo();
void LIBPROTOC_EXPORT InitDefaultsAckBigMapInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsAckBigMapInfo();
void LIBPROTOC_EXPORT InitDefaultsReqHoldMapGridImpl();
void LIBPROTOC_EXPORT InitDefaultsReqHoldMapGrid();
void LIBPROTOC_EXPORT InitDefaultsAckHoldMapGridImpl();
void LIBPROTOC_EXPORT InitDefaultsAckHoldMapGrid();
void LIBPROTOC_EXPORT InitDefaultsReqLeaveMapMsgImpl();
void LIBPROTOC_EXPORT InitDefaultsReqLeaveMapMsg();
void LIBPROTOC_EXPORT InitDefaultsAckLeaveMapMsgImpl();
void LIBPROTOC_EXPORT InitDefaultsAckLeaveMapMsg();
void LIBPROTOC_EXPORT InitDefaultsReqGetMapAwardImpl();
void LIBPROTOC_EXPORT InitDefaultsReqGetMapAward();
void LIBPROTOC_EXPORT InitDefaultsAckGetMapAwardImpl();
void LIBPROTOC_EXPORT InitDefaultsAckGetMapAward();
void LIBPROTOC_EXPORT InitDefaultsReqMapHuntingImpl();
void LIBPROTOC_EXPORT InitDefaultsReqMapHunting();
void LIBPROTOC_EXPORT InitDefaultsAckMapHuntingImpl();
void LIBPROTOC_EXPORT InitDefaultsAckMapHunting();
void LIBPROTOC_EXPORT InitDefaultsReqMapKingWarImpl();
void LIBPROTOC_EXPORT InitDefaultsReqMapKingWar();
void LIBPROTOC_EXPORT InitDefaultsAckMapKingWarImpl();
void LIBPROTOC_EXPORT InitDefaultsAckMapKingWar();
void LIBPROTOC_EXPORT InitDefaultsPVPRoomInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsPVPRoomInfo();
void LIBPROTOC_EXPORT InitDefaultsReqPVPApplyMatchImpl();
void LIBPROTOC_EXPORT InitDefaultsReqPVPApplyMatch();
void LIBPROTOC_EXPORT InitDefaultsAckPVPApplyMatchImpl();
void LIBPROTOC_EXPORT InitDefaultsAckPVPApplyMatch();
void LIBPROTOC_EXPORT InitDefaultsReqCreatePVPEctypeImpl();
void LIBPROTOC_EXPORT InitDefaultsReqCreatePVPEctype();
void LIBPROTOC_EXPORT InitDefaultsAckCreatePVPEctypeImpl();
void LIBPROTOC_EXPORT InitDefaultsAckCreatePVPEctype();
inline void LIBPROTOC_EXPORT InitDefaults() {
  InitDefaultsReqEnterGameServer();
  InitDefaultsReqHeartBeat();
  InitDefaultsReqLeaveGameServer();
  InitDefaultsPlayerEntryInfo();
  InitDefaultsAckPlayerEntryList();
  InitDefaultsAckPlayerLeaveList();
  InitDefaultsReqAckSynData();
  InitDefaultsReqAckPlayerMove();
  InitDefaultsChatContainer();
  InitDefaultsReqAckPlayerChat();
  InitDefaultsEffectData();
  InitDefaultsReqAckUseSkill();
  InitDefaultsReqAckUseItem();
  InitDefaultsReqAckSwapScene();
  InitDefaultsItemStruct();
  InitDefaultsCurrencyStruct();
  InitDefaultsReqAckEndBattle();
  InitDefaultsReqPickDropItem();
  InitDefaultsReqAcceptTask();
  InitDefaultsReqCompeleteTask();
  InitDefaultsReqAckJoinActivity();
  InitDefaultsReqAckSearchOppnent();
  InitDefaultsReqAckBattleOppnent();
  InitDefaultsReqAckCreateGuild();
  InitDefaultsReqSearchGuild();
  InitDefaultsAckSearchGuild_SearchGuildObject();
  InitDefaultsAckSearchGuild();
  InitDefaultsReqAckJoinGuild();
  InitDefaultsReqAckLeaveGuild();
  InitDefaultsReqAckOprGuildMember();
  InitDefaultsReqAckOprGuild();
  InitDefaultsReqAckDonateGuildItem();
  InitDefaultsReqGuildEctypeInfo();
  InitDefaultsGuildEctypeInfo();
  InitDefaultsAckGuildEctypeInfo();
  InitDefaultsSetGuildEctypeInfo();
  InitDefaultsReqEnterGuildEctype();
  InitDefaultsChatInfo();
  InitDefaultsReqAckCreateChatGroup();
  InitDefaultsReqAckjoinChatGroup();
  InitDefaultsReqAckQuitChatGroup();
  InitDefaultsReqSubscriptionChatGroup();
  InitDefaultsReqCancelSubscriptionChatGroup();
  InitDefaultsReqIntensifylevelToEquip();
  InitDefaultsAckIntensifylevelToEquip();
  InitDefaultsReqHoleToEquip();
  InitDefaultsAckHoleToEquip();
  InitDefaultsReqInlaystoneToEquip();
  InitDefaultsAckInlaystoneToEquip();
  InitDefaultsReqElementlevelToEquip();
  InitDefaultsAckElementlevelToEquip();
  InitDefaultsReqSetFightHero();
  InitDefaultsReqWearEquip();
  InitDefaultsTakeOffEquip();
  InitDefaultsReqMiningTitle();
  InitDefaultsReqSendMail();
  InitDefaultsReqSwitchServer();
  InitDefaultsAckSwitchServer();
  InitDefaultsTeamInfo();
  InitDefaultsTeammemberInfo();
  InitDefaultsReqAckCreateTeam();
  InitDefaultsReqAckJoinTeam();
  InitDefaultsReqAckLeaveTeam();
  InitDefaultsReqAckOprTeamMember();
  InitDefaultsReqAckInviteTeam();
  InitDefaultsReqTeamEnterEctype();
  InitDefaultsAckTeamEnterEctype();
  InitDefaultsGridGuildBaseInfo();
  InitDefaultsReqBigMapGridInfo();
  InitDefaultsBigMapGridBaseInfo();
  InitDefaultsBigMapLeaveMsg();
  InitDefaultsBigMapWarHistory();
  InitDefaultsBigMapGridDetailInfo();
  InitDefaultsAckBigMapGridInfo();
  InitDefaultsReqBigMapInfo();
  InitDefaultsAckBigMapInfo();
  InitDefaultsReqHoldMapGrid();
  InitDefaultsAckHoldMapGrid();
  InitDefaultsReqLeaveMapMsg();
  InitDefaultsAckLeaveMapMsg();
  InitDefaultsReqGetMapAward();
  InitDefaultsAckGetMapAward();
  InitDefaultsReqMapHunting();
  InitDefaultsAckMapHunting();
  InitDefaultsReqMapKingWar();
  InitDefaultsAckMapKingWar();
  InitDefaultsPVPRoomInfo();
  InitDefaultsReqPVPApplyMatch();
  InitDefaultsAckPVPApplyMatch();
  InitDefaultsReqCreatePVPEctype();
  InitDefaultsAckCreatePVPEctype();
}
}  // namespace protobuf_AFMsgShare_2eproto
namespace AFMsg {
class AckBigMapGridInfo;
class AckBigMapGridInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckBigMapGridInfoDefaultTypeInternal _AckBigMapGridInfo_default_instance_;
class AckBigMapInfo;
class AckBigMapInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckBigMapInfoDefaultTypeInternal _AckBigMapInfo_default_instance_;
class AckCreatePVPEctype;
class AckCreatePVPEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckCreatePVPEctypeDefaultTypeInternal _AckCreatePVPEctype_default_instance_;
class AckElementlevelToEquip;
class AckElementlevelToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckElementlevelToEquipDefaultTypeInternal _AckElementlevelToEquip_default_instance_;
class AckGetMapAward;
class AckGetMapAwardDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckGetMapAwardDefaultTypeInternal _AckGetMapAward_default_instance_;
class AckGuildEctypeInfo;
class AckGuildEctypeInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckGuildEctypeInfoDefaultTypeInternal _AckGuildEctypeInfo_default_instance_;
class AckHoldMapGrid;
class AckHoldMapGridDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckHoldMapGridDefaultTypeInternal _AckHoldMapGrid_default_instance_;
class AckHoleToEquip;
class AckHoleToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckHoleToEquipDefaultTypeInternal _AckHoleToEquip_default_instance_;
class AckInlaystoneToEquip;
class AckInlaystoneToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckInlaystoneToEquipDefaultTypeInternal _AckInlaystoneToEquip_default_instance_;
class AckIntensifylevelToEquip;
class AckIntensifylevelToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckIntensifylevelToEquipDefaultTypeInternal _AckIntensifylevelToEquip_default_instance_;
class AckLeaveMapMsg;
class AckLeaveMapMsgDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckLeaveMapMsgDefaultTypeInternal _AckLeaveMapMsg_default_instance_;
class AckMapHunting;
class AckMapHuntingDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckMapHuntingDefaultTypeInternal _AckMapHunting_default_instance_;
class AckMapKingWar;
class AckMapKingWarDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckMapKingWarDefaultTypeInternal _AckMapKingWar_default_instance_;
class AckPVPApplyMatch;
class AckPVPApplyMatchDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckPVPApplyMatchDefaultTypeInternal _AckPVPApplyMatch_default_instance_;
class AckPlayerEntryList;
class AckPlayerEntryListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
class AckPlayerLeaveListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class AckSearchGuild;
class AckSearchGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSearchGuildDefaultTypeInternal _AckSearchGuild_default_instance_;
class AckSearchGuild_SearchGuildObject;
class AckSearchGuild_SearchGuildObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSearchGuild_SearchGuildObjectDefaultTypeInternal _AckSearchGuild_SearchGuildObject_default_instance_;
class AckSwitchServer;
class AckSwitchServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSwitchServerDefaultTypeInternal _AckSwitchServer_default_instance_;
class AckTeamEnterEctype;
class AckTeamEnterEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckTeamEnterEctypeDefaultTypeInternal _AckTeamEnterEctype_default_instance_;
class BigMapGridBaseInfo;
class BigMapGridBaseInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern BigMapGridBaseInfoDefaultTypeInternal _BigMapGridBaseInfo_default_instance_;
class BigMapGridDetailInfo;
class BigMapGridDetailInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern BigMapGridDetailInfoDefaultTypeInternal _BigMapGridDetailInfo_default_instance_;
class BigMapLeaveMsg;
class BigMapLeaveMsgDefaultTypeInternal;
LIBPROTOC_EXPORT extern BigMapLeaveMsgDefaultTypeInternal _BigMapLeaveMsg_default_instance_;
class BigMapWarHistory;
class BigMapWarHistoryDefaultTypeInternal;
LIBPROTOC_EXPORT extern BigMapWarHistoryDefaultTypeInternal _BigMapWarHistory_default_instance_;
class ChatContainer;
class ChatContainerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatContainerDefaultTypeInternal _ChatContainer_default_instance_;
class ChatInfo;
class ChatInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ChatInfoDefaultTypeInternal _ChatInfo_default_instance_;
class CurrencyStruct;
class CurrencyStructDefaultTypeInternal;
LIBPROTOC_EXPORT extern CurrencyStructDefaultTypeInternal _CurrencyStruct_default_instance_;
class EffectData;
class EffectDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern EffectDataDefaultTypeInternal _EffectData_default_instance_;
class GridGuildBaseInfo;
class GridGuildBaseInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern GridGuildBaseInfoDefaultTypeInternal _GridGuildBaseInfo_default_instance_;
class GuildEctypeInfo;
class GuildEctypeInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern GuildEctypeInfoDefaultTypeInternal _GuildEctypeInfo_default_instance_;
class ItemStruct;
class ItemStructDefaultTypeInternal;
LIBPROTOC_EXPORT extern ItemStructDefaultTypeInternal _ItemStruct_default_instance_;
class PVPRoomInfo;
class PVPRoomInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern PVPRoomInfoDefaultTypeInternal _PVPRoomInfo_default_instance_;
class PlayerEntryInfo;
class PlayerEntryInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class ReqAcceptTask;
class ReqAcceptTaskDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAcceptTaskDefaultTypeInternal _ReqAcceptTask_default_instance_;
class ReqAckBattleOppnent;
class ReqAckBattleOppnentDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckBattleOppnentDefaultTypeInternal _ReqAckBattleOppnent_default_instance_;
class ReqAckCreateChatGroup;
class ReqAckCreateChatGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCreateChatGroupDefaultTypeInternal _ReqAckCreateChatGroup_default_instance_;
class ReqAckCreateGuild;
class ReqAckCreateGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCreateGuildDefaultTypeInternal _ReqAckCreateGuild_default_instance_;
class ReqAckCreateTeam;
class ReqAckCreateTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCreateTeamDefaultTypeInternal _ReqAckCreateTeam_default_instance_;
class ReqAckDonateGuildItem;
class ReqAckDonateGuildItemDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckDonateGuildItemDefaultTypeInternal _ReqAckDonateGuildItem_default_instance_;
class ReqAckEndBattle;
class ReqAckEndBattleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckEndBattleDefaultTypeInternal _ReqAckEndBattle_default_instance_;
class ReqAckInviteTeam;
class ReqAckInviteTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckInviteTeamDefaultTypeInternal _ReqAckInviteTeam_default_instance_;
class ReqAckJoinActivity;
class ReqAckJoinActivityDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckJoinActivityDefaultTypeInternal _ReqAckJoinActivity_default_instance_;
class ReqAckJoinGuild;
class ReqAckJoinGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckJoinGuildDefaultTypeInternal _ReqAckJoinGuild_default_instance_;
class ReqAckJoinTeam;
class ReqAckJoinTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckJoinTeamDefaultTypeInternal _ReqAckJoinTeam_default_instance_;
class ReqAckLeaveGuild;
class ReqAckLeaveGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckLeaveGuildDefaultTypeInternal _ReqAckLeaveGuild_default_instance_;
class ReqAckLeaveTeam;
class ReqAckLeaveTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckLeaveTeamDefaultTypeInternal _ReqAckLeaveTeam_default_instance_;
class ReqAckOprGuild;
class ReqAckOprGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckOprGuildDefaultTypeInternal _ReqAckOprGuild_default_instance_;
class ReqAckOprGuildMember;
class ReqAckOprGuildMemberDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckOprGuildMemberDefaultTypeInternal _ReqAckOprGuildMember_default_instance_;
class ReqAckOprTeamMember;
class ReqAckOprTeamMemberDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckOprTeamMemberDefaultTypeInternal _ReqAckOprTeamMember_default_instance_;
class ReqAckPlayerChat;
class ReqAckPlayerChatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerMove;
class ReqAckPlayerMoveDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerMoveDefaultTypeInternal _ReqAckPlayerMove_default_instance_;
class ReqAckQuitChatGroup;
class ReqAckQuitChatGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckQuitChatGroupDefaultTypeInternal _ReqAckQuitChatGroup_default_instance_;
class ReqAckSearchOppnent;
class ReqAckSearchOppnentDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSearchOppnentDefaultTypeInternal _ReqAckSearchOppnent_default_instance_;
class ReqAckSwapScene;
class ReqAckSwapSceneDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSwapSceneDefaultTypeInternal _ReqAckSwapScene_default_instance_;
class ReqAckSynData;
class ReqAckSynDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSynDataDefaultTypeInternal _ReqAckSynData_default_instance_;
class ReqAckUseItem;
class ReqAckUseItemDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckUseItemDefaultTypeInternal _ReqAckUseItem_default_instance_;
class ReqAckUseSkill;
class ReqAckUseSkillDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckUseSkillDefaultTypeInternal _ReqAckUseSkill_default_instance_;
class ReqAckjoinChatGroup;
class ReqAckjoinChatGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckjoinChatGroupDefaultTypeInternal _ReqAckjoinChatGroup_default_instance_;
class ReqBigMapGridInfo;
class ReqBigMapGridInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqBigMapGridInfoDefaultTypeInternal _ReqBigMapGridInfo_default_instance_;
class ReqBigMapInfo;
class ReqBigMapInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqBigMapInfoDefaultTypeInternal _ReqBigMapInfo_default_instance_;
class ReqCancelSubscriptionChatGroup;
class ReqCancelSubscriptionChatGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCancelSubscriptionChatGroupDefaultTypeInternal _ReqCancelSubscriptionChatGroup_default_instance_;
class ReqCompeleteTask;
class ReqCompeleteTaskDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCompeleteTaskDefaultTypeInternal _ReqCompeleteTask_default_instance_;
class ReqCreatePVPEctype;
class ReqCreatePVPEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCreatePVPEctypeDefaultTypeInternal _ReqCreatePVPEctype_default_instance_;
class ReqElementlevelToEquip;
class ReqElementlevelToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqElementlevelToEquipDefaultTypeInternal _ReqElementlevelToEquip_default_instance_;
class ReqEnterGameServer;
class ReqEnterGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEnterGameServerDefaultTypeInternal _ReqEnterGameServer_default_instance_;
class ReqEnterGuildEctype;
class ReqEnterGuildEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEnterGuildEctypeDefaultTypeInternal _ReqEnterGuildEctype_default_instance_;
class ReqGetMapAward;
class ReqGetMapAwardDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqGetMapAwardDefaultTypeInternal _ReqGetMapAward_default_instance_;
class ReqGuildEctypeInfo;
class ReqGuildEctypeInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqGuildEctypeInfoDefaultTypeInternal _ReqGuildEctypeInfo_default_instance_;
class ReqHeartBeat;
class ReqHeartBeatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqHeartBeatDefaultTypeInternal _ReqHeartBeat_default_instance_;
class ReqHoldMapGrid;
class ReqHoldMapGridDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqHoldMapGridDefaultTypeInternal _ReqHoldMapGrid_default_instance_;
class ReqHoleToEquip;
class ReqHoleToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqHoleToEquipDefaultTypeInternal _ReqHoleToEquip_default_instance_;
class ReqInlaystoneToEquip;
class ReqInlaystoneToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqInlaystoneToEquipDefaultTypeInternal _ReqInlaystoneToEquip_default_instance_;
class ReqIntensifylevelToEquip;
class ReqIntensifylevelToEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqIntensifylevelToEquipDefaultTypeInternal _ReqIntensifylevelToEquip_default_instance_;
class ReqLeaveGameServer;
class ReqLeaveGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
class ReqLeaveMapMsg;
class ReqLeaveMapMsgDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqLeaveMapMsgDefaultTypeInternal _ReqLeaveMapMsg_default_instance_;
class ReqMapHunting;
class ReqMapHuntingDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqMapHuntingDefaultTypeInternal _ReqMapHunting_default_instance_;
class ReqMapKingWar;
class ReqMapKingWarDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqMapKingWarDefaultTypeInternal _ReqMapKingWar_default_instance_;
class ReqMiningTitle;
class ReqMiningTitleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqMiningTitleDefaultTypeInternal _ReqMiningTitle_default_instance_;
class ReqPVPApplyMatch;
class ReqPVPApplyMatchDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqPVPApplyMatchDefaultTypeInternal _ReqPVPApplyMatch_default_instance_;
class ReqPickDropItem;
class ReqPickDropItemDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqPickDropItemDefaultTypeInternal _ReqPickDropItem_default_instance_;
class ReqSearchGuild;
class ReqSearchGuildDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSearchGuildDefaultTypeInternal _ReqSearchGuild_default_instance_;
class ReqSendMail;
class ReqSendMailDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSendMailDefaultTypeInternal _ReqSendMail_default_instance_;
class ReqSetFightHero;
class ReqSetFightHeroDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSetFightHeroDefaultTypeInternal _ReqSetFightHero_default_instance_;
class ReqSubscriptionChatGroup;
class ReqSubscriptionChatGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSubscriptionChatGroupDefaultTypeInternal _ReqSubscriptionChatGroup_default_instance_;
class ReqSwitchServer;
class ReqSwitchServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSwitchServerDefaultTypeInternal _ReqSwitchServer_default_instance_;
class ReqTeamEnterEctype;
class ReqTeamEnterEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqTeamEnterEctypeDefaultTypeInternal _ReqTeamEnterEctype_default_instance_;
class ReqWearEquip;
class ReqWearEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqWearEquipDefaultTypeInternal _ReqWearEquip_default_instance_;
class SetGuildEctypeInfo;
class SetGuildEctypeInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern SetGuildEctypeInfoDefaultTypeInternal _SetGuildEctypeInfo_default_instance_;
class TakeOffEquip;
class TakeOffEquipDefaultTypeInternal;
LIBPROTOC_EXPORT extern TakeOffEquipDefaultTypeInternal _TakeOffEquip_default_instance_;
class TeamInfo;
class TeamInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;
class TeammemberInfo;
class TeammemberInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern TeammemberInfoDefaultTypeInternal _TeammemberInfo_default_instance_;
}  // namespace AFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::AFMsg::AckBigMapGridInfo* Arena::Create< ::AFMsg::AckBigMapGridInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckBigMapInfo* Arena::Create< ::AFMsg::AckBigMapInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckCreatePVPEctype* Arena::Create< ::AFMsg::AckCreatePVPEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckElementlevelToEquip* Arena::Create< ::AFMsg::AckElementlevelToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckGetMapAward* Arena::Create< ::AFMsg::AckGetMapAward>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckGuildEctypeInfo* Arena::Create< ::AFMsg::AckGuildEctypeInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckHoldMapGrid* Arena::Create< ::AFMsg::AckHoldMapGrid>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckHoleToEquip* Arena::Create< ::AFMsg::AckHoleToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckInlaystoneToEquip* Arena::Create< ::AFMsg::AckInlaystoneToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckIntensifylevelToEquip* Arena::Create< ::AFMsg::AckIntensifylevelToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckLeaveMapMsg* Arena::Create< ::AFMsg::AckLeaveMapMsg>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckMapHunting* Arena::Create< ::AFMsg::AckMapHunting>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckMapKingWar* Arena::Create< ::AFMsg::AckMapKingWar>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckPVPApplyMatch* Arena::Create< ::AFMsg::AckPVPApplyMatch>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckPlayerEntryList* Arena::Create< ::AFMsg::AckPlayerEntryList>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckPlayerLeaveList* Arena::Create< ::AFMsg::AckPlayerLeaveList>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckSearchGuild* Arena::Create< ::AFMsg::AckSearchGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckSearchGuild_SearchGuildObject* Arena::Create< ::AFMsg::AckSearchGuild_SearchGuildObject>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckSwitchServer* Arena::Create< ::AFMsg::AckSwitchServer>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::AckTeamEnterEctype* Arena::Create< ::AFMsg::AckTeamEnterEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::BigMapGridBaseInfo* Arena::Create< ::AFMsg::BigMapGridBaseInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::BigMapGridDetailInfo* Arena::Create< ::AFMsg::BigMapGridDetailInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::BigMapLeaveMsg* Arena::Create< ::AFMsg::BigMapLeaveMsg>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::BigMapWarHistory* Arena::Create< ::AFMsg::BigMapWarHistory>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ChatContainer* Arena::Create< ::AFMsg::ChatContainer>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ChatInfo* Arena::Create< ::AFMsg::ChatInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::CurrencyStruct* Arena::Create< ::AFMsg::CurrencyStruct>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::EffectData* Arena::Create< ::AFMsg::EffectData>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::GridGuildBaseInfo* Arena::Create< ::AFMsg::GridGuildBaseInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::GuildEctypeInfo* Arena::Create< ::AFMsg::GuildEctypeInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ItemStruct* Arena::Create< ::AFMsg::ItemStruct>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::PVPRoomInfo* Arena::Create< ::AFMsg::PVPRoomInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::PlayerEntryInfo* Arena::Create< ::AFMsg::PlayerEntryInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAcceptTask* Arena::Create< ::AFMsg::ReqAcceptTask>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckBattleOppnent* Arena::Create< ::AFMsg::ReqAckBattleOppnent>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckCreateChatGroup* Arena::Create< ::AFMsg::ReqAckCreateChatGroup>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckCreateGuild* Arena::Create< ::AFMsg::ReqAckCreateGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckCreateTeam* Arena::Create< ::AFMsg::ReqAckCreateTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckDonateGuildItem* Arena::Create< ::AFMsg::ReqAckDonateGuildItem>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckEndBattle* Arena::Create< ::AFMsg::ReqAckEndBattle>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckInviteTeam* Arena::Create< ::AFMsg::ReqAckInviteTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckJoinActivity* Arena::Create< ::AFMsg::ReqAckJoinActivity>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckJoinGuild* Arena::Create< ::AFMsg::ReqAckJoinGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckJoinTeam* Arena::Create< ::AFMsg::ReqAckJoinTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckLeaveGuild* Arena::Create< ::AFMsg::ReqAckLeaveGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckLeaveTeam* Arena::Create< ::AFMsg::ReqAckLeaveTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckOprGuild* Arena::Create< ::AFMsg::ReqAckOprGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckOprGuildMember* Arena::Create< ::AFMsg::ReqAckOprGuildMember>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckOprTeamMember* Arena::Create< ::AFMsg::ReqAckOprTeamMember>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckPlayerChat* Arena::Create< ::AFMsg::ReqAckPlayerChat>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckPlayerMove* Arena::Create< ::AFMsg::ReqAckPlayerMove>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckQuitChatGroup* Arena::Create< ::AFMsg::ReqAckQuitChatGroup>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckSearchOppnent* Arena::Create< ::AFMsg::ReqAckSearchOppnent>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckSwapScene* Arena::Create< ::AFMsg::ReqAckSwapScene>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckSynData* Arena::Create< ::AFMsg::ReqAckSynData>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckUseItem* Arena::Create< ::AFMsg::ReqAckUseItem>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckUseSkill* Arena::Create< ::AFMsg::ReqAckUseSkill>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqAckjoinChatGroup* Arena::Create< ::AFMsg::ReqAckjoinChatGroup>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqBigMapGridInfo* Arena::Create< ::AFMsg::ReqBigMapGridInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqBigMapInfo* Arena::Create< ::AFMsg::ReqBigMapInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqCancelSubscriptionChatGroup* Arena::Create< ::AFMsg::ReqCancelSubscriptionChatGroup>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqCompeleteTask* Arena::Create< ::AFMsg::ReqCompeleteTask>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqCreatePVPEctype* Arena::Create< ::AFMsg::ReqCreatePVPEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqElementlevelToEquip* Arena::Create< ::AFMsg::ReqElementlevelToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqEnterGameServer* Arena::Create< ::AFMsg::ReqEnterGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqEnterGuildEctype* Arena::Create< ::AFMsg::ReqEnterGuildEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqGetMapAward* Arena::Create< ::AFMsg::ReqGetMapAward>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqGuildEctypeInfo* Arena::Create< ::AFMsg::ReqGuildEctypeInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqHeartBeat* Arena::Create< ::AFMsg::ReqHeartBeat>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqHoldMapGrid* Arena::Create< ::AFMsg::ReqHoldMapGrid>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqHoleToEquip* Arena::Create< ::AFMsg::ReqHoleToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqInlaystoneToEquip* Arena::Create< ::AFMsg::ReqInlaystoneToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqIntensifylevelToEquip* Arena::Create< ::AFMsg::ReqIntensifylevelToEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqLeaveGameServer* Arena::Create< ::AFMsg::ReqLeaveGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqLeaveMapMsg* Arena::Create< ::AFMsg::ReqLeaveMapMsg>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqMapHunting* Arena::Create< ::AFMsg::ReqMapHunting>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqMapKingWar* Arena::Create< ::AFMsg::ReqMapKingWar>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqMiningTitle* Arena::Create< ::AFMsg::ReqMiningTitle>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqPVPApplyMatch* Arena::Create< ::AFMsg::ReqPVPApplyMatch>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqPickDropItem* Arena::Create< ::AFMsg::ReqPickDropItem>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqSearchGuild* Arena::Create< ::AFMsg::ReqSearchGuild>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqSendMail* Arena::Create< ::AFMsg::ReqSendMail>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqSetFightHero* Arena::Create< ::AFMsg::ReqSetFightHero>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqSubscriptionChatGroup* Arena::Create< ::AFMsg::ReqSubscriptionChatGroup>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqSwitchServer* Arena::Create< ::AFMsg::ReqSwitchServer>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqTeamEnterEctype* Arena::Create< ::AFMsg::ReqTeamEnterEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::ReqWearEquip* Arena::Create< ::AFMsg::ReqWearEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::SetGuildEctypeInfo* Arena::Create< ::AFMsg::SetGuildEctypeInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::TakeOffEquip* Arena::Create< ::AFMsg::TakeOffEquip>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::TeamInfo* Arena::Create< ::AFMsg::TeamInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::AFMsg::TeammemberInfo* Arena::Create< ::AFMsg::TeammemberInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace AFMsg {

enum ReqAckSynData_SynType {
  ReqAckSynData_SynType_EST_NONE = 0,
  ReqAckSynData_SynType_EST_SCENE = 1,
  ReqAckSynData_SynType_EST_GROUP = 2,
  ReqAckSynData_SynType_EST_GUILD = 3,
  ReqAckSynData_SynType_EST_FRIEND = 4,
  ReqAckSynData_SynType_ReqAckSynData_SynType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckSynData_SynType_ReqAckSynData_SynType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckSynData_SynType_IsValid(int value);
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MIN = ReqAckSynData_SynType_EST_NONE;
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MAX = ReqAckSynData_SynType_EST_FRIEND;
const int ReqAckSynData_SynType_SynType_ARRAYSIZE = ReqAckSynData_SynType_SynType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor();
inline const ::std::string& ReqAckSynData_SynType_Name(ReqAckSynData_SynType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSynData_SynType_descriptor(), value);
}
inline bool ReqAckSynData_SynType_Parse(
    const ::std::string& name, ReqAckSynData_SynType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSynData_SynType>(
    ReqAckSynData_SynType_descriptor(), name, value);
}
enum ChatContainer_ContainerType {
  ChatContainer_ContainerType_EGCT_NONE = 0,
  ChatContainer_ContainerType_EGCT_ITEM = 1,
  ChatContainer_ContainerType_ChatContainer_ContainerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatContainer_ContainerType_ChatContainer_ContainerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ChatContainer_ContainerType_IsValid(int value);
const ChatContainer_ContainerType ChatContainer_ContainerType_ContainerType_MIN = ChatContainer_ContainerType_EGCT_NONE;
const ChatContainer_ContainerType ChatContainer_ContainerType_ContainerType_MAX = ChatContainer_ContainerType_EGCT_ITEM;
const int ChatContainer_ContainerType_ContainerType_ARRAYSIZE = ChatContainer_ContainerType_ContainerType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor();
inline const ::std::string& ChatContainer_ContainerType_Name(ChatContainer_ContainerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatContainer_ContainerType_descriptor(), value);
}
inline bool ChatContainer_ContainerType_Parse(
    const ::std::string& name, ChatContainer_ContainerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatContainer_ContainerType>(
    ChatContainer_ContainerType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType {
  ReqAckPlayerChat_EGameChatType_EGCT_GUILD = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_TEAM = 2,
  ReqAckPlayerChat_EGameChatType_EGCT_WORLD = 3,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
const int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
inline const ::std::string& ReqAckPlayerChat_EGameChatType_Name(ReqAckPlayerChat_EGameChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const ::std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum EffectData_EResultType {
  EffectData_EResultType_EET_SUCCESS = 0,
  EffectData_EResultType_EET_FAIL = 1,
  EffectData_EResultType_EET_REFUSE = 2,
  EffectData_EResultType_EffectData_EResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EffectData_EResultType_EffectData_EResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EffectData_EResultType_IsValid(int value);
const EffectData_EResultType EffectData_EResultType_EResultType_MIN = EffectData_EResultType_EET_SUCCESS;
const EffectData_EResultType EffectData_EResultType_EResultType_MAX = EffectData_EResultType_EET_REFUSE;
const int EffectData_EResultType_EResultType_ARRAYSIZE = EffectData_EResultType_EResultType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor();
inline const ::std::string& EffectData_EResultType_Name(EffectData_EResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectData_EResultType_descriptor(), value);
}
inline bool EffectData_EResultType_Parse(
    const ::std::string& name, EffectData_EResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectData_EResultType>(
    EffectData_EResultType_descriptor(), name, value);
}
enum ReqAckSwapScene_EGameSwapType {
  ReqAckSwapScene_EGameSwapType_EGST_NARMAL = 0,
  ReqAckSwapScene_EGameSwapType_EGST_CLONE = 1,
  ReqAckSwapScene_EGameSwapType_EGST_ARENA = 2,
  ReqAckSwapScene_EGameSwapType_EGST_MIRROR = 3,
  ReqAckSwapScene_EGameSwapType_ReqAckSwapScene_EGameSwapType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckSwapScene_EGameSwapType_ReqAckSwapScene_EGameSwapType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckSwapScene_EGameSwapType_IsValid(int value);
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
const int ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE = ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor();
inline const ::std::string& ReqAckSwapScene_EGameSwapType_Name(ReqAckSwapScene_EGameSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSwapScene_EGameSwapType_descriptor(), value);
}
inline bool ReqAckSwapScene_EGameSwapType_Parse(
    const ::std::string& name, ReqAckSwapScene_EGameSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSwapScene_EGameSwapType>(
    ReqAckSwapScene_EGameSwapType_descriptor(), name, value);
}
enum ReqAckJoinActivity_EGameActivityType {
  ReqAckJoinActivity_EGameActivityType_EGAT_PVP = 0,
  ReqAckJoinActivity_EGameActivityType_ReqAckJoinActivity_EGameActivityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckJoinActivity_EGameActivityType_ReqAckJoinActivity_EGameActivityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckJoinActivity_EGameActivityType_IsValid(int value);
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity_EGameActivityType_EGameActivityType_MIN = ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX = ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
const int ReqAckJoinActivity_EGameActivityType_EGameActivityType_ARRAYSIZE = ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor();
inline const ::std::string& ReqAckJoinActivity_EGameActivityType_Name(ReqAckJoinActivity_EGameActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckJoinActivity_EGameActivityType_descriptor(), value);
}
inline bool ReqAckJoinActivity_EGameActivityType_Parse(
    const ::std::string& name, ReqAckJoinActivity_EGameActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckJoinActivity_EGameActivityType>(
    ReqAckJoinActivity_EGameActivityType_descriptor(), name, value);
}
enum ReqAckJoinActivity_EGameActivitySubType {
  ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL = 0,
  ReqAckJoinActivity_EGameActivitySubType_ReqAckJoinActivity_EGameActivitySubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckJoinActivity_EGameActivitySubType_ReqAckJoinActivity_EGameActivitySubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value);
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MIN = ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX = ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
const int ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_ARRAYSIZE = ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor();
inline const ::std::string& ReqAckJoinActivity_EGameActivitySubType_Name(ReqAckJoinActivity_EGameActivitySubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckJoinActivity_EGameActivitySubType_descriptor(), value);
}
inline bool ReqAckJoinActivity_EGameActivitySubType_Parse(
    const ::std::string& name, ReqAckJoinActivity_EGameActivitySubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckJoinActivity_EGameActivitySubType>(
    ReqAckJoinActivity_EGameActivitySubType_descriptor(), name, value);
}
enum ReqAckOprGuildMember_EGGuildMemberOprType {
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN = 0,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_UP = 1,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICK = 2,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_APPOINT = 3,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_FIRE = 4,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DEMISE = 5,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_ACCEPTAPPLY = 6,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DENYAPPLY = 7,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT = 8,
  ReqAckOprGuildMember_EGGuildMemberOprType_ReqAckOprGuildMember_EGGuildMemberOprType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckOprGuildMember_EGGuildMemberOprType_ReqAckOprGuildMember_EGGuildMemberOprType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value);
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MIN = ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX = ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT;
const int ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_ARRAYSIZE = ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
inline const ::std::string& ReqAckOprGuildMember_EGGuildMemberOprType_Name(ReqAckOprGuildMember_EGGuildMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprGuildMember_EGGuildMemberOprType_descriptor(), value);
}
inline bool ReqAckOprGuildMember_EGGuildMemberOprType_Parse(
    const ::std::string& name, ReqAckOprGuildMember_EGGuildMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprGuildMember_EGGuildMemberOprType>(
    ReqAckOprGuildMember_EGGuildMemberOprType_descriptor(), name, value);
}
enum ReqAckOprGuild_EGGuildOprType {
  ReqAckOprGuild_EGGuildOprType_EGAT_NONE = 0,
  ReqAckOprGuild_EGGuildOprType_EGAT_APPLYDISMISS = 1,
  ReqAckOprGuild_EGGuildOprType_EGAT_STOPDISMISS = 2,
  ReqAckOprGuild_EGGuildOprType_EGAT_SETRECRUIT = 3,
  ReqAckOprGuild_EGGuildOprType_EGAT_PUBLISHRECRUIT = 4,
  ReqAckOprGuild_EGGuildOprType_EGAT_EDITAD = 5,
  ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP = 6,
  ReqAckOprGuild_EGGuildOprType_ReqAckOprGuild_EGGuildOprType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckOprGuild_EGGuildOprType_ReqAckOprGuild_EGGuildOprType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckOprGuild_EGGuildOprType_IsValid(int value);
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MIN = ReqAckOprGuild_EGGuildOprType_EGAT_NONE;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX = ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP;
const int ReqAckOprGuild_EGGuildOprType_EGGuildOprType_ARRAYSIZE = ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor();
inline const ::std::string& ReqAckOprGuild_EGGuildOprType_Name(ReqAckOprGuild_EGGuildOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprGuild_EGGuildOprType_descriptor(), value);
}
inline bool ReqAckOprGuild_EGGuildOprType_Parse(
    const ::std::string& name, ReqAckOprGuild_EGGuildOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprGuild_EGGuildOprType>(
    ReqAckOprGuild_EGGuildOprType_descriptor(), name, value);
}
enum ChatInfo_EChatType {
  ChatInfo_EChatType_ECHATTYPE_NORMAL = 0,
  ChatInfo_EChatType_ECHATTYPE_PRIVATE = 1,
  ChatInfo_EChatType_ECHATTYPE_GUILD = 2,
  ChatInfo_EChatType_ECHATTYPE_WORLD = 3,
  ChatInfo_EChatType_ChatInfo_EChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatInfo_EChatType_ChatInfo_EChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ChatInfo_EChatType_IsValid(int value);
const ChatInfo_EChatType ChatInfo_EChatType_EChatType_MIN = ChatInfo_EChatType_ECHATTYPE_NORMAL;
const ChatInfo_EChatType ChatInfo_EChatType_EChatType_MAX = ChatInfo_EChatType_ECHATTYPE_WORLD;
const int ChatInfo_EChatType_EChatType_ARRAYSIZE = ChatInfo_EChatType_EChatType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor();
inline const ::std::string& ChatInfo_EChatType_Name(ChatInfo_EChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatInfo_EChatType_descriptor(), value);
}
inline bool ChatInfo_EChatType_Parse(
    const ::std::string& name, ChatInfo_EChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatInfo_EChatType>(
    ChatInfo_EChatType_descriptor(), name, value);
}
enum ReqAckOprTeamMember_EGTeamMemberOprType {
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN = 0,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP = 1,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK = 2,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT = 3,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE = 4,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE = 5,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY = 6,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY = 7,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT = 8,
  ReqAckOprTeamMember_EGTeamMemberOprType_ReqAckOprTeamMember_EGTeamMemberOprType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckOprTeamMember_EGTeamMemberOprType_ReqAckOprTeamMember_EGTeamMemberOprType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value);
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
const int ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE = ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
inline const ::std::string& ReqAckOprTeamMember_EGTeamMemberOprType_Name(ReqAckOprTeamMember_EGTeamMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), value);
}
inline bool ReqAckOprTeamMember_EGTeamMemberOprType_Parse(
    const ::std::string& name, ReqAckOprTeamMember_EGTeamMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprTeamMember_EGTeamMemberOprType>(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), name, value);
}
enum ReqPVPApplyMatch_EApplyType {
  ReqPVPApplyMatch_EApplyType_EApplyType_Single = 0,
  ReqPVPApplyMatch_EApplyType_EApplyType_Team = 1,
  ReqPVPApplyMatch_EApplyType_ReqPVPApplyMatch_EApplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqPVPApplyMatch_EApplyType_ReqPVPApplyMatch_EApplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqPVPApplyMatch_EApplyType_IsValid(int value);
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch_EApplyType_EApplyType_MIN = ReqPVPApplyMatch_EApplyType_EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch_EApplyType_EApplyType_MAX = ReqPVPApplyMatch_EApplyType_EApplyType_Team;
const int ReqPVPApplyMatch_EApplyType_EApplyType_ARRAYSIZE = ReqPVPApplyMatch_EApplyType_EApplyType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor();
inline const ::std::string& ReqPVPApplyMatch_EApplyType_Name(ReqPVPApplyMatch_EApplyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqPVPApplyMatch_EApplyType_descriptor(), value);
}
inline bool ReqPVPApplyMatch_EApplyType_Parse(
    const ::std::string& name, ReqPVPApplyMatch_EApplyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqPVPApplyMatch_EApplyType>(
    ReqPVPApplyMatch_EApplyType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ReqEnterGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqEnterGameServer) */ {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqEnterGameServer(ReqEnterGameServer&& from) noexcept
    : ReqEnterGameServer() {
    *this = ::std::move(from);
  }

  inline ReqEnterGameServer& operator=(ReqEnterGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGameServer*>(
               &_ReqEnterGameServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReqEnterGameServer* other);
  friend void swap(ReqEnterGameServer& a, ReqEnterGameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGameServer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqEnterGameServer>(NULL);
  }

  ReqEnterGameServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqEnterGameServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqEnterGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .AFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::AFMsg::Ident& id() const;
  ::AFMsg::Ident* release_id();
  ::AFMsg::Ident* mutable_id();
  void set_allocated_id(::AFMsg::Ident* id);

  // int32 game_id = 3;
  void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqEnterGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::AFMsg::Ident* id_;
  ::google::protobuf::int32 game_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGameServerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHeartBeat) */ {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqHeartBeat(ReqHeartBeat&& from) noexcept
    : ReqHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqHeartBeat& operator=(ReqHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqHeartBeat*>(
               &_ReqHeartBeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ReqHeartBeat* other);
  friend void swap(ReqHeartBeat& a, ReqHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqHeartBeat* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHeartBeat>(NULL);
  }

  ReqHeartBeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHeartBeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHeartBeatImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqLeaveGameServer) */ {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ReqLeaveGameServer* other);
  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLeaveGameServer>(NULL);
  }

  ReqLeaveGameServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqLeaveGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqLeaveGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveGameServerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PlayerEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.PlayerEntryInfo) */ {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEntryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerEntryInfo* other);
  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerEntryInfo>(NULL);
  }

  PlayerEntryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerEntryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes config_id = 5;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 5;
  const ::std::string& config_id() const;
  void set_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_config_id(::std::string&& value);
  #endif
  void set_config_id(const char* value);
  void set_config_id(const void* value, size_t size);
  ::std::string* mutable_config_id();
  ::std::string* release_config_id();
  void set_allocated_config_id(::std::string* config_id);

  // bytes class_id = 7;
  void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  #if LANG_CXX11
  void set_class_id(::std::string&& value);
  #endif
  void set_class_id(const char* value);
  void set_class_id(const void* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // .AFMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  const ::AFMsg::Ident& object_guid() const;
  ::AFMsg::Ident* release_object_guid();
  ::AFMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::AFMsg::Ident* object_guid);

  // .AFMsg.Point3D pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::AFMsg::Point3D& pos() const;
  ::AFMsg::Point3D* release_pos();
  ::AFMsg::Point3D* mutable_pos();
  void set_allocated_pos(::AFMsg::Point3D* pos);

  // int32 career_type = 3;
  void clear_career_type();
  static const int kCareerTypeFieldNumber = 3;
  ::google::protobuf::int32 career_type() const;
  void set_career_type(::google::protobuf::int32 value);

  // int32 player_state = 4;
  void clear_player_state();
  static const int kPlayerStateFieldNumber = 4;
  ::google::protobuf::int32 player_state() const;
  void set_player_state(::google::protobuf::int32 value);

  // int32 scene_id = 6;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 6;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.PlayerEntryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::AFMsg::Ident* object_guid_;
  ::AFMsg::Point3D* pos_;
  ::google::protobuf::int32 career_type_;
  ::google::protobuf::int32 player_state_;
  ::google::protobuf::int32 scene_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsPlayerEntryInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerEntryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPlayerEntryList) */ {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerEntryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AckPlayerEntryList* other);
  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPlayerEntryList>(NULL);
  }

  AckPlayerEntryList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPlayerEntryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckPlayerEntryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  ::AFMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >*
      mutable_object_list();
  const ::AFMsg::PlayerEntryInfo& object_list(int index) const;
  ::AFMsg::PlayerEntryInfo* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckPlayerEntryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo > object_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerEntryListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerLeaveList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPlayerLeaveList) */ {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerLeaveList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AckPlayerLeaveList* other);
  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPlayerLeaveList>(NULL);
  }

  AckPlayerLeaveList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPlayerLeaveList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckPlayerLeaveList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  ::AFMsg::Ident* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_object_list();
  const ::AFMsg::Ident& object_list(int index) const;
  ::AFMsg::Ident* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckPlayerLeaveList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > object_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerLeaveListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSynData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSynData) */ {
 public:
  ReqAckSynData();
  virtual ~ReqAckSynData();

  ReqAckSynData(const ReqAckSynData& from);

  inline ReqAckSynData& operator=(const ReqAckSynData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckSynData(ReqAckSynData&& from) noexcept
    : ReqAckSynData() {
    *this = ::std::move(from);
  }

  inline ReqAckSynData& operator=(ReqAckSynData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSynData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSynData* internal_default_instance() {
    return reinterpret_cast<const ReqAckSynData*>(
               &_ReqAckSynData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ReqAckSynData* other);
  friend void swap(ReqAckSynData& a, ReqAckSynData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSynData* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSynData>(NULL);
  }

  ReqAckSynData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSynData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckSynData& from);
  void MergeFrom(const ReqAckSynData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckSynData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckSynData_SynType SynType;
  static const SynType EST_NONE =
    ReqAckSynData_SynType_EST_NONE;
  static const SynType EST_SCENE =
    ReqAckSynData_SynType_EST_SCENE;
  static const SynType EST_GROUP =
    ReqAckSynData_SynType_EST_GROUP;
  static const SynType EST_GUILD =
    ReqAckSynData_SynType_EST_GUILD;
  static const SynType EST_FRIEND =
    ReqAckSynData_SynType_EST_FRIEND;
  static inline bool SynType_IsValid(int value) {
    return ReqAckSynData_SynType_IsValid(value);
  }
  static const SynType SynType_MIN =
    ReqAckSynData_SynType_SynType_MIN;
  static const SynType SynType_MAX =
    ReqAckSynData_SynType_SynType_MAX;
  static const int SynType_ARRAYSIZE =
    ReqAckSynData_SynType_SynType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SynType_descriptor() {
    return ReqAckSynData_SynType_descriptor();
  }
  static inline const ::std::string& SynType_Name(SynType value) {
    return ReqAckSynData_SynType_Name(value);
  }
  static inline bool SynType_Parse(const ::std::string& name,
      SynType* value) {
    return ReqAckSynData_SynType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident object_list = 2;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 2;
  ::AFMsg::Ident* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_object_list();
  const ::AFMsg::Ident& object_list(int index) const;
  ::AFMsg::Ident* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      object_list() const;

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .AFMsg.Ident syser = 1;
  bool has_syser() const;
  void clear_syser();
  static const int kSyserFieldNumber = 1;
  const ::AFMsg::Ident& syser() const;
  ::AFMsg::Ident* release_syser();
  ::AFMsg::Ident* mutable_syser();
  void set_allocated_syser(::AFMsg::Ident* syser);

  // .AFMsg.ReqAckSynData.SynType syn_type = 4;
  void clear_syn_type();
  static const int kSynTypeFieldNumber = 4;
  ::AFMsg::ReqAckSynData_SynType syn_type() const;
  void set_syn_type(::AFMsg::ReqAckSynData_SynType value);

  // .AFMsg.EGameMsgID msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  ::AFMsg::EGameMsgID msg_id() const;
  void set_msg_id(::AFMsg::EGameMsgID value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSynData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > object_list_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::AFMsg::Ident* syser_;
  int syn_type_;
  int msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSynDataImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckPlayerMove) */ {
 public:
  ReqAckPlayerMove();
  virtual ~ReqAckPlayerMove();

  ReqAckPlayerMove(const ReqAckPlayerMove& from);

  inline ReqAckPlayerMove& operator=(const ReqAckPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerMove(ReqAckPlayerMove&& from) noexcept
    : ReqAckPlayerMove() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerMove& operator=(ReqAckPlayerMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerMove* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerMove*>(
               &_ReqAckPlayerMove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ReqAckPlayerMove* other);
  friend void swap(ReqAckPlayerMove& a, ReqAckPlayerMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerMove* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckPlayerMove>(NULL);
  }

  ReqAckPlayerMove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckPlayerMove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckPlayerMove& from);
  void MergeFrom(const ReqAckPlayerMove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckPlayerMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Position target_pos = 3;
  int target_pos_size() const;
  void clear_target_pos();
  static const int kTargetPosFieldNumber = 3;
  ::AFMsg::Position* mutable_target_pos(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
      mutable_target_pos();
  const ::AFMsg::Position& target_pos(int index) const;
  ::AFMsg::Position* add_target_pos();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
      target_pos() const;

  // repeated .AFMsg.Position source_pos = 4;
  int source_pos_size() const;
  void clear_source_pos();
  static const int kSourcePosFieldNumber = 4;
  ::AFMsg::Position* mutable_source_pos(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
      mutable_source_pos();
  const ::AFMsg::Position& source_pos(int index) const;
  ::AFMsg::Position* add_source_pos();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
      source_pos() const;

  // .AFMsg.Ident mover = 1;
  bool has_mover() const;
  void clear_mover();
  static const int kMoverFieldNumber = 1;
  const ::AFMsg::Ident& mover() const;
  ::AFMsg::Ident* release_mover();
  ::AFMsg::Ident* mutable_mover();
  void set_allocated_mover(::AFMsg::Ident* mover);

  // int32 moveType = 2;
  void clear_movetype();
  static const int kMoveTypeFieldNumber = 2;
  ::google::protobuf::int32 movetype() const;
  void set_movetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckPlayerMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position > target_pos_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position > source_pos_;
  ::AFMsg::Ident* mover_;
  ::google::protobuf::int32 movetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerMoveImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ChatContainer) */ {
 public:
  ChatContainer();
  virtual ~ChatContainer();

  ChatContainer(const ChatContainer& from);

  inline ChatContainer& operator=(const ChatContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatContainer(ChatContainer&& from) noexcept
    : ChatContainer() {
    *this = ::std::move(from);
  }

  inline ChatContainer& operator=(ChatContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatContainer* internal_default_instance() {
    return reinterpret_cast<const ChatContainer*>(
               &_ChatContainer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ChatContainer* other);
  friend void swap(ChatContainer& a, ChatContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatContainer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatContainer>(NULL);
  }

  ChatContainer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatContainer& from);
  void MergeFrom(const ChatContainer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatContainer_ContainerType ContainerType;
  static const ContainerType EGCT_NONE =
    ChatContainer_ContainerType_EGCT_NONE;
  static const ContainerType EGCT_ITEM =
    ChatContainer_ContainerType_EGCT_ITEM;
  static inline bool ContainerType_IsValid(int value) {
    return ChatContainer_ContainerType_IsValid(value);
  }
  static const ContainerType ContainerType_MIN =
    ChatContainer_ContainerType_ContainerType_MIN;
  static const ContainerType ContainerType_MAX =
    ChatContainer_ContainerType_ContainerType_MAX;
  static const int ContainerType_ARRAYSIZE =
    ChatContainer_ContainerType_ContainerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContainerType_descriptor() {
    return ChatContainer_ContainerType_descriptor();
  }
  static inline const ::std::string& ContainerType_Name(ContainerType value) {
    return ChatContainer_ContainerType_Name(value);
  }
  static inline bool ContainerType_Parse(const ::std::string& name,
      ContainerType* value) {
    return ChatContainer_ContainerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data_info = 3;
  void clear_data_info();
  static const int kDataInfoFieldNumber = 3;
  const ::std::string& data_info() const;
  void set_data_info(const ::std::string& value);
  #if LANG_CXX11
  void set_data_info(::std::string&& value);
  #endif
  void set_data_info(const char* value);
  void set_data_info(const void* value, size_t size);
  ::std::string* mutable_data_info();
  ::std::string* release_data_info();
  void set_allocated_data_info(::std::string* data_info);

  // int32 ConTainerType = 2;
  void clear_containertype();
  static const int kConTainerTypeFieldNumber = 2;
  ::google::protobuf::int32 containertype() const;
  void set_containertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ChatContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_info_;
  ::google::protobuf::int32 containertype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsChatContainerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckPlayerChat) */ {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ReqAckPlayerChat* other);
  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckPlayerChat>(NULL);
  }

  ReqAckPlayerChat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckPlayerChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckPlayerChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static const EGameChatType EGCT_GUILD =
    ReqAckPlayerChat_EGameChatType_EGCT_GUILD;
  static const EGameChatType EGCT_PRIVATE =
    ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE;
  static const EGameChatType EGCT_TEAM =
    ReqAckPlayerChat_EGameChatType_EGCT_TEAM;
  static const EGameChatType EGCT_WORLD =
    ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static const EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static const EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static const int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  static inline const ::std::string& EGameChatType_Name(EGameChatType value) {
    return ReqAckPlayerChat_EGameChatType_Name(value);
  }
  static inline bool EGameChatType_Parse(const ::std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ChatContainer Container_data = 6;
  int container_data_size() const;
  void clear_container_data();
  static const int kContainerDataFieldNumber = 6;
  ::AFMsg::ChatContainer* mutable_container_data(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >*
      mutable_container_data();
  const ::AFMsg::ChatContainer& container_data(int index) const;
  ::AFMsg::ChatContainer* add_container_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >&
      container_data() const;

  // bytes chat_info = 3;
  void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  const ::std::string& chat_info() const;
  void set_chat_info(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_info(::std::string&& value);
  #endif
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  ::std::string* mutable_chat_info();
  ::std::string* release_chat_info();
  void set_allocated_chat_info(::std::string* chat_info);

  // bytes chat_name = 4;
  void clear_chat_name();
  static const int kChatNameFieldNumber = 4;
  const ::std::string& chat_name() const;
  void set_chat_name(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_name(::std::string&& value);
  #endif
  void set_chat_name(const char* value);
  void set_chat_name(const void* value, size_t size);
  ::std::string* mutable_chat_name();
  ::std::string* release_chat_name();
  void set_allocated_chat_name(::std::string* chat_name);

  // .AFMsg.Ident chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  const ::AFMsg::Ident& chat_id() const;
  ::AFMsg::Ident* release_chat_id();
  ::AFMsg::Ident* mutable_chat_id();
  void set_allocated_chat_id(::AFMsg::Ident* chat_id);

  // .AFMsg.Ident target_id = 5;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 5;
  const ::AFMsg::Ident& target_id() const;
  ::AFMsg::Ident* release_target_id();
  ::AFMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::AFMsg::Ident* target_id);

  // .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  ::AFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::AFMsg::ReqAckPlayerChat_EGameChatType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckPlayerChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer > container_data_;
  ::google::protobuf::internal::ArenaStringPtr chat_info_;
  ::google::protobuf::internal::ArenaStringPtr chat_name_;
  ::AFMsg::Ident* chat_id_;
  ::AFMsg::Ident* target_id_;
  int chat_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerChatImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT EffectData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.EffectData) */ {
 public:
  EffectData();
  virtual ~EffectData();

  EffectData(const EffectData& from);

  inline EffectData& operator=(const EffectData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EffectData(EffectData&& from) noexcept
    : EffectData() {
    *this = ::std::move(from);
  }

  inline EffectData& operator=(EffectData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EffectData* internal_default_instance() {
    return reinterpret_cast<const EffectData*>(
               &_EffectData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(EffectData* other);
  friend void swap(EffectData& a, EffectData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EffectData* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EffectData>(NULL);
  }

  EffectData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<EffectData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EffectData& from);
  void MergeFrom(const EffectData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EffectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EffectData_EResultType EResultType;
  static const EResultType EET_SUCCESS =
    EffectData_EResultType_EET_SUCCESS;
  static const EResultType EET_FAIL =
    EffectData_EResultType_EET_FAIL;
  static const EResultType EET_REFUSE =
    EffectData_EResultType_EET_REFUSE;
  static inline bool EResultType_IsValid(int value) {
    return EffectData_EResultType_IsValid(value);
  }
  static const EResultType EResultType_MIN =
    EffectData_EResultType_EResultType_MIN;
  static const EResultType EResultType_MAX =
    EffectData_EResultType_EResultType_MAX;
  static const int EResultType_ARRAYSIZE =
    EffectData_EResultType_EResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResultType_descriptor() {
    return EffectData_EResultType_descriptor();
  }
  static inline const ::std::string& EResultType_Name(EResultType value) {
    return EffectData_EResultType_Name(value);
  }
  static inline bool EResultType_Parse(const ::std::string& name,
      EResultType* value) {
    return EffectData_EResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.Ident effect_ident = 1;
  bool has_effect_ident() const;
  void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 1;
  const ::AFMsg::Ident& effect_ident() const;
  ::AFMsg::Ident* release_effect_ident();
  ::AFMsg::Ident* mutable_effect_ident();
  void set_allocated_effect_ident(::AFMsg::Ident* effect_ident);

  // int32 effect_value = 2;
  void clear_effect_value();
  static const int kEffectValueFieldNumber = 2;
  ::google::protobuf::int32 effect_value() const;
  void set_effect_value(::google::protobuf::int32 value);

  // .AFMsg.EffectData.EResultType effect_rlt = 3;
  void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 3;
  ::AFMsg::EffectData_EResultType effect_rlt() const;
  void set_effect_rlt(::AFMsg::EffectData_EResultType value);

  // @@protoc_insertion_point(class_scope:AFMsg.EffectData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* effect_ident_;
  ::google::protobuf::int32 effect_value_;
  int effect_rlt_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsEffectDataImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckUseSkill) */ {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckUseSkill(ReqAckUseSkill&& from) noexcept
    : ReqAckUseSkill() {
    *this = ::std::move(from);
  }

  inline ReqAckUseSkill& operator=(ReqAckUseSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUseSkill* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseSkill*>(
               &_ReqAckUseSkill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ReqAckUseSkill* other);
  friend void swap(ReqAckUseSkill& a, ReqAckUseSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUseSkill* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckUseSkill>(NULL);
  }

  ReqAckUseSkill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckUseSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckUseSkill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.EffectData effect_data = 6;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 6;
  ::AFMsg::EffectData* mutable_effect_data(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
      mutable_effect_data();
  const ::AFMsg::EffectData& effect_data(int index) const;
  ::AFMsg::EffectData* add_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
      effect_data() const;

  // bytes skill_id = 2;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  const ::std::string& skill_id() const;
  void set_skill_id(const ::std::string& value);
  #if LANG_CXX11
  void set_skill_id(::std::string&& value);
  #endif
  void set_skill_id(const char* value);
  void set_skill_id(const void* value, size_t size);
  ::std::string* mutable_skill_id();
  ::std::string* release_skill_id();
  void set_allocated_skill_id(::std::string* skill_id);

  // .AFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::AFMsg::Ident& user() const;
  ::AFMsg::Ident* release_user();
  ::AFMsg::Ident* mutable_user();
  void set_allocated_user(::AFMsg::Ident* user);

  // .AFMsg.Position now_pos = 3;
  bool has_now_pos() const;
  void clear_now_pos();
  static const int kNowPosFieldNumber = 3;
  const ::AFMsg::Position& now_pos() const;
  ::AFMsg::Position* release_now_pos();
  ::AFMsg::Position* mutable_now_pos();
  void set_allocated_now_pos(::AFMsg::Position* now_pos);

  // .AFMsg.Position tar_pos = 4;
  bool has_tar_pos() const;
  void clear_tar_pos();
  static const int kTarPosFieldNumber = 4;
  const ::AFMsg::Position& tar_pos() const;
  ::AFMsg::Position* release_tar_pos();
  ::AFMsg::Position* mutable_tar_pos();
  void set_allocated_tar_pos(::AFMsg::Position* tar_pos);

  // int32 use_index = 5;
  void clear_use_index();
  static const int kUseIndexFieldNumber = 5;
  ::google::protobuf::int32 use_index() const;
  void set_use_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckUseSkill)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData > effect_data_;
  ::google::protobuf::internal::ArenaStringPtr skill_id_;
  ::AFMsg::Ident* user_;
  ::AFMsg::Position* now_pos_;
  ::AFMsg::Position* tar_pos_;
  ::google::protobuf::int32 use_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseSkillImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckUseItem) */ {
 public:
  ReqAckUseItem();
  virtual ~ReqAckUseItem();

  ReqAckUseItem(const ReqAckUseItem& from);

  inline ReqAckUseItem& operator=(const ReqAckUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckUseItem(ReqAckUseItem&& from) noexcept
    : ReqAckUseItem() {
    *this = ::std::move(from);
  }

  inline ReqAckUseItem& operator=(ReqAckUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUseItem* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseItem*>(
               &_ReqAckUseItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ReqAckUseItem* other);
  friend void swap(ReqAckUseItem& a, ReqAckUseItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUseItem* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckUseItem>(NULL);
  }

  ReqAckUseItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckUseItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckUseItem& from);
  void MergeFrom(const ReqAckUseItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckUseItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.EffectData effect_data = 3;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 3;
  ::AFMsg::EffectData* mutable_effect_data(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
      mutable_effect_data();
  const ::AFMsg::EffectData& effect_data(int index) const;
  ::AFMsg::EffectData* add_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
      effect_data() const;

  // .AFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::AFMsg::Ident& user() const;
  ::AFMsg::Ident* release_user();
  ::AFMsg::Ident* mutable_user();
  void set_allocated_user(::AFMsg::Ident* user);

  // .AFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  const ::AFMsg::Ident& item_guid() const;
  ::AFMsg::Ident* release_item_guid();
  ::AFMsg::Ident* mutable_item_guid();
  void set_allocated_item_guid(::AFMsg::Ident* item_guid);

  // .AFMsg.ItemStruct item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  const ::AFMsg::ItemStruct& item() const;
  ::AFMsg::ItemStruct* release_item();
  ::AFMsg::ItemStruct* mutable_item();
  void set_allocated_item(::AFMsg::ItemStruct* item);

  // .AFMsg.Ident targetid = 5;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 5;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* release_targetid();
  ::AFMsg::Ident* mutable_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckUseItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData > effect_data_;
  ::AFMsg::Ident* user_;
  ::AFMsg::Ident* item_guid_;
  ::AFMsg::ItemStruct* item_;
  ::AFMsg::Ident* targetid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseItemImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSwapScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSwapScene) */ {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckSwapScene(ReqAckSwapScene&& from) noexcept
    : ReqAckSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqAckSwapScene& operator=(ReqAckSwapScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSwapScene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqAckSwapScene*>(
               &_ReqAckSwapScene_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ReqAckSwapScene* other);
  friend void swap(ReqAckSwapScene& a, ReqAckSwapScene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSwapScene* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSwapScene>(NULL);
  }

  ReqAckSwapScene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSwapScene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckSwapScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckSwapScene_EGameSwapType EGameSwapType;
  static const EGameSwapType EGST_NARMAL =
    ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
  static const EGameSwapType EGST_CLONE =
    ReqAckSwapScene_EGameSwapType_EGST_CLONE;
  static const EGameSwapType EGST_ARENA =
    ReqAckSwapScene_EGameSwapType_EGST_ARENA;
  static const EGameSwapType EGST_MIRROR =
    ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
  static inline bool EGameSwapType_IsValid(int value) {
    return ReqAckSwapScene_EGameSwapType_IsValid(value);
  }
  static const EGameSwapType EGameSwapType_MIN =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN;
  static const EGameSwapType EGameSwapType_MAX =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX;
  static const int EGameSwapType_ARRAYSIZE =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameSwapType_descriptor() {
    return ReqAckSwapScene_EGameSwapType_descriptor();
  }
  static inline const ::std::string& EGameSwapType_Name(EGameSwapType value) {
    return ReqAckSwapScene_EGameSwapType_Name(value);
  }
  static inline bool EGameSwapType_Parse(const ::std::string& name,
      EGameSwapType* value) {
    return ReqAckSwapScene_EGameSwapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 1;
  ::AFMsg::ReqAckSwapScene_EGameSwapType transfer_type() const;
  void set_transfer_type(::AFMsg::ReqAckSwapScene_EGameSwapType value);

  // int32 scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // int32 line_id = 3;
  void clear_line_id();
  static const int kLineIdFieldNumber = 3;
  ::google::protobuf::int32 line_id() const;
  void set_line_id(::google::protobuf::int32 value);

  // float x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // float y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // float z = 6;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSwapScene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int transfer_type_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 line_id_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSwapSceneImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ItemStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ItemStruct) */ {
 public:
  ItemStruct();
  virtual ~ItemStruct();

  ItemStruct(const ItemStruct& from);

  inline ItemStruct& operator=(const ItemStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemStruct(ItemStruct&& from) noexcept
    : ItemStruct() {
    *this = ::std::move(from);
  }

  inline ItemStruct& operator=(ItemStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemStruct* internal_default_instance() {
    return reinterpret_cast<const ItemStruct*>(
               &_ItemStruct_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ItemStruct* other);
  friend void swap(ItemStruct& a, ItemStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemStruct* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ItemStruct>(NULL);
  }

  ItemStruct* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ItemStruct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemStruct& from);
  void MergeFrom(const ItemStruct& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // int32 item_count = 2;
  void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  ::google::protobuf::int32 item_count() const;
  void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ItemStruct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::int32 item_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsItemStructImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT CurrencyStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.CurrencyStruct) */ {
 public:
  CurrencyStruct();
  virtual ~CurrencyStruct();

  CurrencyStruct(const CurrencyStruct& from);

  inline CurrencyStruct& operator=(const CurrencyStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrencyStruct(CurrencyStruct&& from) noexcept
    : CurrencyStruct() {
    *this = ::std::move(from);
  }

  inline CurrencyStruct& operator=(CurrencyStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyStruct* internal_default_instance() {
    return reinterpret_cast<const CurrencyStruct*>(
               &_CurrencyStruct_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CurrencyStruct* other);
  friend void swap(CurrencyStruct& a, CurrencyStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrencyStruct* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CurrencyStruct>(NULL);
  }

  CurrencyStruct* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<CurrencyStruct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurrencyStruct& from);
  void MergeFrom(const CurrencyStruct& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurrencyStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 currency_type = 1;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 1;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // int32 currency_count = 2;
  void clear_currency_count();
  static const int kCurrencyCountFieldNumber = 2;
  ::google::protobuf::int32 currency_count() const;
  void set_currency_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.CurrencyStruct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 currency_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsCurrencyStructImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckEndBattle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckEndBattle) */ {
 public:
  ReqAckEndBattle();
  virtual ~ReqAckEndBattle();

  ReqAckEndBattle(const ReqAckEndBattle& from);

  inline ReqAckEndBattle& operator=(const ReqAckEndBattle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckEndBattle(ReqAckEndBattle&& from) noexcept
    : ReqAckEndBattle() {
    *this = ::std::move(from);
  }

  inline ReqAckEndBattle& operator=(ReqAckEndBattle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckEndBattle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckEndBattle* internal_default_instance() {
    return reinterpret_cast<const ReqAckEndBattle*>(
               &_ReqAckEndBattle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ReqAckEndBattle* other);
  friend void swap(ReqAckEndBattle& a, ReqAckEndBattle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckEndBattle* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckEndBattle>(NULL);
  }

  ReqAckEndBattle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckEndBattle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckEndBattle& from);
  void MergeFrom(const ReqAckEndBattle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckEndBattle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ItemStruct item_list = 4;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 4;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // int32 money = 1;
  void clear_money();
  static const int kMoneyFieldNumber = 1;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 exp = 2;
  void clear_exp();
  static const int kExpFieldNumber = 2;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // int32 diamond = 3;
  void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckEndBattle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 diamond_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckEndBattleImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqPickDropItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqPickDropItem) */ {
 public:
  ReqPickDropItem();
  virtual ~ReqPickDropItem();

  ReqPickDropItem(const ReqPickDropItem& from);

  inline ReqPickDropItem& operator=(const ReqPickDropItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPickDropItem(ReqPickDropItem&& from) noexcept
    : ReqPickDropItem() {
    *this = ::std::move(from);
  }

  inline ReqPickDropItem& operator=(ReqPickDropItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPickDropItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPickDropItem* internal_default_instance() {
    return reinterpret_cast<const ReqPickDropItem*>(
               &_ReqPickDropItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ReqPickDropItem* other);
  friend void swap(ReqPickDropItem& a, ReqPickDropItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPickDropItem* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqPickDropItem>(NULL);
  }

  ReqPickDropItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqPickDropItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqPickDropItem& from);
  void MergeFrom(const ReqPickDropItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqPickDropItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  const ::AFMsg::Ident& item_guid() const;
  ::AFMsg::Ident* release_item_guid();
  ::AFMsg::Ident* mutable_item_guid();
  void set_allocated_item_guid(::AFMsg::Ident* item_guid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqPickDropItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* item_guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPickDropItemImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAcceptTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAcceptTask) */ {
 public:
  ReqAcceptTask();
  virtual ~ReqAcceptTask();

  ReqAcceptTask(const ReqAcceptTask& from);

  inline ReqAcceptTask& operator=(const ReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAcceptTask(ReqAcceptTask&& from) noexcept
    : ReqAcceptTask() {
    *this = ::std::move(from);
  }

  inline ReqAcceptTask& operator=(ReqAcceptTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAcceptTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAcceptTask* internal_default_instance() {
    return reinterpret_cast<const ReqAcceptTask*>(
               &_ReqAcceptTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ReqAcceptTask* other);
  friend void swap(ReqAcceptTask& a, ReqAcceptTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAcceptTask* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAcceptTask>(NULL);
  }

  ReqAcceptTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAcceptTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAcceptTask& from);
  void MergeFrom(const ReqAcceptTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAcceptTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAcceptTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAcceptTaskImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCompeleteTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCompeleteTask) */ {
 public:
  ReqCompeleteTask();
  virtual ~ReqCompeleteTask();

  ReqCompeleteTask(const ReqCompeleteTask& from);

  inline ReqCompeleteTask& operator=(const ReqCompeleteTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCompeleteTask(ReqCompeleteTask&& from) noexcept
    : ReqCompeleteTask() {
    *this = ::std::move(from);
  }

  inline ReqCompeleteTask& operator=(ReqCompeleteTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCompeleteTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCompeleteTask* internal_default_instance() {
    return reinterpret_cast<const ReqCompeleteTask*>(
               &_ReqCompeleteTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ReqCompeleteTask* other);
  friend void swap(ReqCompeleteTask& a, ReqCompeleteTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCompeleteTask* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCompeleteTask>(NULL);
  }

  ReqCompeleteTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCompeleteTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqCompeleteTask& from);
  void MergeFrom(const ReqCompeleteTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqCompeleteTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCompeleteTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCompeleteTaskImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinActivity) */ {
 public:
  ReqAckJoinActivity();
  virtual ~ReqAckJoinActivity();

  ReqAckJoinActivity(const ReqAckJoinActivity& from);

  inline ReqAckJoinActivity& operator=(const ReqAckJoinActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckJoinActivity(ReqAckJoinActivity&& from) noexcept
    : ReqAckJoinActivity() {
    *this = ::std::move(from);
  }

  inline ReqAckJoinActivity& operator=(ReqAckJoinActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckJoinActivity* internal_default_instance() {
    return reinterpret_cast<const ReqAckJoinActivity*>(
               &_ReqAckJoinActivity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ReqAckJoinActivity* other);
  friend void swap(ReqAckJoinActivity& a, ReqAckJoinActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckJoinActivity* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinActivity>(NULL);
  }

  ReqAckJoinActivity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckJoinActivity& from);
  void MergeFrom(const ReqAckJoinActivity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckJoinActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckJoinActivity_EGameActivityType EGameActivityType;
  static const EGameActivityType EGAT_PVP =
    ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
  static inline bool EGameActivityType_IsValid(int value) {
    return ReqAckJoinActivity_EGameActivityType_IsValid(value);
  }
  static const EGameActivityType EGameActivityType_MIN =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_MIN;
  static const EGameActivityType EGameActivityType_MAX =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX;
  static const int EGameActivityType_ARRAYSIZE =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameActivityType_descriptor() {
    return ReqAckJoinActivity_EGameActivityType_descriptor();
  }
  static inline const ::std::string& EGameActivityType_Name(EGameActivityType value) {
    return ReqAckJoinActivity_EGameActivityType_Name(value);
  }
  static inline bool EGameActivityType_Parse(const ::std::string& name,
      EGameActivityType* value) {
    return ReqAckJoinActivity_EGameActivityType_Parse(name, value);
  }

  typedef ReqAckJoinActivity_EGameActivitySubType EGameActivitySubType;
  static const EGameActivitySubType EGAT_NORMAL =
    ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
  static inline bool EGameActivitySubType_IsValid(int value) {
    return ReqAckJoinActivity_EGameActivitySubType_IsValid(value);
  }
  static const EGameActivitySubType EGameActivitySubType_MIN =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MIN;
  static const EGameActivitySubType EGameActivitySubType_MAX =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX;
  static const int EGameActivitySubType_ARRAYSIZE =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameActivitySubType_descriptor() {
    return ReqAckJoinActivity_EGameActivitySubType_descriptor();
  }
  static inline const ::std::string& EGameActivitySubType_Name(EGameActivitySubType value) {
    return ReqAckJoinActivity_EGameActivitySubType_Name(value);
  }
  static inline bool EGameActivitySubType_Parse(const ::std::string& name,
      EGameActivitySubType* value) {
    return ReqAckJoinActivity_EGameActivitySubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  void clear_activity_type();
  static const int kActivityTypeFieldNumber = 1;
  ::AFMsg::ReqAckJoinActivity_EGameActivityType activity_type() const;
  void set_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivityType value);

  // .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  void clear_sub_activity_type();
  static const int kSubActivityTypeFieldNumber = 2;
  ::AFMsg::ReqAckJoinActivity_EGameActivitySubType sub_activity_type() const;
  void set_sub_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivitySubType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int activity_type_;
  int sub_activity_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinActivityImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSearchOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSearchOppnent) */ {
 public:
  ReqAckSearchOppnent();
  virtual ~ReqAckSearchOppnent();

  ReqAckSearchOppnent(const ReqAckSearchOppnent& from);

  inline ReqAckSearchOppnent& operator=(const ReqAckSearchOppnent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckSearchOppnent(ReqAckSearchOppnent&& from) noexcept
    : ReqAckSearchOppnent() {
    *this = ::std::move(from);
  }

  inline ReqAckSearchOppnent& operator=(ReqAckSearchOppnent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSearchOppnent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSearchOppnent* internal_default_instance() {
    return reinterpret_cast<const ReqAckSearchOppnent*>(
               &_ReqAckSearchOppnent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ReqAckSearchOppnent* other);
  friend void swap(ReqAckSearchOppnent& a, ReqAckSearchOppnent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSearchOppnent* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSearchOppnent>(NULL);
  }

  ReqAckSearchOppnent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckSearchOppnent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckSearchOppnent& from);
  void MergeFrom(const ReqAckSearchOppnent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckSearchOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.EBattleType search_type = 1;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 1;
  ::AFMsg::EBattleType search_type() const;
  void set_search_type(::AFMsg::EBattleType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSearchOppnent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int search_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSearchOppnentImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckBattleOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckBattleOppnent) */ {
 public:
  ReqAckBattleOppnent();
  virtual ~ReqAckBattleOppnent();

  ReqAckBattleOppnent(const ReqAckBattleOppnent& from);

  inline ReqAckBattleOppnent& operator=(const ReqAckBattleOppnent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckBattleOppnent(ReqAckBattleOppnent&& from) noexcept
    : ReqAckBattleOppnent() {
    *this = ::std::move(from);
  }

  inline ReqAckBattleOppnent& operator=(ReqAckBattleOppnent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckBattleOppnent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckBattleOppnent* internal_default_instance() {
    return reinterpret_cast<const ReqAckBattleOppnent*>(
               &_ReqAckBattleOppnent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ReqAckBattleOppnent* other);
  friend void swap(ReqAckBattleOppnent& a, ReqAckBattleOppnent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckBattleOppnent* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckBattleOppnent>(NULL);
  }

  ReqAckBattleOppnent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckBattleOppnent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckBattleOppnent& from);
  void MergeFrom(const ReqAckBattleOppnent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckBattleOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.EBattleType battle_type = 1;
  void clear_battle_type();
  static const int kBattleTypeFieldNumber = 1;
  ::AFMsg::EBattleType battle_type() const;
  void set_battle_type(::AFMsg::EBattleType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckBattleOppnent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int battle_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckBattleOppnentImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateGuild) */ {
 public:
  ReqAckCreateGuild();
  virtual ~ReqAckCreateGuild();

  ReqAckCreateGuild(const ReqAckCreateGuild& from);

  inline ReqAckCreateGuild& operator=(const ReqAckCreateGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCreateGuild(ReqAckCreateGuild&& from) noexcept
    : ReqAckCreateGuild() {
    *this = ::std::move(from);
  }

  inline ReqAckCreateGuild& operator=(ReqAckCreateGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCreateGuild* internal_default_instance() {
    return reinterpret_cast<const ReqAckCreateGuild*>(
               &_ReqAckCreateGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(ReqAckCreateGuild* other);
  friend void swap(ReqAckCreateGuild& a, ReqAckCreateGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCreateGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateGuild>(NULL);
  }

  ReqAckCreateGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckCreateGuild& from);
  void MergeFrom(const ReqAckCreateGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckCreateGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string guild_name = 2;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::AFMsg::Ident* guild_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSearchGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSearchGuild) */ {
 public:
  ReqSearchGuild();
  virtual ~ReqSearchGuild();

  ReqSearchGuild(const ReqSearchGuild& from);

  inline ReqSearchGuild& operator=(const ReqSearchGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSearchGuild(ReqSearchGuild&& from) noexcept
    : ReqSearchGuild() {
    *this = ::std::move(from);
  }

  inline ReqSearchGuild& operator=(ReqSearchGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSearchGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSearchGuild* internal_default_instance() {
    return reinterpret_cast<const ReqSearchGuild*>(
               &_ReqSearchGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ReqSearchGuild* other);
  friend void swap(ReqSearchGuild& a, ReqSearchGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSearchGuild>(NULL);
  }

  ReqSearchGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSearchGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSearchGuild& from);
  void MergeFrom(const ReqSearchGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSearchGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string guild_name = 1;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 1;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSearchGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSearchGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchGuild_SearchGuildObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSearchGuild.SearchGuildObject) */ {
 public:
  AckSearchGuild_SearchGuildObject();
  virtual ~AckSearchGuild_SearchGuildObject();

  AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from);

  inline AckSearchGuild_SearchGuildObject& operator=(const AckSearchGuild_SearchGuildObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSearchGuild_SearchGuildObject(AckSearchGuild_SearchGuildObject&& from) noexcept
    : AckSearchGuild_SearchGuildObject() {
    *this = ::std::move(from);
  }

  inline AckSearchGuild_SearchGuildObject& operator=(AckSearchGuild_SearchGuildObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchGuild_SearchGuildObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSearchGuild_SearchGuildObject* internal_default_instance() {
    return reinterpret_cast<const AckSearchGuild_SearchGuildObject*>(
               &_AckSearchGuild_SearchGuildObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(AckSearchGuild_SearchGuildObject* other);
  friend void swap(AckSearchGuild_SearchGuildObject& a, AckSearchGuild_SearchGuildObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSearchGuild_SearchGuildObject* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSearchGuild_SearchGuildObject>(NULL);
  }

  AckSearchGuild_SearchGuildObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSearchGuild_SearchGuildObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckSearchGuild_SearchGuildObject& from);
  void MergeFrom(const AckSearchGuild_SearchGuildObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckSearchGuild_SearchGuildObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string guild_name = 2;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // string guild_icon = 3;
  void clear_guild_icon();
  static const int kGuildIconFieldNumber = 3;
  const ::std::string& guild_icon() const;
  void set_guild_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_icon(::std::string&& value);
  #endif
  void set_guild_icon(const char* value);
  void set_guild_icon(const char* value, size_t size);
  ::std::string* mutable_guild_icon();
  ::std::string* release_guild_icon();
  void set_allocated_guild_icon(::std::string* guild_icon);

  // .AFMsg.Ident guild_ID = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIDFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // int32 guild_member_count = 4;
  void clear_guild_member_count();
  static const int kGuildMemberCountFieldNumber = 4;
  ::google::protobuf::int32 guild_member_count() const;
  void set_guild_member_count(::google::protobuf::int32 value);

  // int32 guild_member_max_count = 5;
  void clear_guild_member_max_count();
  static const int kGuildMemberMaxCountFieldNumber = 5;
  ::google::protobuf::int32 guild_member_max_count() const;
  void set_guild_member_max_count(::google::protobuf::int32 value);

  // int32 guild_honor = 6;
  void clear_guild_honor();
  static const int kGuildHonorFieldNumber = 6;
  ::google::protobuf::int32 guild_honor() const;
  void set_guild_honor(::google::protobuf::int32 value);

  // int32 guild_rank = 7;
  void clear_guild_rank();
  static const int kGuildRankFieldNumber = 7;
  ::google::protobuf::int32 guild_rank() const;
  void set_guild_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckSearchGuild.SearchGuildObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_icon_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::int32 guild_member_count_;
  ::google::protobuf::int32 guild_member_max_count_;
  ::google::protobuf::int32 guild_honor_;
  ::google::protobuf::int32 guild_rank_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild_SearchGuildObjectImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSearchGuild) */ {
 public:
  AckSearchGuild();
  virtual ~AckSearchGuild();

  AckSearchGuild(const AckSearchGuild& from);

  inline AckSearchGuild& operator=(const AckSearchGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSearchGuild(AckSearchGuild&& from) noexcept
    : AckSearchGuild() {
    *this = ::std::move(from);
  }

  inline AckSearchGuild& operator=(AckSearchGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSearchGuild* internal_default_instance() {
    return reinterpret_cast<const AckSearchGuild*>(
               &_AckSearchGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(AckSearchGuild* other);
  friend void swap(AckSearchGuild& a, AckSearchGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSearchGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSearchGuild>(NULL);
  }

  AckSearchGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSearchGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckSearchGuild& from);
  void MergeFrom(const AckSearchGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckSearchGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AckSearchGuild_SearchGuildObject SearchGuildObject;

  // accessors -------------------------------------------------------

  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  int guild_list_size() const;
  void clear_guild_list();
  static const int kGuildListFieldNumber = 1;
  ::AFMsg::AckSearchGuild_SearchGuildObject* mutable_guild_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >*
      mutable_guild_list();
  const ::AFMsg::AckSearchGuild_SearchGuildObject& guild_list(int index) const;
  ::AFMsg::AckSearchGuild_SearchGuildObject* add_guild_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >&
      guild_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckSearchGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject > guild_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinGuild) */ {
 public:
  ReqAckJoinGuild();
  virtual ~ReqAckJoinGuild();

  ReqAckJoinGuild(const ReqAckJoinGuild& from);

  inline ReqAckJoinGuild& operator=(const ReqAckJoinGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckJoinGuild(ReqAckJoinGuild&& from) noexcept
    : ReqAckJoinGuild() {
    *this = ::std::move(from);
  }

  inline ReqAckJoinGuild& operator=(ReqAckJoinGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckJoinGuild* internal_default_instance() {
    return reinterpret_cast<const ReqAckJoinGuild*>(
               &_ReqAckJoinGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ReqAckJoinGuild* other);
  friend void swap(ReqAckJoinGuild& a, ReqAckJoinGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckJoinGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinGuild>(NULL);
  }

  ReqAckJoinGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckJoinGuild& from);
  void MergeFrom(const ReqAckJoinGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckJoinGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string guild_name = 2;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::AFMsg::Ident* guild_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckLeaveGuild) */ {
 public:
  ReqAckLeaveGuild();
  virtual ~ReqAckLeaveGuild();

  ReqAckLeaveGuild(const ReqAckLeaveGuild& from);

  inline ReqAckLeaveGuild& operator=(const ReqAckLeaveGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckLeaveGuild(ReqAckLeaveGuild&& from) noexcept
    : ReqAckLeaveGuild() {
    *this = ::std::move(from);
  }

  inline ReqAckLeaveGuild& operator=(ReqAckLeaveGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckLeaveGuild* internal_default_instance() {
    return reinterpret_cast<const ReqAckLeaveGuild*>(
               &_ReqAckLeaveGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ReqAckLeaveGuild* other);
  friend void swap(ReqAckLeaveGuild& a, ReqAckLeaveGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLeaveGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckLeaveGuild>(NULL);
  }

  ReqAckLeaveGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckLeaveGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckLeaveGuild& from);
  void MergeFrom(const ReqAckLeaveGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckLeaveGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string guild_name = 2;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckLeaveGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::AFMsg::Ident* guild_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprGuildMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprGuildMember) */ {
 public:
  ReqAckOprGuildMember();
  virtual ~ReqAckOprGuildMember();

  ReqAckOprGuildMember(const ReqAckOprGuildMember& from);

  inline ReqAckOprGuildMember& operator=(const ReqAckOprGuildMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckOprGuildMember(ReqAckOprGuildMember&& from) noexcept
    : ReqAckOprGuildMember() {
    *this = ::std::move(from);
  }

  inline ReqAckOprGuildMember& operator=(ReqAckOprGuildMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprGuildMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckOprGuildMember* internal_default_instance() {
    return reinterpret_cast<const ReqAckOprGuildMember*>(
               &_ReqAckOprGuildMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(ReqAckOprGuildMember* other);
  friend void swap(ReqAckOprGuildMember& a, ReqAckOprGuildMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckOprGuildMember* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprGuildMember>(NULL);
  }

  ReqAckOprGuildMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprGuildMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckOprGuildMember& from);
  void MergeFrom(const ReqAckOprGuildMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckOprGuildMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckOprGuildMember_EGGuildMemberOprType EGGuildMemberOprType;
  static const EGGuildMemberOprType EGAT_DOWN =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN;
  static const EGGuildMemberOprType EGAT_UP =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_UP;
  static const EGGuildMemberOprType EGAT_KICK =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICK;
  static const EGGuildMemberOprType EGAT_APPOINT =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_APPOINT;
  static const EGGuildMemberOprType EGAT_FIRE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_FIRE;
  static const EGGuildMemberOprType EGAT_DEMISE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DEMISE;
  static const EGGuildMemberOprType EGAT_ACCEPTAPPLY =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_ACCEPTAPPLY;
  static const EGGuildMemberOprType EGAT_DENYAPPLY =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DENYAPPLY;
  static const EGGuildMemberOprType EGAT_KICKOUT =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT;
  static inline bool EGGuildMemberOprType_IsValid(int value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value);
  }
  static const EGGuildMemberOprType EGGuildMemberOprType_MIN =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MIN;
  static const EGGuildMemberOprType EGGuildMemberOprType_MAX =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX;
  static const int EGGuildMemberOprType_ARRAYSIZE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGGuildMemberOprType_descriptor() {
    return ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
  }
  static inline const ::std::string& EGGuildMemberOprType_Name(EGGuildMemberOprType value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_Name(value);
  }
  static inline bool EGGuildMemberOprType_Parse(const ::std::string& name,
      EGGuildMemberOprType* value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // .AFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  const ::AFMsg::Ident& member_id() const;
  ::AFMsg::Ident* release_member_id();
  ::AFMsg::Ident* mutable_member_id();
  void set_allocated_member_id(::AFMsg::Ident* member_id);

  // .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType type() const;
  void set_type(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprGuildMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* member_id_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuildMemberImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprGuild) */ {
 public:
  ReqAckOprGuild();
  virtual ~ReqAckOprGuild();

  ReqAckOprGuild(const ReqAckOprGuild& from);

  inline ReqAckOprGuild& operator=(const ReqAckOprGuild& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckOprGuild(ReqAckOprGuild&& from) noexcept
    : ReqAckOprGuild() {
    *this = ::std::move(from);
  }

  inline ReqAckOprGuild& operator=(ReqAckOprGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckOprGuild* internal_default_instance() {
    return reinterpret_cast<const ReqAckOprGuild*>(
               &_ReqAckOprGuild_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(ReqAckOprGuild* other);
  friend void swap(ReqAckOprGuild& a, ReqAckOprGuild& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckOprGuild* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprGuild>(NULL);
  }

  ReqAckOprGuild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprGuild>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckOprGuild& from);
  void MergeFrom(const ReqAckOprGuild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckOprGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckOprGuild_EGGuildOprType EGGuildOprType;
  static const EGGuildOprType EGAT_NONE =
    ReqAckOprGuild_EGGuildOprType_EGAT_NONE;
  static const EGGuildOprType EGAT_APPLYDISMISS =
    ReqAckOprGuild_EGGuildOprType_EGAT_APPLYDISMISS;
  static const EGGuildOprType EGAT_STOPDISMISS =
    ReqAckOprGuild_EGGuildOprType_EGAT_STOPDISMISS;
  static const EGGuildOprType EGAT_SETRECRUIT =
    ReqAckOprGuild_EGGuildOprType_EGAT_SETRECRUIT;
  static const EGGuildOprType EGAT_PUBLISHRECRUIT =
    ReqAckOprGuild_EGGuildOprType_EGAT_PUBLISHRECRUIT;
  static const EGGuildOprType EGAT_EDITAD =
    ReqAckOprGuild_EGGuildOprType_EGAT_EDITAD;
  static const EGGuildOprType EGAT_LEVELUP =
    ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP;
  static inline bool EGGuildOprType_IsValid(int value) {
    return ReqAckOprGuild_EGGuildOprType_IsValid(value);
  }
  static const EGGuildOprType EGGuildOprType_MIN =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MIN;
  static const EGGuildOprType EGGuildOprType_MAX =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX;
  static const int EGGuildOprType_ARRAYSIZE =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGGuildOprType_descriptor() {
    return ReqAckOprGuild_EGGuildOprType_descriptor();
  }
  static inline const ::std::string& EGGuildOprType_Name(EGGuildOprType value) {
    return ReqAckOprGuild_EGGuildOprType_Name(value);
  }
  static inline bool EGGuildOprType_Parse(const ::std::string& name,
      EGGuildOprType* value) {
    return ReqAckOprGuild_EGGuildOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Recruit_data = 4;
  void clear_recruit_data();
  static const int kRecruitDataFieldNumber = 4;
  const ::std::string& recruit_data() const;
  void set_recruit_data(const ::std::string& value);
  #if LANG_CXX11
  void set_recruit_data(::std::string&& value);
  #endif
  void set_recruit_data(const char* value);
  void set_recruit_data(const char* value, size_t size);
  ::std::string* mutable_recruit_data();
  ::std::string* release_recruit_data();
  void set_allocated_recruit_data(::std::string* recruit_data);

  // string Ad_data = 5;
  void clear_ad_data();
  static const int kAdDataFieldNumber = 5;
  const ::std::string& ad_data() const;
  void set_ad_data(const ::std::string& value);
  #if LANG_CXX11
  void set_ad_data(::std::string&& value);
  #endif
  void set_ad_data(const char* value);
  void set_ad_data(const char* value, size_t size);
  ::std::string* mutable_ad_data();
  ::std::string* release_ad_data();
  void set_allocated_ad_data(::std::string* ad_data);

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // .AFMsg.Ident player_id = 2;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  const ::AFMsg::Ident& player_id() const;
  ::AFMsg::Ident* release_player_id();
  ::AFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::AFMsg::Ident* player_id);

  // .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprGuild_EGGuildOprType type() const;
  void set_type(::AFMsg::ReqAckOprGuild_EGGuildOprType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recruit_data_;
  ::google::protobuf::internal::ArenaStringPtr ad_data_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* player_id_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuildImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckDonateGuildItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckDonateGuildItem) */ {
 public:
  ReqAckDonateGuildItem();
  virtual ~ReqAckDonateGuildItem();

  ReqAckDonateGuildItem(const ReqAckDonateGuildItem& from);

  inline ReqAckDonateGuildItem& operator=(const ReqAckDonateGuildItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckDonateGuildItem(ReqAckDonateGuildItem&& from) noexcept
    : ReqAckDonateGuildItem() {
    *this = ::std::move(from);
  }

  inline ReqAckDonateGuildItem& operator=(ReqAckDonateGuildItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckDonateGuildItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckDonateGuildItem* internal_default_instance() {
    return reinterpret_cast<const ReqAckDonateGuildItem*>(
               &_ReqAckDonateGuildItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ReqAckDonateGuildItem* other);
  friend void swap(ReqAckDonateGuildItem& a, ReqAckDonateGuildItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckDonateGuildItem* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckDonateGuildItem>(NULL);
  }

  ReqAckDonateGuildItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckDonateGuildItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckDonateGuildItem& from);
  void MergeFrom(const ReqAckDonateGuildItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckDonateGuildItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ItemStruct item_list = 3;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 3;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // .AFMsg.Ident target_id = 2;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  const ::AFMsg::Ident& target_id() const;
  ::AFMsg::Ident* release_target_id();
  ::AFMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::AFMsg::Ident* target_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckDonateGuildItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* target_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckDonateGuildItemImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqGuildEctypeInfo) */ {
 public:
  ReqGuildEctypeInfo();
  virtual ~ReqGuildEctypeInfo();

  ReqGuildEctypeInfo(const ReqGuildEctypeInfo& from);

  inline ReqGuildEctypeInfo& operator=(const ReqGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqGuildEctypeInfo(ReqGuildEctypeInfo&& from) noexcept
    : ReqGuildEctypeInfo() {
    *this = ::std::move(from);
  }

  inline ReqGuildEctypeInfo& operator=(ReqGuildEctypeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGuildEctypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGuildEctypeInfo* internal_default_instance() {
    return reinterpret_cast<const ReqGuildEctypeInfo*>(
               &_ReqGuildEctypeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ReqGuildEctypeInfo* other);
  friend void swap(ReqGuildEctypeInfo& a, ReqGuildEctypeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGuildEctypeInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqGuildEctypeInfo>(NULL);
  }

  ReqGuildEctypeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqGuildEctypeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqGuildEctypeInfo& from);
  void MergeFrom(const ReqGuildEctypeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqGuildEctypeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* guild_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGuildEctypeInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.GuildEctypeInfo) */ {
 public:
  GuildEctypeInfo();
  virtual ~GuildEctypeInfo();

  GuildEctypeInfo(const GuildEctypeInfo& from);

  inline GuildEctypeInfo& operator=(const GuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GuildEctypeInfo(GuildEctypeInfo&& from) noexcept
    : GuildEctypeInfo() {
    *this = ::std::move(from);
  }

  inline GuildEctypeInfo& operator=(GuildEctypeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildEctypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildEctypeInfo* internal_default_instance() {
    return reinterpret_cast<const GuildEctypeInfo*>(
               &_GuildEctypeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(GuildEctypeInfo* other);
  friend void swap(GuildEctypeInfo& a, GuildEctypeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuildEctypeInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GuildEctypeInfo>(NULL);
  }

  GuildEctypeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GuildEctypeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GuildEctypeInfo& from);
  void MergeFrom(const GuildEctypeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // int64 server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::int64 server_id() const;
  void set_server_id(::google::protobuf::int64 value);

  // int64 Ectype_id = 3;
  void clear_ectype_id();
  static const int kEctypeIdFieldNumber = 3;
  ::google::protobuf::int64 ectype_id() const;
  void set_ectype_id(::google::protobuf::int64 value);

  // int64 Ectype_Group = 4;
  void clear_ectype_group();
  static const int kEctypeGroupFieldNumber = 4;
  ::google::protobuf::int64 ectype_group() const;
  void set_ectype_group(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.GuildEctypeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::int64 server_id_;
  ::google::protobuf::int64 ectype_id_;
  ::google::protobuf::int64 ectype_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsGuildEctypeInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckGuildEctypeInfo) */ {
 public:
  AckGuildEctypeInfo();
  virtual ~AckGuildEctypeInfo();

  AckGuildEctypeInfo(const AckGuildEctypeInfo& from);

  inline AckGuildEctypeInfo& operator=(const AckGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckGuildEctypeInfo(AckGuildEctypeInfo&& from) noexcept
    : AckGuildEctypeInfo() {
    *this = ::std::move(from);
  }

  inline AckGuildEctypeInfo& operator=(AckGuildEctypeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGuildEctypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckGuildEctypeInfo* internal_default_instance() {
    return reinterpret_cast<const AckGuildEctypeInfo*>(
               &_AckGuildEctypeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(AckGuildEctypeInfo* other);
  friend void swap(AckGuildEctypeInfo& a, AckGuildEctypeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckGuildEctypeInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckGuildEctypeInfo>(NULL);
  }

  AckGuildEctypeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckGuildEctypeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckGuildEctypeInfo& from);
  void MergeFrom(const AckGuildEctypeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  bool has_xectypeinfo() const;
  void clear_xectypeinfo();
  static const int kXectypeinfoFieldNumber = 2;
  const ::AFMsg::GuildEctypeInfo& xectypeinfo() const;
  ::AFMsg::GuildEctypeInfo* release_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* mutable_xectypeinfo();
  void set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo);

  // @@protoc_insertion_point(class_scope:AFMsg.AckGuildEctypeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::GuildEctypeInfo* xectypeinfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGuildEctypeInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT SetGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.SetGuildEctypeInfo) */ {
 public:
  SetGuildEctypeInfo();
  virtual ~SetGuildEctypeInfo();

  SetGuildEctypeInfo(const SetGuildEctypeInfo& from);

  inline SetGuildEctypeInfo& operator=(const SetGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetGuildEctypeInfo(SetGuildEctypeInfo&& from) noexcept
    : SetGuildEctypeInfo() {
    *this = ::std::move(from);
  }

  inline SetGuildEctypeInfo& operator=(SetGuildEctypeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildEctypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGuildEctypeInfo* internal_default_instance() {
    return reinterpret_cast<const SetGuildEctypeInfo*>(
               &_SetGuildEctypeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(SetGuildEctypeInfo* other);
  friend void swap(SetGuildEctypeInfo& a, SetGuildEctypeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetGuildEctypeInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SetGuildEctypeInfo>(NULL);
  }

  SetGuildEctypeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SetGuildEctypeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetGuildEctypeInfo& from);
  void MergeFrom(const SetGuildEctypeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  bool has_xectypeinfo() const;
  void clear_xectypeinfo();
  static const int kXectypeinfoFieldNumber = 2;
  const ::AFMsg::GuildEctypeInfo& xectypeinfo() const;
  ::AFMsg::GuildEctypeInfo* release_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* mutable_xectypeinfo();
  void set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo);

  // @@protoc_insertion_point(class_scope:AFMsg.SetGuildEctypeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::GuildEctypeInfo* xectypeinfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsSetGuildEctypeInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqEnterGuildEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqEnterGuildEctype) */ {
 public:
  ReqEnterGuildEctype();
  virtual ~ReqEnterGuildEctype();

  ReqEnterGuildEctype(const ReqEnterGuildEctype& from);

  inline ReqEnterGuildEctype& operator=(const ReqEnterGuildEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqEnterGuildEctype(ReqEnterGuildEctype&& from) noexcept
    : ReqEnterGuildEctype() {
    *this = ::std::move(from);
  }

  inline ReqEnterGuildEctype& operator=(ReqEnterGuildEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGuildEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterGuildEctype* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGuildEctype*>(
               &_ReqEnterGuildEctype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(ReqEnterGuildEctype* other);
  friend void swap(ReqEnterGuildEctype& a, ReqEnterGuildEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGuildEctype* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqEnterGuildEctype>(NULL);
  }

  ReqEnterGuildEctype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqEnterGuildEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqEnterGuildEctype& from);
  void MergeFrom(const ReqEnterGuildEctype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqEnterGuildEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqEnterGuildEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGuildEctypeImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ChatInfo) */ {
 public:
  ChatInfo();
  virtual ~ChatInfo();

  ChatInfo(const ChatInfo& from);

  inline ChatInfo& operator=(const ChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatInfo(ChatInfo&& from) noexcept
    : ChatInfo() {
    *this = ::std::move(from);
  }

  inline ChatInfo& operator=(ChatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatInfo* internal_default_instance() {
    return reinterpret_cast<const ChatInfo*>(
               &_ChatInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ChatInfo* other);
  friend void swap(ChatInfo& a, ChatInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatInfo>(NULL);
  }

  ChatInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatInfo& from);
  void MergeFrom(const ChatInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatInfo_EChatType EChatType;
  static const EChatType ECHATTYPE_NORMAL =
    ChatInfo_EChatType_ECHATTYPE_NORMAL;
  static const EChatType ECHATTYPE_PRIVATE =
    ChatInfo_EChatType_ECHATTYPE_PRIVATE;
  static const EChatType ECHATTYPE_GUILD =
    ChatInfo_EChatType_ECHATTYPE_GUILD;
  static const EChatType ECHATTYPE_WORLD =
    ChatInfo_EChatType_ECHATTYPE_WORLD;
  static inline bool EChatType_IsValid(int value) {
    return ChatInfo_EChatType_IsValid(value);
  }
  static const EChatType EChatType_MIN =
    ChatInfo_EChatType_EChatType_MIN;
  static const EChatType EChatType_MAX =
    ChatInfo_EChatType_EChatType_MAX;
  static const int EChatType_ARRAYSIZE =
    ChatInfo_EChatType_EChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EChatType_descriptor() {
    return ChatInfo_EChatType_descriptor();
  }
  static inline const ::std::string& EChatType_Name(EChatType value) {
    return ChatInfo_EChatType_Name(value);
  }
  static inline bool EChatType_Parse(const ::std::string& name,
      EChatType* value) {
    return ChatInfo_EChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident recvier_id = 8;
  int recvier_id_size() const;
  void clear_recvier_id();
  static const int kRecvierIdFieldNumber = 8;
  ::AFMsg::Ident* mutable_recvier_id(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_recvier_id();
  const ::AFMsg::Ident& recvier_id(int index) const;
  ::AFMsg::Ident* add_recvier_id();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      recvier_id() const;

  // bytes chat_info = 2;
  void clear_chat_info();
  static const int kChatInfoFieldNumber = 2;
  const ::std::string& chat_info() const;
  void set_chat_info(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_info(::std::string&& value);
  #endif
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  ::std::string* mutable_chat_info();
  ::std::string* release_chat_info();
  void set_allocated_chat_info(::std::string* chat_info);

  // bytes addtional_info = 4;
  void clear_addtional_info();
  static const int kAddtionalInfoFieldNumber = 4;
  const ::std::string& addtional_info() const;
  void set_addtional_info(const ::std::string& value);
  #if LANG_CXX11
  void set_addtional_info(::std::string&& value);
  #endif
  void set_addtional_info(const char* value);
  void set_addtional_info(const void* value, size_t size);
  ::std::string* mutable_addtional_info();
  ::std::string* release_addtional_info();
  void set_allocated_addtional_info(::std::string* addtional_info);

  // bytes send_name = 6;
  void clear_send_name();
  static const int kSendNameFieldNumber = 6;
  const ::std::string& send_name() const;
  void set_send_name(const ::std::string& value);
  #if LANG_CXX11
  void set_send_name(::std::string&& value);
  #endif
  void set_send_name(const char* value);
  void set_send_name(const void* value, size_t size);
  ::std::string* mutable_send_name();
  ::std::string* release_send_name();
  void set_allocated_send_name(::std::string* send_name);

  // bytes guid_name = 9;
  void clear_guid_name();
  static const int kGuidNameFieldNumber = 9;
  const ::std::string& guid_name() const;
  void set_guid_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guid_name(::std::string&& value);
  #endif
  void set_guid_name(const char* value);
  void set_guid_name(const void* value, size_t size);
  ::std::string* mutable_guid_name();
  ::std::string* release_guid_name();
  void set_allocated_guid_name(::std::string* guid_name);

  // .AFMsg.Ident send_id = 5;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 5;
  const ::AFMsg::Ident& send_id() const;
  ::AFMsg::Ident* release_send_id();
  ::AFMsg::Ident* mutable_send_id();
  void set_allocated_send_id(::AFMsg::Ident* send_id);

  // int64 chat_time = 3;
  void clear_chat_time();
  static const int kChatTimeFieldNumber = 3;
  ::google::protobuf::int64 chat_time() const;
  void set_chat_time(::google::protobuf::int64 value);

  // .AFMsg.ChatInfo.EChatType chat_type = 1;
  void clear_chat_type();
  static const int kChatTypeFieldNumber = 1;
  ::AFMsg::ChatInfo_EChatType chat_type() const;
  void set_chat_type(::AFMsg::ChatInfo_EChatType value);

  // int32 send_level = 7;
  void clear_send_level();
  static const int kSendLevelFieldNumber = 7;
  ::google::protobuf::int32 send_level() const;
  void set_send_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ChatInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > recvier_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_info_;
  ::google::protobuf::internal::ArenaStringPtr addtional_info_;
  ::google::protobuf::internal::ArenaStringPtr send_name_;
  ::google::protobuf::internal::ArenaStringPtr guid_name_;
  ::AFMsg::Ident* send_id_;
  ::google::protobuf::int64 chat_time_;
  int chat_type_;
  ::google::protobuf::int32 send_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsChatInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateChatGroup) */ {
 public:
  ReqAckCreateChatGroup();
  virtual ~ReqAckCreateChatGroup();

  ReqAckCreateChatGroup(const ReqAckCreateChatGroup& from);

  inline ReqAckCreateChatGroup& operator=(const ReqAckCreateChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCreateChatGroup(ReqAckCreateChatGroup&& from) noexcept
    : ReqAckCreateChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqAckCreateChatGroup& operator=(ReqAckCreateChatGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateChatGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCreateChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqAckCreateChatGroup*>(
               &_ReqAckCreateChatGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(ReqAckCreateChatGroup* other);
  friend void swap(ReqAckCreateChatGroup& a, ReqAckCreateChatGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCreateChatGroup* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateChatGroup>(NULL);
  }

  ReqAckCreateChatGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateChatGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckCreateChatGroup& from);
  void MergeFrom(const ReqAckCreateChatGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckCreateChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .AFMsg.Ident selfid = 2;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 2;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident xChatGroupid = 3;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 3;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* release_xchatgroupid();
  ::AFMsg::Ident* mutable_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // int32 chatType = 4;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 4;
  ::google::protobuf::int32 chattype() const;
  void set_chattype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateChatGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int32 chattype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateChatGroupImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckjoinChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckjoinChatGroup) */ {
 public:
  ReqAckjoinChatGroup();
  virtual ~ReqAckjoinChatGroup();

  ReqAckjoinChatGroup(const ReqAckjoinChatGroup& from);

  inline ReqAckjoinChatGroup& operator=(const ReqAckjoinChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckjoinChatGroup(ReqAckjoinChatGroup&& from) noexcept
    : ReqAckjoinChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqAckjoinChatGroup& operator=(ReqAckjoinChatGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckjoinChatGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckjoinChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqAckjoinChatGroup*>(
               &_ReqAckjoinChatGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(ReqAckjoinChatGroup* other);
  friend void swap(ReqAckjoinChatGroup& a, ReqAckjoinChatGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckjoinChatGroup* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckjoinChatGroup>(NULL);
  }

  ReqAckjoinChatGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckjoinChatGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckjoinChatGroup& from);
  void MergeFrom(const ReqAckjoinChatGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckjoinChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident xChatGroupid = 2;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* release_xchatgroupid();
  ::AFMsg::Ident* mutable_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // int64 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int64 result() const;
  void set_result(::google::protobuf::int64 value);

  // int32 chatType = 4;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 4;
  ::google::protobuf::int32 chattype() const;
  void set_chattype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckjoinChatGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int64 result_;
  ::google::protobuf::int32 chattype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckjoinChatGroupImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckQuitChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckQuitChatGroup) */ {
 public:
  ReqAckQuitChatGroup();
  virtual ~ReqAckQuitChatGroup();

  ReqAckQuitChatGroup(const ReqAckQuitChatGroup& from);

  inline ReqAckQuitChatGroup& operator=(const ReqAckQuitChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckQuitChatGroup(ReqAckQuitChatGroup&& from) noexcept
    : ReqAckQuitChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqAckQuitChatGroup& operator=(ReqAckQuitChatGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckQuitChatGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckQuitChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqAckQuitChatGroup*>(
               &_ReqAckQuitChatGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(ReqAckQuitChatGroup* other);
  friend void swap(ReqAckQuitChatGroup& a, ReqAckQuitChatGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckQuitChatGroup* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckQuitChatGroup>(NULL);
  }

  ReqAckQuitChatGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckQuitChatGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckQuitChatGroup& from);
  void MergeFrom(const ReqAckQuitChatGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckQuitChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident xChatGroupid = 2;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* release_xchatgroupid();
  ::AFMsg::Ident* mutable_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // int64 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int64 result() const;
  void set_result(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckQuitChatGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int64 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckQuitChatGroupImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSubscriptionChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSubscriptionChatGroup) */ {
 public:
  ReqSubscriptionChatGroup();
  virtual ~ReqSubscriptionChatGroup();

  ReqSubscriptionChatGroup(const ReqSubscriptionChatGroup& from);

  inline ReqSubscriptionChatGroup& operator=(const ReqSubscriptionChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSubscriptionChatGroup(ReqSubscriptionChatGroup&& from) noexcept
    : ReqSubscriptionChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqSubscriptionChatGroup& operator=(ReqSubscriptionChatGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSubscriptionChatGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSubscriptionChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqSubscriptionChatGroup*>(
               &_ReqSubscriptionChatGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(ReqSubscriptionChatGroup* other);
  friend void swap(ReqSubscriptionChatGroup& a, ReqSubscriptionChatGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSubscriptionChatGroup* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSubscriptionChatGroup>(NULL);
  }

  ReqSubscriptionChatGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSubscriptionChatGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSubscriptionChatGroup& from);
  void MergeFrom(const ReqSubscriptionChatGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSubscriptionChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident xChatGroupid = 2;
  int xchatgroupid_size() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  ::AFMsg::Ident* mutable_xchatgroupid(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xchatgroupid();
  const ::AFMsg::Ident& xchatgroupid(int index) const;
  ::AFMsg::Ident* add_xchatgroupid();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xchatgroupid() const;

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSubscriptionChatGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xchatgroupid_;
  ::AFMsg::Ident* selfid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSubscriptionChatGroupImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCancelSubscriptionChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCancelSubscriptionChatGroup) */ {
 public:
  ReqCancelSubscriptionChatGroup();
  virtual ~ReqCancelSubscriptionChatGroup();

  ReqCancelSubscriptionChatGroup(const ReqCancelSubscriptionChatGroup& from);

  inline ReqCancelSubscriptionChatGroup& operator=(const ReqCancelSubscriptionChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCancelSubscriptionChatGroup(ReqCancelSubscriptionChatGroup&& from) noexcept
    : ReqCancelSubscriptionChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqCancelSubscriptionChatGroup& operator=(ReqCancelSubscriptionChatGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCancelSubscriptionChatGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCancelSubscriptionChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqCancelSubscriptionChatGroup*>(
               &_ReqCancelSubscriptionChatGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(ReqCancelSubscriptionChatGroup* other);
  friend void swap(ReqCancelSubscriptionChatGroup& a, ReqCancelSubscriptionChatGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCancelSubscriptionChatGroup* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCancelSubscriptionChatGroup>(NULL);
  }

  ReqCancelSubscriptionChatGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCancelSubscriptionChatGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqCancelSubscriptionChatGroup& from);
  void MergeFrom(const ReqCancelSubscriptionChatGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqCancelSubscriptionChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident xChatGroupid = 2;
  int xchatgroupid_size() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  ::AFMsg::Ident* mutable_xchatgroupid(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xchatgroupid();
  const ::AFMsg::Ident& xchatgroupid(int index) const;
  ::AFMsg::Ident* add_xchatgroupid();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xchatgroupid() const;

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCancelSubscriptionChatGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xchatgroupid_;
  ::AFMsg::Ident* selfid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCancelSubscriptionChatGroupImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqIntensifylevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqIntensifylevelToEquip) */ {
 public:
  ReqIntensifylevelToEquip();
  virtual ~ReqIntensifylevelToEquip();

  ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from);

  inline ReqIntensifylevelToEquip& operator=(const ReqIntensifylevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqIntensifylevelToEquip(ReqIntensifylevelToEquip&& from) noexcept
    : ReqIntensifylevelToEquip() {
    *this = ::std::move(from);
  }

  inline ReqIntensifylevelToEquip& operator=(ReqIntensifylevelToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqIntensifylevelToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqIntensifylevelToEquip* internal_default_instance() {
    return reinterpret_cast<const ReqIntensifylevelToEquip*>(
               &_ReqIntensifylevelToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(ReqIntensifylevelToEquip* other);
  friend void swap(ReqIntensifylevelToEquip& a, ReqIntensifylevelToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqIntensifylevelToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqIntensifylevelToEquip>(NULL);
  }

  ReqIntensifylevelToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqIntensifylevelToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqIntensifylevelToEquip& from);
  void MergeFrom(const ReqIntensifylevelToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqIntensifylevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqIntensifylevelToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqIntensifylevelToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckIntensifylevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckIntensifylevelToEquip) */ {
 public:
  AckIntensifylevelToEquip();
  virtual ~AckIntensifylevelToEquip();

  AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from);

  inline AckIntensifylevelToEquip& operator=(const AckIntensifylevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckIntensifylevelToEquip(AckIntensifylevelToEquip&& from) noexcept
    : AckIntensifylevelToEquip() {
    *this = ::std::move(from);
  }

  inline AckIntensifylevelToEquip& operator=(AckIntensifylevelToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckIntensifylevelToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckIntensifylevelToEquip* internal_default_instance() {
    return reinterpret_cast<const AckIntensifylevelToEquip*>(
               &_AckIntensifylevelToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(AckIntensifylevelToEquip* other);
  friend void swap(AckIntensifylevelToEquip& a, AckIntensifylevelToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckIntensifylevelToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckIntensifylevelToEquip>(NULL);
  }

  AckIntensifylevelToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckIntensifylevelToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckIntensifylevelToEquip& from);
  void MergeFrom(const AckIntensifylevelToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckIntensifylevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // int32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckIntensifylevelToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckIntensifylevelToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHoleToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHoleToEquip) */ {
 public:
  ReqHoleToEquip();
  virtual ~ReqHoleToEquip();

  ReqHoleToEquip(const ReqHoleToEquip& from);

  inline ReqHoleToEquip& operator=(const ReqHoleToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqHoleToEquip(ReqHoleToEquip&& from) noexcept
    : ReqHoleToEquip() {
    *this = ::std::move(from);
  }

  inline ReqHoleToEquip& operator=(ReqHoleToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHoleToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHoleToEquip* internal_default_instance() {
    return reinterpret_cast<const ReqHoleToEquip*>(
               &_ReqHoleToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(ReqHoleToEquip* other);
  friend void swap(ReqHoleToEquip& a, ReqHoleToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqHoleToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHoleToEquip>(NULL);
  }

  ReqHoleToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHoleToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqHoleToEquip& from);
  void MergeFrom(const ReqHoleToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqHoleToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHoleToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoleToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckHoleToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckHoleToEquip) */ {
 public:
  AckHoleToEquip();
  virtual ~AckHoleToEquip();

  AckHoleToEquip(const AckHoleToEquip& from);

  inline AckHoleToEquip& operator=(const AckHoleToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckHoleToEquip(AckHoleToEquip&& from) noexcept
    : AckHoleToEquip() {
    *this = ::std::move(from);
  }

  inline AckHoleToEquip& operator=(AckHoleToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHoleToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckHoleToEquip* internal_default_instance() {
    return reinterpret_cast<const AckHoleToEquip*>(
               &_AckHoleToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(AckHoleToEquip* other);
  friend void swap(AckHoleToEquip& a, AckHoleToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckHoleToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckHoleToEquip>(NULL);
  }

  AckHoleToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckHoleToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckHoleToEquip& from);
  void MergeFrom(const AckHoleToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckHoleToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // int32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckHoleToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoleToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqInlaystoneToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqInlaystoneToEquip) */ {
 public:
  ReqInlaystoneToEquip();
  virtual ~ReqInlaystoneToEquip();

  ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from);

  inline ReqInlaystoneToEquip& operator=(const ReqInlaystoneToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqInlaystoneToEquip(ReqInlaystoneToEquip&& from) noexcept
    : ReqInlaystoneToEquip() {
    *this = ::std::move(from);
  }

  inline ReqInlaystoneToEquip& operator=(ReqInlaystoneToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqInlaystoneToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqInlaystoneToEquip* internal_default_instance() {
    return reinterpret_cast<const ReqInlaystoneToEquip*>(
               &_ReqInlaystoneToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(ReqInlaystoneToEquip* other);
  friend void swap(ReqInlaystoneToEquip& a, ReqInlaystoneToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqInlaystoneToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqInlaystoneToEquip>(NULL);
  }

  ReqInlaystoneToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqInlaystoneToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqInlaystoneToEquip& from);
  void MergeFrom(const ReqInlaystoneToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqInlaystoneToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes stoneid = 3;
  void clear_stoneid();
  static const int kStoneidFieldNumber = 3;
  const ::std::string& stoneid() const;
  void set_stoneid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoneid(::std::string&& value);
  #endif
  void set_stoneid(const char* value);
  void set_stoneid(const void* value, size_t size);
  ::std::string* mutable_stoneid();
  ::std::string* release_stoneid();
  void set_allocated_stoneid(::std::string* stoneid);

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // int32 hole_index = 4;
  void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  ::google::protobuf::int32 hole_index() const;
  void set_hole_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqInlaystoneToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoneid_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 hole_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqInlaystoneToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckInlaystoneToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckInlaystoneToEquip) */ {
 public:
  AckInlaystoneToEquip();
  virtual ~AckInlaystoneToEquip();

  AckInlaystoneToEquip(const AckInlaystoneToEquip& from);

  inline AckInlaystoneToEquip& operator=(const AckInlaystoneToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckInlaystoneToEquip(AckInlaystoneToEquip&& from) noexcept
    : AckInlaystoneToEquip() {
    *this = ::std::move(from);
  }

  inline AckInlaystoneToEquip& operator=(AckInlaystoneToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckInlaystoneToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckInlaystoneToEquip* internal_default_instance() {
    return reinterpret_cast<const AckInlaystoneToEquip*>(
               &_AckInlaystoneToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(AckInlaystoneToEquip* other);
  friend void swap(AckInlaystoneToEquip& a, AckInlaystoneToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckInlaystoneToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckInlaystoneToEquip>(NULL);
  }

  AckInlaystoneToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckInlaystoneToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckInlaystoneToEquip& from);
  void MergeFrom(const AckInlaystoneToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckInlaystoneToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // int32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckInlaystoneToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckInlaystoneToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqElementlevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqElementlevelToEquip) */ {
 public:
  ReqElementlevelToEquip();
  virtual ~ReqElementlevelToEquip();

  ReqElementlevelToEquip(const ReqElementlevelToEquip& from);

  inline ReqElementlevelToEquip& operator=(const ReqElementlevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqElementlevelToEquip(ReqElementlevelToEquip&& from) noexcept
    : ReqElementlevelToEquip() {
    *this = ::std::move(from);
  }

  inline ReqElementlevelToEquip& operator=(ReqElementlevelToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqElementlevelToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqElementlevelToEquip* internal_default_instance() {
    return reinterpret_cast<const ReqElementlevelToEquip*>(
               &_ReqElementlevelToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(ReqElementlevelToEquip* other);
  friend void swap(ReqElementlevelToEquip& a, ReqElementlevelToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqElementlevelToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqElementlevelToEquip>(NULL);
  }

  ReqElementlevelToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqElementlevelToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqElementlevelToEquip& from);
  void MergeFrom(const ReqElementlevelToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqElementlevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // .AFMsg.EGameElementType eElementType = 3;
  void clear_eelementtype();
  static const int kEElementTypeFieldNumber = 3;
  ::AFMsg::EGameElementType eelementtype() const;
  void set_eelementtype(::AFMsg::EGameElementType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqElementlevelToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  int eelementtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqElementlevelToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckElementlevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckElementlevelToEquip) */ {
 public:
  AckElementlevelToEquip();
  virtual ~AckElementlevelToEquip();

  AckElementlevelToEquip(const AckElementlevelToEquip& from);

  inline AckElementlevelToEquip& operator=(const AckElementlevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckElementlevelToEquip(AckElementlevelToEquip&& from) noexcept
    : AckElementlevelToEquip() {
    *this = ::std::move(from);
  }

  inline AckElementlevelToEquip& operator=(AckElementlevelToEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckElementlevelToEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckElementlevelToEquip* internal_default_instance() {
    return reinterpret_cast<const AckElementlevelToEquip*>(
               &_AckElementlevelToEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(AckElementlevelToEquip* other);
  friend void swap(AckElementlevelToEquip& a, AckElementlevelToEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckElementlevelToEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckElementlevelToEquip>(NULL);
  }

  AckElementlevelToEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckElementlevelToEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckElementlevelToEquip& from);
  void MergeFrom(const AckElementlevelToEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckElementlevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // int32 result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckElementlevelToEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckElementlevelToEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSetFightHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSetFightHero) */ {
 public:
  ReqSetFightHero();
  virtual ~ReqSetFightHero();

  ReqSetFightHero(const ReqSetFightHero& from);

  inline ReqSetFightHero& operator=(const ReqSetFightHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSetFightHero(ReqSetFightHero&& from) noexcept
    : ReqSetFightHero() {
    *this = ::std::move(from);
  }

  inline ReqSetFightHero& operator=(ReqSetFightHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSetFightHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSetFightHero* internal_default_instance() {
    return reinterpret_cast<const ReqSetFightHero*>(
               &_ReqSetFightHero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(ReqSetFightHero* other);
  friend void swap(ReqSetFightHero& a, ReqSetFightHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSetFightHero* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSetFightHero>(NULL);
  }

  ReqSetFightHero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSetFightHero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSetFightHero& from);
  void MergeFrom(const ReqSetFightHero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSetFightHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident Heroid = 2;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 2;
  const ::AFMsg::Ident& heroid() const;
  ::AFMsg::Ident* release_heroid();
  ::AFMsg::Ident* mutable_heroid();
  void set_allocated_heroid(::AFMsg::Ident* heroid);

  // int32 FightPos = 3;
  void clear_fightpos();
  static const int kFightPosFieldNumber = 3;
  ::google::protobuf::int32 fightpos() const;
  void set_fightpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSetFightHero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* heroid_;
  ::google::protobuf::int32 fightpos_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSetFightHeroImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqWearEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqWearEquip) */ {
 public:
  ReqWearEquip();
  virtual ~ReqWearEquip();

  ReqWearEquip(const ReqWearEquip& from);

  inline ReqWearEquip& operator=(const ReqWearEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqWearEquip(ReqWearEquip&& from) noexcept
    : ReqWearEquip() {
    *this = ::std::move(from);
  }

  inline ReqWearEquip& operator=(ReqWearEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWearEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqWearEquip* internal_default_instance() {
    return reinterpret_cast<const ReqWearEquip*>(
               &_ReqWearEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(ReqWearEquip* other);
  friend void swap(ReqWearEquip& a, ReqWearEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqWearEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqWearEquip>(NULL);
  }

  ReqWearEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqWearEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqWearEquip& from);
  void MergeFrom(const ReqWearEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqWearEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // .AFMsg.Ident Targetid = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 3;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* release_targetid();
  ::AFMsg::Ident* mutable_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqWearEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::AFMsg::Ident* targetid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqWearEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TakeOffEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TakeOffEquip) */ {
 public:
  TakeOffEquip();
  virtual ~TakeOffEquip();

  TakeOffEquip(const TakeOffEquip& from);

  inline TakeOffEquip& operator=(const TakeOffEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeOffEquip(TakeOffEquip&& from) noexcept
    : TakeOffEquip() {
    *this = ::std::move(from);
  }

  inline TakeOffEquip& operator=(TakeOffEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeOffEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeOffEquip* internal_default_instance() {
    return reinterpret_cast<const TakeOffEquip*>(
               &_TakeOffEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(TakeOffEquip* other);
  friend void swap(TakeOffEquip& a, TakeOffEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeOffEquip* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TakeOffEquip>(NULL);
  }

  TakeOffEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TakeOffEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeOffEquip& from);
  void MergeFrom(const TakeOffEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeOffEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* release_equipid();
  ::AFMsg::Ident* mutable_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // .AFMsg.Ident Targetid = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 3;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* release_targetid();
  ::AFMsg::Ident* mutable_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.TakeOffEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::AFMsg::Ident* targetid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsTakeOffEquipImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMiningTitle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMiningTitle) */ {
 public:
  ReqMiningTitle();
  virtual ~ReqMiningTitle();

  ReqMiningTitle(const ReqMiningTitle& from);

  inline ReqMiningTitle& operator=(const ReqMiningTitle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqMiningTitle(ReqMiningTitle&& from) noexcept
    : ReqMiningTitle() {
    *this = ::std::move(from);
  }

  inline ReqMiningTitle& operator=(ReqMiningTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMiningTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqMiningTitle* internal_default_instance() {
    return reinterpret_cast<const ReqMiningTitle*>(
               &_ReqMiningTitle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(ReqMiningTitle* other);
  friend void swap(ReqMiningTitle& a, ReqMiningTitle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqMiningTitle* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMiningTitle>(NULL);
  }

  ReqMiningTitle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMiningTitle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqMiningTitle& from);
  void MergeFrom(const ReqMiningTitle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqMiningTitle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMiningTitle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMiningTitleImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSendMail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSendMail) */ {
 public:
  ReqSendMail();
  virtual ~ReqSendMail();

  ReqSendMail(const ReqSendMail& from);

  inline ReqSendMail& operator=(const ReqSendMail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSendMail(ReqSendMail&& from) noexcept
    : ReqSendMail() {
    *this = ::std::move(from);
  }

  inline ReqSendMail& operator=(ReqSendMail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendMail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSendMail* internal_default_instance() {
    return reinterpret_cast<const ReqSendMail*>(
               &_ReqSendMail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(ReqSendMail* other);
  friend void swap(ReqSendMail& a, ReqSendMail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSendMail* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSendMail>(NULL);
  }

  ReqSendMail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSendMail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSendMail& from);
  void MergeFrom(const ReqSendMail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSendMail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ItemStruct item_list = 3;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 3;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  int currency_list_size() const;
  void clear_currency_list();
  static const int kCurrencyListFieldNumber = 4;
  ::AFMsg::CurrencyStruct* mutable_currency_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >*
      mutable_currency_list();
  const ::AFMsg::CurrencyStruct& currency_list(int index) const;
  ::AFMsg::CurrencyStruct* add_currency_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >&
      currency_list() const;

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident reciever = 2;
  bool has_reciever() const;
  void clear_reciever();
  static const int kRecieverFieldNumber = 2;
  const ::AFMsg::Ident& reciever() const;
  ::AFMsg::Ident* release_reciever();
  ::AFMsg::Ident* mutable_reciever();
  void set_allocated_reciever(::AFMsg::Ident* reciever);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSendMail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct > currency_list_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* reciever_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSendMailImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSwitchServer) */ {
 public:
  ReqSwitchServer();
  virtual ~ReqSwitchServer();

  ReqSwitchServer(const ReqSwitchServer& from);

  inline ReqSwitchServer& operator=(const ReqSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSwitchServer(ReqSwitchServer&& from) noexcept
    : ReqSwitchServer() {
    *this = ::std::move(from);
  }

  inline ReqSwitchServer& operator=(ReqSwitchServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSwitchServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSwitchServer* internal_default_instance() {
    return reinterpret_cast<const ReqSwitchServer*>(
               &_ReqSwitchServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(ReqSwitchServer* other);
  friend void swap(ReqSwitchServer& a, ReqSwitchServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSwitchServer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSwitchServer>(NULL);
  }

  ReqSwitchServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqSwitchServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSwitchServer& from);
  void MergeFrom(const ReqSwitchServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // .AFMsg.Ident client_id = 6;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  const ::AFMsg::Ident& client_id() const;
  ::AFMsg::Ident* release_client_id();
  ::AFMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::AFMsg::Ident* client_id);

  // int64 self_serverid = 2;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // int64 target_serverid = 3;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // int64 gate_serverid = 4;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // int64 SceneID = 5;
  void clear_sceneid();
  static const int kSceneIDFieldNumber = 5;
  ::google::protobuf::int64 sceneid() const;
  void set_sceneid(::google::protobuf::int64 value);

  // int64 groupID = 7;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 7;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSwitchServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* client_id_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  ::google::protobuf::int64 sceneid_;
  ::google::protobuf::int64 groupid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSwitchServerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSwitchServer) */ {
 public:
  AckSwitchServer();
  virtual ~AckSwitchServer();

  AckSwitchServer(const AckSwitchServer& from);

  inline AckSwitchServer& operator=(const AckSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSwitchServer(AckSwitchServer&& from) noexcept
    : AckSwitchServer() {
    *this = ::std::move(from);
  }

  inline AckSwitchServer& operator=(AckSwitchServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSwitchServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSwitchServer* internal_default_instance() {
    return reinterpret_cast<const AckSwitchServer*>(
               &_AckSwitchServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(AckSwitchServer* other);
  friend void swap(AckSwitchServer& a, AckSwitchServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSwitchServer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSwitchServer>(NULL);
  }

  AckSwitchServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckSwitchServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckSwitchServer& from);
  void MergeFrom(const AckSwitchServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* release_selfid();
  ::AFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // int64 self_serverid = 2;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // int64 target_serverid = 3;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // int64 gate_serverid = 4;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckSwitchServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSwitchServerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamInfo(TeamInfo&& from) noexcept
    : TeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamInfo& operator=(TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(TeamInfo* other);
  friend void swap(TeamInfo& a, TeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TeamInfo>(NULL);
  }

  TeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TeamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  int teammemberinfo_size() const;
  void clear_teammemberinfo();
  static const int kTeammemberInfoFieldNumber = 3;
  ::AFMsg::TeammemberInfo* mutable_teammemberinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >*
      mutable_teammemberinfo();
  const ::AFMsg::TeammemberInfo& teammemberinfo(int index) const;
  ::AFMsg::TeammemberInfo* add_teammemberinfo();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >&
      teammemberinfo() const;

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.Ident captain_id = 2;
  bool has_captain_id() const;
  void clear_captain_id();
  static const int kCaptainIdFieldNumber = 2;
  const ::AFMsg::Ident& captain_id() const;
  ::AFMsg::Ident* release_captain_id();
  ::AFMsg::Ident* mutable_captain_id();
  void set_allocated_captain_id(::AFMsg::Ident* captain_id);

  // @@protoc_insertion_point(class_scope:AFMsg.TeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo > teammemberinfo_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* captain_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TeammemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TeammemberInfo) */ {
 public:
  TeammemberInfo();
  virtual ~TeammemberInfo();

  TeammemberInfo(const TeammemberInfo& from);

  inline TeammemberInfo& operator=(const TeammemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeammemberInfo(TeammemberInfo&& from) noexcept
    : TeammemberInfo() {
    *this = ::std::move(from);
  }

  inline TeammemberInfo& operator=(TeammemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeammemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeammemberInfo* internal_default_instance() {
    return reinterpret_cast<const TeammemberInfo*>(
               &_TeammemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(TeammemberInfo* other);
  friend void swap(TeammemberInfo& a, TeammemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeammemberInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TeammemberInfo>(NULL);
  }

  TeammemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TeammemberInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeammemberInfo& from);
  void MergeFrom(const TeammemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeammemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string HeadIcon = 5;
  void clear_headicon();
  static const int kHeadIconFieldNumber = 5;
  const ::std::string& headicon() const;
  void set_headicon(const ::std::string& value);
  #if LANG_CXX11
  void set_headicon(::std::string&& value);
  #endif
  void set_headicon(const char* value);
  void set_headicon(const char* value, size_t size);
  ::std::string* mutable_headicon();
  ::std::string* release_headicon();
  void set_allocated_headicon(::std::string* headicon);

  // .AFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  const ::AFMsg::Ident& player_id() const;
  ::AFMsg::Ident* release_player_id();
  ::AFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::AFMsg::Ident* player_id);

  // int32 nLevel = 3;
  void clear_nlevel();
  static const int kNLevelFieldNumber = 3;
  ::google::protobuf::int32 nlevel() const;
  void set_nlevel(::google::protobuf::int32 value);

  // int32 job = 4;
  void clear_job();
  static const int kJobFieldNumber = 4;
  ::google::protobuf::int32 job() const;
  void set_job(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.TeammemberInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr headicon_;
  ::AFMsg::Ident* player_id_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 job_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsTeammemberInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateTeam) */ {
 public:
  ReqAckCreateTeam();
  virtual ~ReqAckCreateTeam();

  ReqAckCreateTeam(const ReqAckCreateTeam& from);

  inline ReqAckCreateTeam& operator=(const ReqAckCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCreateTeam(ReqAckCreateTeam&& from) noexcept
    : ReqAckCreateTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckCreateTeam& operator=(ReqAckCreateTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCreateTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckCreateTeam*>(
               &_ReqAckCreateTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(ReqAckCreateTeam* other);
  friend void swap(ReqAckCreateTeam& a, ReqAckCreateTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCreateTeam* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateTeam>(NULL);
  }

  ReqAckCreateTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckCreateTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckCreateTeam& from);
  void MergeFrom(const ReqAckCreateTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckCreateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* release_xteaminfo();
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateTeamImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinTeam) */ {
 public:
  ReqAckJoinTeam();
  virtual ~ReqAckJoinTeam();

  ReqAckJoinTeam(const ReqAckJoinTeam& from);

  inline ReqAckJoinTeam& operator=(const ReqAckJoinTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckJoinTeam(ReqAckJoinTeam&& from) noexcept
    : ReqAckJoinTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckJoinTeam& operator=(ReqAckJoinTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckJoinTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckJoinTeam*>(
               &_ReqAckJoinTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(ReqAckJoinTeam* other);
  friend void swap(ReqAckJoinTeam& a, ReqAckJoinTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckJoinTeam* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinTeam>(NULL);
  }

  ReqAckJoinTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckJoinTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckJoinTeam& from);
  void MergeFrom(const ReqAckJoinTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckJoinTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* release_xteaminfo();
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinTeamImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckLeaveTeam) */ {
 public:
  ReqAckLeaveTeam();
  virtual ~ReqAckLeaveTeam();

  ReqAckLeaveTeam(const ReqAckLeaveTeam& from);

  inline ReqAckLeaveTeam& operator=(const ReqAckLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckLeaveTeam(ReqAckLeaveTeam&& from) noexcept
    : ReqAckLeaveTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckLeaveTeam& operator=(ReqAckLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckLeaveTeam*>(
               &_ReqAckLeaveTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(ReqAckLeaveTeam* other);
  friend void swap(ReqAckLeaveTeam& a, ReqAckLeaveTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLeaveTeam* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckLeaveTeam>(NULL);
  }

  ReqAckLeaveTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckLeaveTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckLeaveTeam& from);
  void MergeFrom(const ReqAckLeaveTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckLeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* release_xteaminfo();
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckLeaveTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveTeamImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprTeamMember) */ {
 public:
  ReqAckOprTeamMember();
  virtual ~ReqAckOprTeamMember();

  ReqAckOprTeamMember(const ReqAckOprTeamMember& from);

  inline ReqAckOprTeamMember& operator=(const ReqAckOprTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckOprTeamMember(ReqAckOprTeamMember&& from) noexcept
    : ReqAckOprTeamMember() {
    *this = ::std::move(from);
  }

  inline ReqAckOprTeamMember& operator=(ReqAckOprTeamMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprTeamMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckOprTeamMember* internal_default_instance() {
    return reinterpret_cast<const ReqAckOprTeamMember*>(
               &_ReqAckOprTeamMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ReqAckOprTeamMember* other);
  friend void swap(ReqAckOprTeamMember& a, ReqAckOprTeamMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckOprTeamMember* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprTeamMember>(NULL);
  }

  ReqAckOprTeamMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckOprTeamMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckOprTeamMember& from);
  void MergeFrom(const ReqAckOprTeamMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckOprTeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqAckOprTeamMember_EGTeamMemberOprType EGTeamMemberOprType;
  static const EGTeamMemberOprType EGAT_DOWN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
  static const EGTeamMemberOprType EGAT_UP =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP;
  static const EGTeamMemberOprType EGAT_KICK =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK;
  static const EGTeamMemberOprType EGAT_APPOINT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT;
  static const EGTeamMemberOprType EGAT_FIRE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE;
  static const EGTeamMemberOprType EGAT_DEMISE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE;
  static const EGTeamMemberOprType EGAT_ACCEPTAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY;
  static const EGTeamMemberOprType EGAT_DENYAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY;
  static const EGTeamMemberOprType EGAT_KICKOUT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
  static inline bool EGTeamMemberOprType_IsValid(int value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value);
  }
  static const EGTeamMemberOprType EGTeamMemberOprType_MIN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN;
  static const EGTeamMemberOprType EGTeamMemberOprType_MAX =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX;
  static const int EGTeamMemberOprType_ARRAYSIZE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGTeamMemberOprType_descriptor() {
    return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
  }
  static inline const ::std::string& EGTeamMemberOprType_Name(EGTeamMemberOprType value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Name(value);
  }
  static inline bool EGTeamMemberOprType_Parse(const ::std::string& name,
      EGTeamMemberOprType* value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  const ::AFMsg::Ident& member_id() const;
  ::AFMsg::Ident* release_member_id();
  ::AFMsg::Ident* mutable_member_id();
  void set_allocated_member_id(::AFMsg::Ident* member_id);

  // .AFMsg.TeamInfo xTeamInfo = 4;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 4;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* release_xteaminfo();
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType type() const;
  void set_type(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprTeamMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* member_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprTeamMemberImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckInviteTeam) */ {
 public:
  ReqAckInviteTeam();
  virtual ~ReqAckInviteTeam();

  ReqAckInviteTeam(const ReqAckInviteTeam& from);

  inline ReqAckInviteTeam& operator=(const ReqAckInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckInviteTeam(ReqAckInviteTeam&& from) noexcept
    : ReqAckInviteTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckInviteTeam& operator=(ReqAckInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckInviteTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckInviteTeam*>(
               &_ReqAckInviteTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(ReqAckInviteTeam* other);
  friend void swap(ReqAckInviteTeam& a, ReqAckInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckInviteTeam* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckInviteTeam>(NULL);
  }

  ReqAckInviteTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqAckInviteTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAckInviteTeam& from);
  void MergeFrom(const ReqAckInviteTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAckInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // .AFMsg.Ident invite_target_id = 3;
  bool has_invite_target_id() const;
  void clear_invite_target_id();
  static const int kInviteTargetIdFieldNumber = 3;
  const ::AFMsg::Ident& invite_target_id() const;
  ::AFMsg::Ident* release_invite_target_id();
  ::AFMsg::Ident* mutable_invite_target_id();
  void set_allocated_invite_target_id(::AFMsg::Ident* invite_target_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::Ident* invite_target_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckInviteTeamImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqTeamEnterEctype) */ {
 public:
  ReqTeamEnterEctype();
  virtual ~ReqTeamEnterEctype();

  ReqTeamEnterEctype(const ReqTeamEnterEctype& from);

  inline ReqTeamEnterEctype& operator=(const ReqTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqTeamEnterEctype(ReqTeamEnterEctype&& from) noexcept
    : ReqTeamEnterEctype() {
    *this = ::std::move(from);
  }

  inline ReqTeamEnterEctype& operator=(ReqTeamEnterEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTeamEnterEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqTeamEnterEctype* internal_default_instance() {
    return reinterpret_cast<const ReqTeamEnterEctype*>(
               &_ReqTeamEnterEctype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(ReqTeamEnterEctype* other);
  friend void swap(ReqTeamEnterEctype& a, ReqTeamEnterEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqTeamEnterEctype* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqTeamEnterEctype>(NULL);
  }

  ReqTeamEnterEctype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqTeamEnterEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqTeamEnterEctype& from);
  void MergeFrom(const ReqTeamEnterEctype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // int32 nEctypeID = 3;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // int32 nGroupID = 4;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // int32 nResult = 5;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // int32 nServerID = 6;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 6;
  ::google::protobuf::int32 nserverid() const;
  void set_nserverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqTeamEnterEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  ::google::protobuf::int32 nserverid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqTeamEnterEctypeImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckTeamEnterEctype) */ {
 public:
  AckTeamEnterEctype();
  virtual ~AckTeamEnterEctype();

  AckTeamEnterEctype(const AckTeamEnterEctype& from);

  inline AckTeamEnterEctype& operator=(const AckTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckTeamEnterEctype(AckTeamEnterEctype&& from) noexcept
    : AckTeamEnterEctype() {
    *this = ::std::move(from);
  }

  inline AckTeamEnterEctype& operator=(AckTeamEnterEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTeamEnterEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckTeamEnterEctype* internal_default_instance() {
    return reinterpret_cast<const AckTeamEnterEctype*>(
               &_AckTeamEnterEctype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(AckTeamEnterEctype* other);
  friend void swap(AckTeamEnterEctype& a, AckTeamEnterEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckTeamEnterEctype* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckTeamEnterEctype>(NULL);
  }

  AckTeamEnterEctype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckTeamEnterEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckTeamEnterEctype& from);
  void MergeFrom(const AckTeamEnterEctype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // int32 nEctypeID = 3;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // int32 nGroupID = 4;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // int32 nResult = 5;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckTeamEnterEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckTeamEnterEctypeImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GridGuildBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.GridGuildBaseInfo) */ {
 public:
  GridGuildBaseInfo();
  virtual ~GridGuildBaseInfo();

  GridGuildBaseInfo(const GridGuildBaseInfo& from);

  inline GridGuildBaseInfo& operator=(const GridGuildBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GridGuildBaseInfo(GridGuildBaseInfo&& from) noexcept
    : GridGuildBaseInfo() {
    *this = ::std::move(from);
  }

  inline GridGuildBaseInfo& operator=(GridGuildBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridGuildBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridGuildBaseInfo* internal_default_instance() {
    return reinterpret_cast<const GridGuildBaseInfo*>(
               &_GridGuildBaseInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(GridGuildBaseInfo* other);
  friend void swap(GridGuildBaseInfo& a, GridGuildBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GridGuildBaseInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GridGuildBaseInfo>(NULL);
  }

  GridGuildBaseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GridGuildBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GridGuildBaseInfo& from);
  void MergeFrom(const GridGuildBaseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GridGuildBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes icon = 5;
  void clear_icon();
  static const int kIconFieldNumber = 5;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const void* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // .AFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::AFMsg::Ident& id() const;
  ::AFMsg::Ident* release_id();
  ::AFMsg::Ident* mutable_id();
  void set_allocated_id(::AFMsg::Ident* id);

  // int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // int32 resource = 4;
  void clear_resource();
  static const int kResourceFieldNumber = 4;
  ::google::protobuf::int32 resource() const;
  void set_resource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.GridGuildBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::AFMsg::Ident* id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqBigMapGridInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqBigMapGridInfo) */ {
 public:
  ReqBigMapGridInfo();
  virtual ~ReqBigMapGridInfo();

  ReqBigMapGridInfo(const ReqBigMapGridInfo& from);

  inline ReqBigMapGridInfo& operator=(const ReqBigMapGridInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqBigMapGridInfo(ReqBigMapGridInfo&& from) noexcept
    : ReqBigMapGridInfo() {
    *this = ::std::move(from);
  }

  inline ReqBigMapGridInfo& operator=(ReqBigMapGridInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBigMapGridInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqBigMapGridInfo* internal_default_instance() {
    return reinterpret_cast<const ReqBigMapGridInfo*>(
               &_ReqBigMapGridInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(ReqBigMapGridInfo* other);
  friend void swap(ReqBigMapGridInfo& a, ReqBigMapGridInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqBigMapGridInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqBigMapGridInfo>(NULL);
  }

  ReqBigMapGridInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqBigMapGridInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqBigMapGridInfo& from);
  void MergeFrom(const ReqBigMapGridInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqBigMapGridInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes map_title_id = 1;
  int map_title_id_size() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id(int index) const;
  ::std::string* mutable_map_title_id(int index);
  void set_map_title_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(int index, ::std::string&& value);
  #endif
  void set_map_title_id(int index, const char* value);
  void set_map_title_id(int index, const void* value, size_t size);
  ::std::string* add_map_title_id();
  void add_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void add_map_title_id(::std::string&& value);
  #endif
  void add_map_title_id(const char* value);
  void add_map_title_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& map_title_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map_title_id();

  // @@protoc_insertion_point(class_scope:AFMsg.ReqBigMapGridInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_title_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapGridInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapGridBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapGridBaseInfo) */ {
 public:
  BigMapGridBaseInfo();
  virtual ~BigMapGridBaseInfo();

  BigMapGridBaseInfo(const BigMapGridBaseInfo& from);

  inline BigMapGridBaseInfo& operator=(const BigMapGridBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigMapGridBaseInfo(BigMapGridBaseInfo&& from) noexcept
    : BigMapGridBaseInfo() {
    *this = ::std::move(from);
  }

  inline BigMapGridBaseInfo& operator=(BigMapGridBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapGridBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigMapGridBaseInfo* internal_default_instance() {
    return reinterpret_cast<const BigMapGridBaseInfo*>(
               &_BigMapGridBaseInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(BigMapGridBaseInfo* other);
  friend void swap(BigMapGridBaseInfo& a, BigMapGridBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigMapGridBaseInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapGridBaseInfo>(NULL);
  }

  BigMapGridBaseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapGridBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigMapGridBaseInfo& from);
  void MergeFrom(const BigMapGridBaseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigMapGridBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .AFMsg.GridGuildBaseInfo guild_info = 2;
  bool has_guild_info() const;
  void clear_guild_info();
  static const int kGuildInfoFieldNumber = 2;
  const ::AFMsg::GridGuildBaseInfo& guild_info() const;
  ::AFMsg::GridGuildBaseInfo* release_guild_info();
  ::AFMsg::GridGuildBaseInfo* mutable_guild_info();
  void set_allocated_guild_info(::AFMsg::GridGuildBaseInfo* guild_info);

  // .AFMsg.Ident kingwarrer = 11;
  bool has_kingwarrer() const;
  void clear_kingwarrer();
  static const int kKingwarrerFieldNumber = 11;
  const ::AFMsg::Ident& kingwarrer() const;
  ::AFMsg::Ident* release_kingwarrer();
  ::AFMsg::Ident* mutable_kingwarrer();
  void set_allocated_kingwarrer(::AFMsg::Ident* kingwarrer);

  // .AFMsg.Ident hurter = 21;
  bool has_hurter() const;
  void clear_hurter();
  static const int kHurterFieldNumber = 21;
  const ::AFMsg::Ident& hurter() const;
  ::AFMsg::Ident* release_hurter();
  ::AFMsg::Ident* mutable_hurter();
  void set_allocated_hurter(::AFMsg::Ident* hurter);

  // int32 kingwar_time = 10;
  void clear_kingwar_time();
  static const int kKingwarTimeFieldNumber = 10;
  ::google::protobuf::int32 kingwar_time() const;
  void set_kingwar_time(::google::protobuf::int32 value);

  // int32 hurting_time = 20;
  void clear_hurting_time();
  static const int kHurtingTimeFieldNumber = 20;
  ::google::protobuf::int32 hurting_time() const;
  void set_hurting_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapGridBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::AFMsg::GridGuildBaseInfo* guild_info_;
  ::AFMsg::Ident* kingwarrer_;
  ::AFMsg::Ident* hurter_;
  ::google::protobuf::int32 kingwar_time_;
  ::google::protobuf::int32 hurting_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridBaseInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapLeaveMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapLeaveMsg) */ {
 public:
  BigMapLeaveMsg();
  virtual ~BigMapLeaveMsg();

  BigMapLeaveMsg(const BigMapLeaveMsg& from);

  inline BigMapLeaveMsg& operator=(const BigMapLeaveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigMapLeaveMsg(BigMapLeaveMsg&& from) noexcept
    : BigMapLeaveMsg() {
    *this = ::std::move(from);
  }

  inline BigMapLeaveMsg& operator=(BigMapLeaveMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapLeaveMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigMapLeaveMsg* internal_default_instance() {
    return reinterpret_cast<const BigMapLeaveMsg*>(
               &_BigMapLeaveMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(BigMapLeaveMsg* other);
  friend void swap(BigMapLeaveMsg& a, BigMapLeaveMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigMapLeaveMsg* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapLeaveMsg>(NULL);
  }

  BigMapLeaveMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapLeaveMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigMapLeaveMsg& from);
  void MergeFrom(const BigMapLeaveMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigMapLeaveMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes owner_name = 2;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 2;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_name(::std::string&& value);
  #endif
  void set_owner_name(const char* value);
  void set_owner_name(const void* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // bytes msg_data = 3;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 3;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_data(::std::string&& value);
  #endif
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // .AFMsg.Ident owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::AFMsg::Ident& owner() const;
  ::AFMsg::Ident* release_owner();
  ::AFMsg::Ident* mutable_owner();
  void set_allocated_owner(::AFMsg::Ident* owner);

  // int32 msg_time = 4;
  void clear_msg_time();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::int32 msg_time() const;
  void set_msg_time(::google::protobuf::int32 value);

  // int32 owner_level = 5;
  void clear_owner_level();
  static const int kOwnerLevelFieldNumber = 5;
  ::google::protobuf::int32 owner_level() const;
  void set_owner_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapLeaveMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  ::AFMsg::Ident* owner_;
  ::google::protobuf::int32 msg_time_;
  ::google::protobuf::int32 owner_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapLeaveMsgImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapWarHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapWarHistory) */ {
 public:
  BigMapWarHistory();
  virtual ~BigMapWarHistory();

  BigMapWarHistory(const BigMapWarHistory& from);

  inline BigMapWarHistory& operator=(const BigMapWarHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigMapWarHistory(BigMapWarHistory&& from) noexcept
    : BigMapWarHistory() {
    *this = ::std::move(from);
  }

  inline BigMapWarHistory& operator=(BigMapWarHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapWarHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigMapWarHistory* internal_default_instance() {
    return reinterpret_cast<const BigMapWarHistory*>(
               &_BigMapWarHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(BigMapWarHistory* other);
  friend void swap(BigMapWarHistory& a, BigMapWarHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigMapWarHistory* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapWarHistory>(NULL);
  }

  BigMapWarHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapWarHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigMapWarHistory& from);
  void MergeFrom(const BigMapWarHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigMapWarHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.GridGuildBaseInfo red_info = 1;
  bool has_red_info() const;
  void clear_red_info();
  static const int kRedInfoFieldNumber = 1;
  const ::AFMsg::GridGuildBaseInfo& red_info() const;
  ::AFMsg::GridGuildBaseInfo* release_red_info();
  ::AFMsg::GridGuildBaseInfo* mutable_red_info();
  void set_allocated_red_info(::AFMsg::GridGuildBaseInfo* red_info);

  // .AFMsg.GridGuildBaseInfo blue_info = 2;
  bool has_blue_info() const;
  void clear_blue_info();
  static const int kBlueInfoFieldNumber = 2;
  const ::AFMsg::GridGuildBaseInfo& blue_info() const;
  ::AFMsg::GridGuildBaseInfo* release_blue_info();
  ::AFMsg::GridGuildBaseInfo* mutable_blue_info();
  void set_allocated_blue_info(::AFMsg::GridGuildBaseInfo* blue_info);

  // .AFMsg.Ident winner_id = 10;
  bool has_winner_id() const;
  void clear_winner_id();
  static const int kWinnerIdFieldNumber = 10;
  const ::AFMsg::Ident& winner_id() const;
  ::AFMsg::Ident* release_winner_id();
  ::AFMsg::Ident* mutable_winner_id();
  void set_allocated_winner_id(::AFMsg::Ident* winner_id);

  // int32 war_time = 11;
  void clear_war_time();
  static const int kWarTimeFieldNumber = 11;
  ::google::protobuf::int32 war_time() const;
  void set_war_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapWarHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::GridGuildBaseInfo* red_info_;
  ::AFMsg::GridGuildBaseInfo* blue_info_;
  ::AFMsg::Ident* winner_id_;
  ::google::protobuf::int32 war_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapWarHistoryImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapGridDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapGridDetailInfo) */ {
 public:
  BigMapGridDetailInfo();
  virtual ~BigMapGridDetailInfo();

  BigMapGridDetailInfo(const BigMapGridDetailInfo& from);

  inline BigMapGridDetailInfo& operator=(const BigMapGridDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigMapGridDetailInfo(BigMapGridDetailInfo&& from) noexcept
    : BigMapGridDetailInfo() {
    *this = ::std::move(from);
  }

  inline BigMapGridDetailInfo& operator=(BigMapGridDetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapGridDetailInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigMapGridDetailInfo* internal_default_instance() {
    return reinterpret_cast<const BigMapGridDetailInfo*>(
               &_BigMapGridDetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(BigMapGridDetailInfo* other);
  friend void swap(BigMapGridDetailInfo& a, BigMapGridDetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigMapGridDetailInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapGridDetailInfo>(NULL);
  }

  BigMapGridDetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BigMapGridDetailInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigMapGridDetailInfo& from);
  void MergeFrom(const BigMapGridDetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigMapGridDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  int stay_guid_list_size() const;
  void clear_stay_guid_list();
  static const int kStayGuidListFieldNumber = 2;
  ::AFMsg::GridGuildBaseInfo* mutable_stay_guid_list(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >*
      mutable_stay_guid_list();
  const ::AFMsg::GridGuildBaseInfo& stay_guid_list(int index) const;
  ::AFMsg::GridGuildBaseInfo* add_stay_guid_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >&
      stay_guid_list() const;

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  int leave_msg_size() const;
  void clear_leave_msg();
  static const int kLeaveMsgFieldNumber = 3;
  ::AFMsg::BigMapLeaveMsg* mutable_leave_msg(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >*
      mutable_leave_msg();
  const ::AFMsg::BigMapLeaveMsg& leave_msg(int index) const;
  ::AFMsg::BigMapLeaveMsg* add_leave_msg();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >&
      leave_msg() const;

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  int war_history_size() const;
  void clear_war_history();
  static const int kWarHistoryFieldNumber = 4;
  ::AFMsg::BigMapWarHistory* mutable_war_history(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >*
      mutable_war_history();
  const ::AFMsg::BigMapWarHistory& war_history(int index) const;
  ::AFMsg::BigMapWarHistory* add_war_history();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >&
      war_history() const;

  // .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  bool has_grid_base_info() const;
  void clear_grid_base_info();
  static const int kGridBaseInfoFieldNumber = 1;
  const ::AFMsg::BigMapGridBaseInfo& grid_base_info() const;
  ::AFMsg::BigMapGridBaseInfo* release_grid_base_info();
  ::AFMsg::BigMapGridBaseInfo* mutable_grid_base_info();
  void set_allocated_grid_base_info(::AFMsg::BigMapGridBaseInfo* grid_base_info);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapGridDetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo > stay_guid_list_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg > leave_msg_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory > war_history_;
  ::AFMsg::BigMapGridBaseInfo* grid_base_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridDetailInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckBigMapGridInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckBigMapGridInfo) */ {
 public:
  AckBigMapGridInfo();
  virtual ~AckBigMapGridInfo();

  AckBigMapGridInfo(const AckBigMapGridInfo& from);

  inline AckBigMapGridInfo& operator=(const AckBigMapGridInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckBigMapGridInfo(AckBigMapGridInfo&& from) noexcept
    : AckBigMapGridInfo() {
    *this = ::std::move(from);
  }

  inline AckBigMapGridInfo& operator=(AckBigMapGridInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBigMapGridInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckBigMapGridInfo* internal_default_instance() {
    return reinterpret_cast<const AckBigMapGridInfo*>(
               &_AckBigMapGridInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(AckBigMapGridInfo* other);
  friend void swap(AckBigMapGridInfo& a, AckBigMapGridInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckBigMapGridInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckBigMapGridInfo>(NULL);
  }

  AckBigMapGridInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckBigMapGridInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckBigMapGridInfo& from);
  void MergeFrom(const AckBigMapGridInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckBigMapGridInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  int map_data_size() const;
  void clear_map_data();
  static const int kMapDataFieldNumber = 1;
  ::AFMsg::BigMapGridDetailInfo* mutable_map_data(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >*
      mutable_map_data();
  const ::AFMsg::BigMapGridDetailInfo& map_data(int index) const;
  ::AFMsg::BigMapGridDetailInfo* add_map_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >&
      map_data() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckBigMapGridInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo > map_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapGridInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqBigMapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqBigMapInfo) */ {
 public:
  ReqBigMapInfo();
  virtual ~ReqBigMapInfo();

  ReqBigMapInfo(const ReqBigMapInfo& from);

  inline ReqBigMapInfo& operator=(const ReqBigMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqBigMapInfo(ReqBigMapInfo&& from) noexcept
    : ReqBigMapInfo() {
    *this = ::std::move(from);
  }

  inline ReqBigMapInfo& operator=(ReqBigMapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBigMapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqBigMapInfo* internal_default_instance() {
    return reinterpret_cast<const ReqBigMapInfo*>(
               &_ReqBigMapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(ReqBigMapInfo* other);
  friend void swap(ReqBigMapInfo& a, ReqBigMapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqBigMapInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqBigMapInfo>(NULL);
  }

  ReqBigMapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqBigMapInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqBigMapInfo& from);
  void MergeFrom(const ReqBigMapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqBigMapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqBigMapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckBigMapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckBigMapInfo) */ {
 public:
  AckBigMapInfo();
  virtual ~AckBigMapInfo();

  AckBigMapInfo(const AckBigMapInfo& from);

  inline AckBigMapInfo& operator=(const AckBigMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckBigMapInfo(AckBigMapInfo&& from) noexcept
    : AckBigMapInfo() {
    *this = ::std::move(from);
  }

  inline AckBigMapInfo& operator=(AckBigMapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBigMapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckBigMapInfo* internal_default_instance() {
    return reinterpret_cast<const AckBigMapInfo*>(
               &_AckBigMapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(AckBigMapInfo* other);
  friend void swap(AckBigMapInfo& a, AckBigMapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckBigMapInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckBigMapInfo>(NULL);
  }

  AckBigMapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckBigMapInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckBigMapInfo& from);
  void MergeFrom(const AckBigMapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckBigMapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  int grid_base_info_size() const;
  void clear_grid_base_info();
  static const int kGridBaseInfoFieldNumber = 1;
  ::AFMsg::BigMapGridBaseInfo* mutable_grid_base_info(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >*
      mutable_grid_base_info();
  const ::AFMsg::BigMapGridBaseInfo& grid_base_info(int index) const;
  ::AFMsg::BigMapGridBaseInfo* add_grid_base_info();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >&
      grid_base_info() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckBigMapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo > grid_base_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHoldMapGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHoldMapGrid) */ {
 public:
  ReqHoldMapGrid();
  virtual ~ReqHoldMapGrid();

  ReqHoldMapGrid(const ReqHoldMapGrid& from);

  inline ReqHoldMapGrid& operator=(const ReqHoldMapGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqHoldMapGrid(ReqHoldMapGrid&& from) noexcept
    : ReqHoldMapGrid() {
    *this = ::std::move(from);
  }

  inline ReqHoldMapGrid& operator=(ReqHoldMapGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHoldMapGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHoldMapGrid* internal_default_instance() {
    return reinterpret_cast<const ReqHoldMapGrid*>(
               &_ReqHoldMapGrid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(ReqHoldMapGrid* other);
  friend void swap(ReqHoldMapGrid& a, ReqHoldMapGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqHoldMapGrid* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHoldMapGrid>(NULL);
  }

  ReqHoldMapGrid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqHoldMapGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqHoldMapGrid& from);
  void MergeFrom(const ReqHoldMapGrid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqHoldMapGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_title_id = 1;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(::std::string&& value);
  #endif
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // .AFMsg.Ident guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* release_guild_id();
  ::AFMsg::Ident* mutable_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHoldMapGrid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  ::AFMsg::Ident* guild_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoldMapGridImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckHoldMapGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckHoldMapGrid) */ {
 public:
  AckHoldMapGrid();
  virtual ~AckHoldMapGrid();

  AckHoldMapGrid(const AckHoldMapGrid& from);

  inline AckHoldMapGrid& operator=(const AckHoldMapGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckHoldMapGrid(AckHoldMapGrid&& from) noexcept
    : AckHoldMapGrid() {
    *this = ::std::move(from);
  }

  inline AckHoldMapGrid& operator=(AckHoldMapGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHoldMapGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckHoldMapGrid* internal_default_instance() {
    return reinterpret_cast<const AckHoldMapGrid*>(
               &_AckHoldMapGrid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(AckHoldMapGrid* other);
  friend void swap(AckHoldMapGrid& a, AckHoldMapGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckHoldMapGrid* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckHoldMapGrid>(NULL);
  }

  AckHoldMapGrid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckHoldMapGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckHoldMapGrid& from);
  void MergeFrom(const AckHoldMapGrid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckHoldMapGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckHoldMapGrid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoldMapGridImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveMapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqLeaveMapMsg) */ {
 public:
  ReqLeaveMapMsg();
  virtual ~ReqLeaveMapMsg();

  ReqLeaveMapMsg(const ReqLeaveMapMsg& from);

  inline ReqLeaveMapMsg& operator=(const ReqLeaveMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLeaveMapMsg(ReqLeaveMapMsg&& from) noexcept
    : ReqLeaveMapMsg() {
    *this = ::std::move(from);
  }

  inline ReqLeaveMapMsg& operator=(ReqLeaveMapMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLeaveMapMsg* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveMapMsg*>(
               &_ReqLeaveMapMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(ReqLeaveMapMsg* other);
  friend void swap(ReqLeaveMapMsg& a, ReqLeaveMapMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveMapMsg* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLeaveMapMsg>(NULL);
  }

  ReqLeaveMapMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLeaveMapMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqLeaveMapMsg& from);
  void MergeFrom(const ReqLeaveMapMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqLeaveMapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_title_id = 1;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(::std::string&& value);
  #endif
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // .AFMsg.BigMapLeaveMsg leave_msg = 2;
  bool has_leave_msg() const;
  void clear_leave_msg();
  static const int kLeaveMsgFieldNumber = 2;
  const ::AFMsg::BigMapLeaveMsg& leave_msg() const;
  ::AFMsg::BigMapLeaveMsg* release_leave_msg();
  ::AFMsg::BigMapLeaveMsg* mutable_leave_msg();
  void set_allocated_leave_msg(::AFMsg::BigMapLeaveMsg* leave_msg);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqLeaveMapMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  ::AFMsg::BigMapLeaveMsg* leave_msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveMapMsgImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckLeaveMapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckLeaveMapMsg) */ {
 public:
  AckLeaveMapMsg();
  virtual ~AckLeaveMapMsg();

  AckLeaveMapMsg(const AckLeaveMapMsg& from);

  inline AckLeaveMapMsg& operator=(const AckLeaveMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckLeaveMapMsg(AckLeaveMapMsg&& from) noexcept
    : AckLeaveMapMsg() {
    *this = ::std::move(from);
  }

  inline AckLeaveMapMsg& operator=(AckLeaveMapMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLeaveMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckLeaveMapMsg* internal_default_instance() {
    return reinterpret_cast<const AckLeaveMapMsg*>(
               &_AckLeaveMapMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(AckLeaveMapMsg* other);
  friend void swap(AckLeaveMapMsg& a, AckLeaveMapMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckLeaveMapMsg* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLeaveMapMsg>(NULL);
  }

  AckLeaveMapMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLeaveMapMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckLeaveMapMsg& from);
  void MergeFrom(const AckLeaveMapMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckLeaveMapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckLeaveMapMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckLeaveMapMsgImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqGetMapAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqGetMapAward) */ {
 public:
  ReqGetMapAward();
  virtual ~ReqGetMapAward();

  ReqGetMapAward(const ReqGetMapAward& from);

  inline ReqGetMapAward& operator=(const ReqGetMapAward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqGetMapAward(ReqGetMapAward&& from) noexcept
    : ReqGetMapAward() {
    *this = ::std::move(from);
  }

  inline ReqGetMapAward& operator=(ReqGetMapAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetMapAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetMapAward* internal_default_instance() {
    return reinterpret_cast<const ReqGetMapAward*>(
               &_ReqGetMapAward_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(ReqGetMapAward* other);
  friend void swap(ReqGetMapAward& a, ReqGetMapAward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetMapAward* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqGetMapAward>(NULL);
  }

  ReqGetMapAward* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqGetMapAward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqGetMapAward& from);
  void MergeFrom(const ReqGetMapAward& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqGetMapAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_title_id = 1;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(::std::string&& value);
  #endif
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqGetMapAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGetMapAwardImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckGetMapAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckGetMapAward) */ {
 public:
  AckGetMapAward();
  virtual ~AckGetMapAward();

  AckGetMapAward(const AckGetMapAward& from);

  inline AckGetMapAward& operator=(const AckGetMapAward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckGetMapAward(AckGetMapAward&& from) noexcept
    : AckGetMapAward() {
    *this = ::std::move(from);
  }

  inline AckGetMapAward& operator=(AckGetMapAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGetMapAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckGetMapAward* internal_default_instance() {
    return reinterpret_cast<const AckGetMapAward*>(
               &_AckGetMapAward_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(AckGetMapAward* other);
  friend void swap(AckGetMapAward& a, AckGetMapAward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckGetMapAward* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckGetMapAward>(NULL);
  }

  AckGetMapAward* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckGetMapAward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckGetMapAward& from);
  void MergeFrom(const AckGetMapAward& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckGetMapAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckGetMapAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGetMapAwardImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMapHunting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMapHunting) */ {
 public:
  ReqMapHunting();
  virtual ~ReqMapHunting();

  ReqMapHunting(const ReqMapHunting& from);

  inline ReqMapHunting& operator=(const ReqMapHunting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqMapHunting(ReqMapHunting&& from) noexcept
    : ReqMapHunting() {
    *this = ::std::move(from);
  }

  inline ReqMapHunting& operator=(ReqMapHunting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMapHunting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqMapHunting* internal_default_instance() {
    return reinterpret_cast<const ReqMapHunting*>(
               &_ReqMapHunting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(ReqMapHunting* other);
  friend void swap(ReqMapHunting& a, ReqMapHunting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqMapHunting* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMapHunting>(NULL);
  }

  ReqMapHunting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMapHunting>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqMapHunting& from);
  void MergeFrom(const ReqMapHunting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqMapHunting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_title_id = 1;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(::std::string&& value);
  #endif
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMapHunting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapHuntingImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckMapHunting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckMapHunting) */ {
 public:
  AckMapHunting();
  virtual ~AckMapHunting();

  AckMapHunting(const AckMapHunting& from);

  inline AckMapHunting& operator=(const AckMapHunting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckMapHunting(AckMapHunting&& from) noexcept
    : AckMapHunting() {
    *this = ::std::move(from);
  }

  inline AckMapHunting& operator=(AckMapHunting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMapHunting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckMapHunting* internal_default_instance() {
    return reinterpret_cast<const AckMapHunting*>(
               &_AckMapHunting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(AckMapHunting* other);
  friend void swap(AckMapHunting& a, AckMapHunting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckMapHunting* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckMapHunting>(NULL);
  }

  AckMapHunting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckMapHunting>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckMapHunting& from);
  void MergeFrom(const AckMapHunting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckMapHunting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckMapHunting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapHuntingImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMapKingWar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMapKingWar) */ {
 public:
  ReqMapKingWar();
  virtual ~ReqMapKingWar();

  ReqMapKingWar(const ReqMapKingWar& from);

  inline ReqMapKingWar& operator=(const ReqMapKingWar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqMapKingWar(ReqMapKingWar&& from) noexcept
    : ReqMapKingWar() {
    *this = ::std::move(from);
  }

  inline ReqMapKingWar& operator=(ReqMapKingWar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMapKingWar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqMapKingWar* internal_default_instance() {
    return reinterpret_cast<const ReqMapKingWar*>(
               &_ReqMapKingWar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(ReqMapKingWar* other);
  friend void swap(ReqMapKingWar& a, ReqMapKingWar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqMapKingWar* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMapKingWar>(NULL);
  }

  ReqMapKingWar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqMapKingWar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqMapKingWar& from);
  void MergeFrom(const ReqMapKingWar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqMapKingWar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes map_title_id = 1;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  #if LANG_CXX11
  void set_map_title_id(::std::string&& value);
  #endif
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMapKingWar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapKingWarImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckMapKingWar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckMapKingWar) */ {
 public:
  AckMapKingWar();
  virtual ~AckMapKingWar();

  AckMapKingWar(const AckMapKingWar& from);

  inline AckMapKingWar& operator=(const AckMapKingWar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckMapKingWar(AckMapKingWar&& from) noexcept
    : AckMapKingWar() {
    *this = ::std::move(from);
  }

  inline AckMapKingWar& operator=(AckMapKingWar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMapKingWar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckMapKingWar* internal_default_instance() {
    return reinterpret_cast<const AckMapKingWar*>(
               &_AckMapKingWar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(AckMapKingWar* other);
  friend void swap(AckMapKingWar& a, AckMapKingWar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckMapKingWar* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckMapKingWar>(NULL);
  }

  AckMapKingWar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckMapKingWar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckMapKingWar& from);
  void MergeFrom(const AckMapKingWar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckMapKingWar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckMapKingWar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapKingWarImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PVPRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.PVPRoomInfo) */ {
 public:
  PVPRoomInfo();
  virtual ~PVPRoomInfo();

  PVPRoomInfo(const PVPRoomInfo& from);

  inline PVPRoomInfo& operator=(const PVPRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPRoomInfo(PVPRoomInfo&& from) noexcept
    : PVPRoomInfo() {
    *this = ::std::move(from);
  }

  inline PVPRoomInfo& operator=(PVPRoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPRoomInfo* internal_default_instance() {
    return reinterpret_cast<const PVPRoomInfo*>(
               &_PVPRoomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(PVPRoomInfo* other);
  friend void swap(PVPRoomInfo& a, PVPRoomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPRoomInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PVPRoomInfo>(NULL);
  }

  PVPRoomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PVPRoomInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PVPRoomInfo& from);
  void MergeFrom(const PVPRoomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PVPRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident xRedPlayer = 6;
  int xredplayer_size() const;
  void clear_xredplayer();
  static const int kXRedPlayerFieldNumber = 6;
  ::AFMsg::Ident* mutable_xredplayer(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xredplayer();
  const ::AFMsg::Ident& xredplayer(int index) const;
  ::AFMsg::Ident* add_xredplayer();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xredplayer() const;

  // repeated .AFMsg.Ident xBluePlayer = 7;
  int xblueplayer_size() const;
  void clear_xblueplayer();
  static const int kXBluePlayerFieldNumber = 7;
  ::AFMsg::Ident* mutable_xblueplayer(int index);
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xblueplayer();
  const ::AFMsg::Ident& xblueplayer(int index) const;
  ::AFMsg::Ident* add_xblueplayer();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xblueplayer() const;

  // .AFMsg.Ident RoomID = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  const ::AFMsg::Ident& roomid() const;
  ::AFMsg::Ident* release_roomid();
  ::AFMsg::Ident* mutable_roomid();
  void set_allocated_roomid(::AFMsg::Ident* roomid);

  // int32 nCellStatus = 1;
  void clear_ncellstatus();
  static const int kNCellStatusFieldNumber = 1;
  ::google::protobuf::int32 ncellstatus() const;
  void set_ncellstatus(::google::protobuf::int32 value);

  // int32 nPVPMode = 3;
  void clear_npvpmode();
  static const int kNPVPModeFieldNumber = 3;
  ::google::protobuf::int32 npvpmode() const;
  void set_npvpmode(::google::protobuf::int32 value);

  // int32 nPVPGrade = 4;
  void clear_npvpgrade();
  static const int kNPVPGradeFieldNumber = 4;
  ::google::protobuf::int32 npvpgrade() const;
  void set_npvpgrade(::google::protobuf::int32 value);

  // int32 MaxPalyer = 5;
  void clear_maxpalyer();
  static const int kMaxPalyerFieldNumber = 5;
  ::google::protobuf::int32 maxpalyer() const;
  void set_maxpalyer(::google::protobuf::int32 value);

  // int64 serverid = 8;
  void clear_serverid();
  static const int kServeridFieldNumber = 8;
  ::google::protobuf::int64 serverid() const;
  void set_serverid(::google::protobuf::int64 value);

  // int64 SceneID = 9;
  void clear_sceneid();
  static const int kSceneIDFieldNumber = 9;
  ::google::protobuf::int64 sceneid() const;
  void set_sceneid(::google::protobuf::int64 value);

  // int64 groupID = 10;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 10;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.PVPRoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xredplayer_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xblueplayer_;
  ::AFMsg::Ident* roomid_;
  ::google::protobuf::int32 ncellstatus_;
  ::google::protobuf::int32 npvpmode_;
  ::google::protobuf::int32 npvpgrade_;
  ::google::protobuf::int32 maxpalyer_;
  ::google::protobuf::int64 serverid_;
  ::google::protobuf::int64 sceneid_;
  ::google::protobuf::int64 groupid_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqPVPApplyMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqPVPApplyMatch) */ {
 public:
  ReqPVPApplyMatch();
  virtual ~ReqPVPApplyMatch();

  ReqPVPApplyMatch(const ReqPVPApplyMatch& from);

  inline ReqPVPApplyMatch& operator=(const ReqPVPApplyMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPVPApplyMatch(ReqPVPApplyMatch&& from) noexcept
    : ReqPVPApplyMatch() {
    *this = ::std::move(from);
  }

  inline ReqPVPApplyMatch& operator=(ReqPVPApplyMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPVPApplyMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPVPApplyMatch* internal_default_instance() {
    return reinterpret_cast<const ReqPVPApplyMatch*>(
               &_ReqPVPApplyMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(ReqPVPApplyMatch* other);
  friend void swap(ReqPVPApplyMatch& a, ReqPVPApplyMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPVPApplyMatch* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqPVPApplyMatch>(NULL);
  }

  ReqPVPApplyMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqPVPApplyMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqPVPApplyMatch& from);
  void MergeFrom(const ReqPVPApplyMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqPVPApplyMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqPVPApplyMatch_EApplyType EApplyType;
  static const EApplyType EApplyType_Single =
    ReqPVPApplyMatch_EApplyType_EApplyType_Single;
  static const EApplyType EApplyType_Team =
    ReqPVPApplyMatch_EApplyType_EApplyType_Team;
  static inline bool EApplyType_IsValid(int value) {
    return ReqPVPApplyMatch_EApplyType_IsValid(value);
  }
  static const EApplyType EApplyType_MIN =
    ReqPVPApplyMatch_EApplyType_EApplyType_MIN;
  static const EApplyType EApplyType_MAX =
    ReqPVPApplyMatch_EApplyType_EApplyType_MAX;
  static const int EApplyType_ARRAYSIZE =
    ReqPVPApplyMatch_EApplyType_EApplyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EApplyType_descriptor() {
    return ReqPVPApplyMatch_EApplyType_descriptor();
  }
  static inline const ::std::string& EApplyType_Name(EApplyType value) {
    return ReqPVPApplyMatch_EApplyType_Name(value);
  }
  static inline bool EApplyType_Parse(const ::std::string& name,
      EApplyType* value) {
    return ReqPVPApplyMatch_EApplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // .AFMsg.Ident team_id = 5;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* release_team_id();
  ::AFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // int64 score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // int32 nPVPMode = 2;
  void clear_npvpmode();
  static const int kNPVPModeFieldNumber = 2;
  ::google::protobuf::int32 npvpmode() const;
  void set_npvpmode(::google::protobuf::int32 value);

  // int32 ApplyType = 4;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 4;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqPVPApplyMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::Ident* team_id_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 npvpmode_;
  ::google::protobuf::int32 applytype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPVPApplyMatchImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPVPApplyMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPVPApplyMatch) */ {
 public:
  AckPVPApplyMatch();
  virtual ~AckPVPApplyMatch();

  AckPVPApplyMatch(const AckPVPApplyMatch& from);

  inline AckPVPApplyMatch& operator=(const AckPVPApplyMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPVPApplyMatch(AckPVPApplyMatch&& from) noexcept
    : AckPVPApplyMatch() {
    *this = ::std::move(from);
  }

  inline AckPVPApplyMatch& operator=(AckPVPApplyMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPVPApplyMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPVPApplyMatch* internal_default_instance() {
    return reinterpret_cast<const AckPVPApplyMatch*>(
               &_AckPVPApplyMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(AckPVPApplyMatch* other);
  friend void swap(AckPVPApplyMatch& a, AckPVPApplyMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPVPApplyMatch* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPVPApplyMatch>(NULL);
  }

  AckPVPApplyMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPVPApplyMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckPVPApplyMatch& from);
  void MergeFrom(const AckPVPApplyMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckPVPApplyMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // int32 ApplyType = 3;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 3;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // int32 nResult = 4;
  void clear_nresult();
  static const int kNResultFieldNumber = 4;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckPVPApplyMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  ::google::protobuf::int32 applytype_;
  ::google::protobuf::int32 nresult_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPVPApplyMatchImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCreatePVPEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCreatePVPEctype) */ {
 public:
  ReqCreatePVPEctype();
  virtual ~ReqCreatePVPEctype();

  ReqCreatePVPEctype(const ReqCreatePVPEctype& from);

  inline ReqCreatePVPEctype& operator=(const ReqCreatePVPEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCreatePVPEctype(ReqCreatePVPEctype&& from) noexcept
    : ReqCreatePVPEctype() {
    *this = ::std::move(from);
  }

  inline ReqCreatePVPEctype& operator=(ReqCreatePVPEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreatePVPEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreatePVPEctype* internal_default_instance() {
    return reinterpret_cast<const ReqCreatePVPEctype*>(
               &_ReqCreatePVPEctype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(ReqCreatePVPEctype* other);
  friend void swap(ReqCreatePVPEctype& a, ReqCreatePVPEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCreatePVPEctype* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCreatePVPEctype>(NULL);
  }

  ReqCreatePVPEctype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqCreatePVPEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqCreatePVPEctype& from);
  void MergeFrom(const ReqCreatePVPEctype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqCreatePVPEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCreatePVPEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCreatePVPEctypeImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckCreatePVPEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckCreatePVPEctype) */ {
 public:
  AckCreatePVPEctype();
  virtual ~AckCreatePVPEctype();

  AckCreatePVPEctype(const AckCreatePVPEctype& from);

  inline AckCreatePVPEctype& operator=(const AckCreatePVPEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckCreatePVPEctype(AckCreatePVPEctype&& from) noexcept
    : AckCreatePVPEctype() {
    *this = ::std::move(from);
  }

  inline AckCreatePVPEctype& operator=(AckCreatePVPEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckCreatePVPEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckCreatePVPEctype* internal_default_instance() {
    return reinterpret_cast<const AckCreatePVPEctype*>(
               &_AckCreatePVPEctype_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(AckCreatePVPEctype* other);
  friend void swap(AckCreatePVPEctype& a, AckCreatePVPEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckCreatePVPEctype* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckCreatePVPEctype>(NULL);
  }

  AckCreatePVPEctype* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckCreatePVPEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckCreatePVPEctype& from);
  void MergeFrom(const AckCreatePVPEctype& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckCreatePVPEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* release_self_id();
  ::AFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // int32 ApplyType = 3;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 3;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckCreatePVPEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  ::google::protobuf::int32 applytype_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgShare_2eproto::TableStruct;
  friend void ::protobuf_AFMsgShare_2eproto::InitDefaultsAckCreatePVPEctypeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqEnterGameServer

// .AFMsg.Ident id = 1;
inline bool ReqEnterGameServer::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::AFMsg::Ident& ReqEnterGameServer::id() const {
  const ::AFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.id)
  
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqEnterGameServer::mutable_id() {
  
  if (id_ == NULL) {
    id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.id)
  return id_;
}
inline void ReqEnterGameServer::set_allocated_id(::AFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.id)
}

// bytes account = 2;
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.account)
  return account_.GetNoArena();
}
inline void ReqEnterGameServer::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.account)
}
#if LANG_CXX11
inline void ReqEnterGameServer::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqEnterGameServer.account)
}
#endif
inline void ReqEnterGameServer::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.account)
}
inline ::std::string* ReqEnterGameServer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.account)
}

// int32 game_id = 3;
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.game_id)
  return game_id_;
}
inline void ReqEnterGameServer::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.game_id)
}

// bytes name = 4;
inline void ReqEnterGameServer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.name)
  return name_.GetNoArena();
}
inline void ReqEnterGameServer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.name)
}
#if LANG_CXX11
inline void ReqEnterGameServer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqEnterGameServer.name)
}
#endif
inline void ReqEnterGameServer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.name)
}
inline ::std::string* ReqEnterGameServer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.name)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// -------------------------------------------------------------------

// ReqLeaveGameServer

// -------------------------------------------------------------------

// PlayerEntryInfo

// .AFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != NULL;
}
inline const ::AFMsg::Ident& PlayerEntryInfo::object_guid() const {
  const ::AFMsg::Ident* p = object_guid_;
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.object_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.object_guid)
  
  ::AFMsg::Ident* temp = object_guid_;
  object_guid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  
  if (object_guid_ == NULL) {
    object_guid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.object_guid)
  return object_guid_;
}
inline void PlayerEntryInfo::set_allocated_object_guid(::AFMsg::Ident* object_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.object_guid)
}

// .AFMsg.Point3D pos = 2;
inline bool PlayerEntryInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline const ::AFMsg::Point3D& PlayerEntryInfo::pos() const {
  const ::AFMsg::Point3D* p = pos_;
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Point3D*>(
      &::AFMsg::_Point3D_default_instance_);
}
inline ::AFMsg::Point3D* PlayerEntryInfo::release_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.pos)
  
  ::AFMsg::Point3D* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::AFMsg::Point3D* PlayerEntryInfo::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = ::google::protobuf::Arena::Create< ::AFMsg::Point3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.pos)
  return pos_;
}
inline void PlayerEntryInfo::set_allocated_pos(::AFMsg::Point3D* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.pos)
}

// int32 career_type = 3;
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.career_type)
  return career_type_;
}
inline void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  
  career_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.career_type)
}

// int32 player_state = 4;
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.player_state)
  return player_state_;
}
inline void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  
  player_state_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.player_state)
}

// bytes config_id = 5;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.GetNoArena();
}
inline void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.config_id)
}
#if LANG_CXX11
inline void PlayerEntryInfo::set_config_id(::std::string&& value) {
  
  config_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.PlayerEntryInfo.config_id)
}
#endif
inline void PlayerEntryInfo::set_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.config_id)
}
inline ::std::string* PlayerEntryInfo::mutable_config_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.config_id)
  
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    
  } else {
    
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 6;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.scene_id)
  return scene_id_;
}
inline void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 7;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.GetNoArena();
}
inline void PlayerEntryInfo::set_class_id(const ::std::string& value) {
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.class_id)
}
#if LANG_CXX11
inline void PlayerEntryInfo::set_class_id(::std::string&& value) {
  
  class_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.PlayerEntryInfo.class_id)
}
#endif
inline void PlayerEntryInfo::set_class_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.class_id)
}
inline ::std::string* PlayerEntryInfo::mutable_class_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.class_id)
  
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    
  } else {
    
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .AFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::AFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::AFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .AFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
inline ::AFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::AFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// ReqAckSynData

// .AFMsg.Ident syser = 1;
inline bool ReqAckSynData::has_syser() const {
  return this != internal_default_instance() && syser_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckSynData::syser() const {
  const ::AFMsg::Ident* p = syser_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syser)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckSynData::release_syser() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.syser)
  
  ::AFMsg::Ident* temp = syser_;
  syser_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckSynData::mutable_syser() {
  
  if (syser_ == NULL) {
    syser_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.syser)
  return syser_;
}
inline void ReqAckSynData::set_allocated_syser(::AFMsg::Ident* syser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(syser_);
  }
  if (syser) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      syser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, syser, submessage_arena);
    }
    
  } else {
    
  }
  syser_ = syser;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.syser)
}

// repeated .AFMsg.Ident object_list = 2;
inline int ReqAckSynData::object_list_size() const {
  return object_list_.size();
}
inline ::AFMsg::Ident* ReqAckSynData::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqAckSynData::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckSynData.object_list)
  return &object_list_;
}
inline const ::AFMsg::Ident& ReqAckSynData::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::Ident* ReqAckSynData::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckSynData.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqAckSynData::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckSynData.object_list)
  return object_list_;
}

// bytes data = 3;
inline void ReqAckSynData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckSynData::data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.data)
  return data_.GetNoArena();
}
inline void ReqAckSynData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.data)
}
#if LANG_CXX11
inline void ReqAckSynData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckSynData.data)
}
#endif
inline void ReqAckSynData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckSynData.data)
}
inline void ReqAckSynData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckSynData.data)
}
inline ::std::string* ReqAckSynData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckSynData::release_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSynData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.data)
}

// .AFMsg.ReqAckSynData.SynType syn_type = 4;
inline void ReqAckSynData::clear_syn_type() {
  syn_type_ = 0;
}
inline ::AFMsg::ReqAckSynData_SynType ReqAckSynData::syn_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syn_type)
  return static_cast< ::AFMsg::ReqAckSynData_SynType >(syn_type_);
}
inline void ReqAckSynData::set_syn_type(::AFMsg::ReqAckSynData_SynType value) {
  
  syn_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.syn_type)
}

// .AFMsg.EGameMsgID msg_id = 5;
inline void ReqAckSynData::clear_msg_id() {
  msg_id_ = 0;
}
inline ::AFMsg::EGameMsgID ReqAckSynData::msg_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.msg_id)
  return static_cast< ::AFMsg::EGameMsgID >(msg_id_);
}
inline void ReqAckSynData::set_msg_id(::AFMsg::EGameMsgID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.msg_id)
}

// -------------------------------------------------------------------

// ReqAckPlayerMove

// .AFMsg.Ident mover = 1;
inline bool ReqAckPlayerMove::has_mover() const {
  return this != internal_default_instance() && mover_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckPlayerMove::mover() const {
  const ::AFMsg::Ident* p = mover_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.mover)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckPlayerMove::release_mover() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerMove.mover)
  
  ::AFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckPlayerMove::mutable_mover() {
  
  if (mover_ == NULL) {
    mover_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.mover)
  return mover_;
}
inline void ReqAckPlayerMove::set_allocated_mover(::AFMsg::Ident* mover) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mover_);
  }
  if (mover) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mover = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mover, submessage_arena);
    }
    
  } else {
    
  }
  mover_ = mover;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerMove.mover)
}

// int32 moveType = 2;
inline void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.moveType)
  return movetype_;
}
inline void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  
  movetype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerMove.moveType)
}

// repeated .AFMsg.Position target_pos = 3;
inline int ReqAckPlayerMove::target_pos_size() const {
  return target_pos_.size();
}
inline ::AFMsg::Position* ReqAckPlayerMove::mutable_target_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_target_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.target_pos)
  return &target_pos_;
}
inline const ::AFMsg::Position& ReqAckPlayerMove::target_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Get(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::add_target_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::target_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_;
}

// repeated .AFMsg.Position source_pos = 4;
inline int ReqAckPlayerMove::source_pos_size() const {
  return source_pos_.size();
}
inline ::AFMsg::Position* ReqAckPlayerMove::mutable_source_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_source_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.source_pos)
  return &source_pos_;
}
inline const ::AFMsg::Position& ReqAckPlayerMove::source_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Get(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::add_source_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::source_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_;
}

// -------------------------------------------------------------------

// ChatContainer

// int32 ConTainerType = 2;
inline void ChatContainer::clear_containertype() {
  containertype_ = 0;
}
inline ::google::protobuf::int32 ChatContainer::containertype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.ConTainerType)
  return containertype_;
}
inline void ChatContainer::set_containertype(::google::protobuf::int32 value) {
  
  containertype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.ConTainerType)
}

// bytes data_info = 3;
inline void ChatContainer::clear_data_info() {
  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatContainer::data_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.data_info)
  return data_info_.GetNoArena();
}
inline void ChatContainer::set_data_info(const ::std::string& value) {
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.data_info)
}
#if LANG_CXX11
inline void ChatContainer::set_data_info(::std::string&& value) {
  
  data_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ChatContainer.data_info)
}
#endif
inline void ChatContainer::set_data_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatContainer.data_info)
}
inline void ChatContainer::set_data_info(const void* value, size_t size) {
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatContainer.data_info)
}
inline ::std::string* ChatContainer::mutable_data_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatContainer.data_info)
  return data_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatContainer::release_data_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatContainer.data_info)
  
  return data_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatContainer::set_allocated_data_info(::std::string* data_info) {
  if (data_info != NULL) {
    
  } else {
    
  }
  data_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatContainer.data_info)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .AFMsg.Ident chat_id = 1;
inline bool ReqAckPlayerChat::has_chat_id() const {
  return this != internal_default_instance() && chat_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckPlayerChat::chat_id() const {
  const ::AFMsg::Ident* p = chat_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckPlayerChat::release_chat_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_id)
  
  ::AFMsg::Ident* temp = chat_id_;
  chat_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::mutable_chat_id() {
  
  if (chat_id_ == NULL) {
    chat_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_;
}
inline void ReqAckPlayerChat::set_allocated_chat_id(::AFMsg::Ident* chat_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chat_id_);
  }
  if (chat_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chat_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chat_id, submessage_arena);
    }
    
  } else {
    
  }
  chat_id_ = chat_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_id)
}

// .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::AFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_type)
  return static_cast< ::AFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline void ReqAckPlayerChat::set_chat_type(::AFMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 3;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.GetNoArena();
}
inline void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_info)
}
#if LANG_CXX11
inline void ReqAckPlayerChat::set_chat_info(::std::string&& value) {
  
  chat_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckPlayerChat.chat_info)
}
#endif
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_info)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_info)
  
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    
  } else {
    
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_info)
}

// bytes chat_name = 4;
inline void ReqAckPlayerChat::clear_chat_name() {
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckPlayerChat::chat_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.GetNoArena();
}
inline void ReqAckPlayerChat::set_chat_name(const ::std::string& value) {
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_name)
}
#if LANG_CXX11
inline void ReqAckPlayerChat::set_chat_name(::std::string&& value) {
  
  chat_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckPlayerChat.chat_name)
}
#endif
inline void ReqAckPlayerChat::set_chat_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_name)
}
inline void ReqAckPlayerChat::set_chat_name(const void* value, size_t size) {
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_name)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_name)
  
  return chat_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name != NULL) {
    
  } else {
    
  }
  chat_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_name)
}

// .AFMsg.Ident target_id = 5;
inline bool ReqAckPlayerChat::has_target_id() const {
  return this != internal_default_instance() && target_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckPlayerChat::target_id() const {
  const ::AFMsg::Ident* p = target_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.target_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckPlayerChat::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.target_id)
  
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::mutable_target_id() {
  
  if (target_id_ == NULL) {
    target_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.target_id)
  return target_id_;
}
inline void ReqAckPlayerChat::set_allocated_target_id(::AFMsg::Ident* target_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.target_id)
}

// repeated .AFMsg.ChatContainer Container_data = 6;
inline int ReqAckPlayerChat::container_data_size() const {
  return container_data_.size();
}
inline void ReqAckPlayerChat::clear_container_data() {
  container_data_.Clear();
}
inline ::AFMsg::ChatContainer* ReqAckPlayerChat::mutable_container_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >*
ReqAckPlayerChat::mutable_container_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerChat.Container_data)
  return &container_data_;
}
inline const ::AFMsg::ChatContainer& ReqAckPlayerChat::container_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Get(index);
}
inline ::AFMsg::ChatContainer* ReqAckPlayerChat::add_container_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >&
ReqAckPlayerChat::container_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_;
}

// -------------------------------------------------------------------

// EffectData

// .AFMsg.Ident effect_ident = 1;
inline bool EffectData::has_effect_ident() const {
  return this != internal_default_instance() && effect_ident_ != NULL;
}
inline const ::AFMsg::Ident& EffectData::effect_ident() const {
  const ::AFMsg::Ident* p = effect_ident_;
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_ident)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* EffectData::release_effect_ident() {
  // @@protoc_insertion_point(field_release:AFMsg.EffectData.effect_ident)
  
  ::AFMsg::Ident* temp = effect_ident_;
  effect_ident_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* EffectData::mutable_effect_ident() {
  
  if (effect_ident_ == NULL) {
    effect_ident_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.EffectData.effect_ident)
  return effect_ident_;
}
inline void EffectData::set_allocated_effect_ident(::AFMsg::Ident* effect_ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(effect_ident_);
  }
  if (effect_ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      effect_ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, effect_ident, submessage_arena);
    }
    
  } else {
    
  }
  effect_ident_ = effect_ident;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.EffectData.effect_ident)
}

// int32 effect_value = 2;
inline void EffectData::clear_effect_value() {
  effect_value_ = 0;
}
inline ::google::protobuf::int32 EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_value)
  return effect_value_;
}
inline void EffectData::set_effect_value(::google::protobuf::int32 value) {
  
  effect_value_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_value)
}

// .AFMsg.EffectData.EResultType effect_rlt = 3;
inline void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
}
inline ::AFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_rlt)
  return static_cast< ::AFMsg::EffectData_EResultType >(effect_rlt_);
}
inline void EffectData::set_effect_rlt(::AFMsg::EffectData_EResultType value) {
  
  effect_rlt_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_rlt)
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// .AFMsg.Ident user = 1;
inline bool ReqAckUseSkill::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckUseSkill::user() const {
  const ::AFMsg::Ident* p = user_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.user)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckUseSkill::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.user)
  
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckUseSkill::mutable_user() {
  
  if (user_ == NULL) {
    user_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.user)
  return user_;
}
inline void ReqAckUseSkill::set_allocated_user(::AFMsg::Ident* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.user)
}

// bytes skill_id = 2;
inline void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.GetNoArena();
}
inline void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.skill_id)
}
#if LANG_CXX11
inline void ReqAckUseSkill::set_skill_id(::std::string&& value) {
  
  skill_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckUseSkill.skill_id)
}
#endif
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckUseSkill.skill_id)
}
inline ::std::string* ReqAckUseSkill::mutable_skill_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.skill_id)
  
  return skill_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id != NULL) {
    
  } else {
    
  }
  skill_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.skill_id)
}

// .AFMsg.Position now_pos = 3;
inline bool ReqAckUseSkill::has_now_pos() const {
  return this != internal_default_instance() && now_pos_ != NULL;
}
inline const ::AFMsg::Position& ReqAckUseSkill::now_pos() const {
  const ::AFMsg::Position* p = now_pos_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.now_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Position*>(
      &::AFMsg::_Position_default_instance_);
}
inline ::AFMsg::Position* ReqAckUseSkill::release_now_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.now_pos)
  
  ::AFMsg::Position* temp = now_pos_;
  now_pos_ = NULL;
  return temp;
}
inline ::AFMsg::Position* ReqAckUseSkill::mutable_now_pos() {
  
  if (now_pos_ == NULL) {
    now_pos_ = ::google::protobuf::Arena::Create< ::AFMsg::Position >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.now_pos)
  return now_pos_;
}
inline void ReqAckUseSkill::set_allocated_now_pos(::AFMsg::Position* now_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(now_pos_);
  }
  if (now_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      now_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, now_pos, submessage_arena);
    }
    
  } else {
    
  }
  now_pos_ = now_pos;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.now_pos)
}

// .AFMsg.Position tar_pos = 4;
inline bool ReqAckUseSkill::has_tar_pos() const {
  return this != internal_default_instance() && tar_pos_ != NULL;
}
inline const ::AFMsg::Position& ReqAckUseSkill::tar_pos() const {
  const ::AFMsg::Position* p = tar_pos_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.tar_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Position*>(
      &::AFMsg::_Position_default_instance_);
}
inline ::AFMsg::Position* ReqAckUseSkill::release_tar_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.tar_pos)
  
  ::AFMsg::Position* temp = tar_pos_;
  tar_pos_ = NULL;
  return temp;
}
inline ::AFMsg::Position* ReqAckUseSkill::mutable_tar_pos() {
  
  if (tar_pos_ == NULL) {
    tar_pos_ = ::google::protobuf::Arena::Create< ::AFMsg::Position >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.tar_pos)
  return tar_pos_;
}
inline void ReqAckUseSkill::set_allocated_tar_pos(::AFMsg::Position* tar_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tar_pos_);
  }
  if (tar_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tar_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tar_pos, submessage_arena);
    }
    
  } else {
    
  }
  tar_pos_ = tar_pos;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.tar_pos)
}

// int32 use_index = 5;
inline void ReqAckUseSkill::clear_use_index() {
  use_index_ = 0;
}
inline ::google::protobuf::int32 ReqAckUseSkill::use_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.use_index)
  return use_index_;
}
inline void ReqAckUseSkill::set_use_index(::google::protobuf::int32 value) {
  
  use_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.use_index)
}

// repeated .AFMsg.EffectData effect_data = 6;
inline int ReqAckUseSkill::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
inline ::AFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
inline const ::AFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Get(index);
}
inline ::AFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

// -------------------------------------------------------------------

// ReqAckUseItem

// .AFMsg.Ident user = 1;
inline bool ReqAckUseItem::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckUseItem::user() const {
  const ::AFMsg::Ident* p = user_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.user)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckUseItem::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.user)
  
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_user() {
  
  if (user_ == NULL) {
    user_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.user)
  return user_;
}
inline void ReqAckUseItem::set_allocated_user(::AFMsg::Ident* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.user)
}

// .AFMsg.Ident item_guid = 2;
inline bool ReqAckUseItem::has_item_guid() const {
  return this != internal_default_instance() && item_guid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckUseItem::item_guid() const {
  const ::AFMsg::Ident* p = item_guid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckUseItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item_guid)
  
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_item_guid() {
  
  if (item_guid_ == NULL) {
    item_guid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item_guid)
  return item_guid_;
}
inline void ReqAckUseItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_guid_);
  }
  if (item_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item_guid, submessage_arena);
    }
    
  } else {
    
  }
  item_guid_ = item_guid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item_guid)
}

// repeated .AFMsg.EffectData effect_data = 3;
inline int ReqAckUseItem::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseItem::clear_effect_data() {
  effect_data_.Clear();
}
inline ::AFMsg::EffectData* ReqAckUseItem::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseItem::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseItem.effect_data)
  return &effect_data_;
}
inline const ::AFMsg::EffectData& ReqAckUseItem::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Get(index);
}
inline ::AFMsg::EffectData* ReqAckUseItem::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseItem::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_;
}

// .AFMsg.ItemStruct item = 4;
inline bool ReqAckUseItem::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void ReqAckUseItem::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::AFMsg::ItemStruct& ReqAckUseItem::item() const {
  const ::AFMsg::ItemStruct* p = item_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::ItemStruct*>(
      &::AFMsg::_ItemStruct_default_instance_);
}
inline ::AFMsg::ItemStruct* ReqAckUseItem::release_item() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item)
  
  ::AFMsg::ItemStruct* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::AFMsg::ItemStruct* ReqAckUseItem::mutable_item() {
  
  if (item_ == NULL) {
    item_ = ::google::protobuf::Arena::Create< ::AFMsg::ItemStruct >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item)
  return item_;
}
inline void ReqAckUseItem::set_allocated_item(::AFMsg::ItemStruct* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item)
}

// .AFMsg.Ident targetid = 5;
inline bool ReqAckUseItem::has_targetid() const {
  return this != internal_default_instance() && targetid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckUseItem::targetid() const {
  const ::AFMsg::Ident* p = targetid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.targetid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckUseItem::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.targetid)
  
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_targetid() {
  
  if (targetid_ == NULL) {
    targetid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.targetid)
  return targetid_;
}
inline void ReqAckUseItem::set_allocated_targetid(::AFMsg::Ident* targetid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(targetid_);
  }
  if (targetid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetid, submessage_arena);
    }
    
  } else {
    
  }
  targetid_ = targetid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.targetid)
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
}
inline ::AFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.transfer_type)
  return static_cast< ::AFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
inline void ReqAckSwapScene::set_transfer_type(::AFMsg::ReqAckSwapScene_EGameSwapType value) {
  
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.transfer_type)
}

// int32 scene_id = 2;
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.scene_id)
  return scene_id_;
}
inline void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.scene_id)
}

// int32 line_id = 3;
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
}
inline ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.line_id)
  return line_id_;
}
inline void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.line_id)
}

// float x = 4;
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
}
inline float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.x)
  return x_;
}
inline void ReqAckSwapScene::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.x)
}

// float y = 5;
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
}
inline float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.y)
  return y_;
}
inline void ReqAckSwapScene::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.y)
}

// float z = 6;
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
}
inline float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.z)
  return z_;
}
inline void ReqAckSwapScene::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.z)
}

// -------------------------------------------------------------------

// ItemStruct

// string item_id = 1;
inline void ItemStruct::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemStruct::item_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_id)
  return item_id_.GetNoArena();
}
inline void ItemStruct::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_id)
}
#if LANG_CXX11
inline void ItemStruct::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ItemStruct.item_id)
}
#endif
inline void ItemStruct::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ItemStruct.item_id)
}
inline void ItemStruct::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ItemStruct.item_id)
}
inline ::std::string* ItemStruct::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ItemStruct.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemStruct::release_item_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ItemStruct.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemStruct::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ItemStruct.item_id)
}

// int32 item_count = 2;
inline void ItemStruct::clear_item_count() {
  item_count_ = 0;
}
inline ::google::protobuf::int32 ItemStruct::item_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_count)
  return item_count_;
}
inline void ItemStruct::set_item_count(::google::protobuf::int32 value) {
  
  item_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_count)
}

// -------------------------------------------------------------------

// CurrencyStruct

// int32 currency_type = 1;
inline void CurrencyStruct::clear_currency_type() {
  currency_type_ = 0;
}
inline ::google::protobuf::int32 CurrencyStruct::currency_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_type)
  return currency_type_;
}
inline void CurrencyStruct::set_currency_type(::google::protobuf::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_type)
}

// int32 currency_count = 2;
inline void CurrencyStruct::clear_currency_count() {
  currency_count_ = 0;
}
inline ::google::protobuf::int32 CurrencyStruct::currency_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_count)
  return currency_count_;
}
inline void CurrencyStruct::set_currency_count(::google::protobuf::int32 value) {
  
  currency_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_count)
}

// -------------------------------------------------------------------

// ReqAckEndBattle

// int32 money = 1;
inline void ReqAckEndBattle::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 ReqAckEndBattle::money() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.money)
  return money_;
}
inline void ReqAckEndBattle::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.money)
}

// int32 exp = 2;
inline void ReqAckEndBattle::clear_exp() {
  exp_ = 0;
}
inline ::google::protobuf::int32 ReqAckEndBattle::exp() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.exp)
  return exp_;
}
inline void ReqAckEndBattle::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.exp)
}

// int32 diamond = 3;
inline void ReqAckEndBattle::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 ReqAckEndBattle::diamond() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.diamond)
  return diamond_;
}
inline void ReqAckEndBattle::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.diamond)
}

// repeated .AFMsg.ItemStruct item_list = 4;
inline int ReqAckEndBattle::item_list_size() const {
  return item_list_.size();
}
inline void ReqAckEndBattle::clear_item_list() {
  item_list_.Clear();
}
inline ::AFMsg::ItemStruct* ReqAckEndBattle::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckEndBattle::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckEndBattle.item_list)
  return &item_list_;
}
inline const ::AFMsg::ItemStruct& ReqAckEndBattle::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqAckEndBattle::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckEndBattle::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckEndBattle.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// ReqPickDropItem

// .AFMsg.Ident item_guid = 2;
inline bool ReqPickDropItem::has_item_guid() const {
  return this != internal_default_instance() && item_guid_ != NULL;
}
inline const ::AFMsg::Ident& ReqPickDropItem::item_guid() const {
  const ::AFMsg::Ident* p = item_guid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqPickDropItem.item_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqPickDropItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPickDropItem.item_guid)
  
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqPickDropItem::mutable_item_guid() {
  
  if (item_guid_ == NULL) {
    item_guid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPickDropItem.item_guid)
  return item_guid_;
}
inline void ReqPickDropItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_guid_);
  }
  if (item_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item_guid, submessage_arena);
    }
    
  } else {
    
  }
  item_guid_ = item_guid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPickDropItem.item_guid)
}

// -------------------------------------------------------------------

// ReqAcceptTask

// bytes task_id = 1;
inline void ReqAcceptTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAcceptTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAcceptTask.task_id)
  return task_id_.GetNoArena();
}
inline void ReqAcceptTask::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAcceptTask.task_id)
}
#if LANG_CXX11
inline void ReqAcceptTask::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAcceptTask.task_id)
}
#endif
inline void ReqAcceptTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAcceptTask.task_id)
}
inline void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAcceptTask.task_id)
}
inline ::std::string* ReqAcceptTask::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAcceptTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAcceptTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAcceptTask.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAcceptTask.task_id)
}

// -------------------------------------------------------------------

// ReqCompeleteTask

// bytes task_id = 1;
inline void ReqCompeleteTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCompeleteTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.GetNoArena();
}
inline void ReqCompeleteTask::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqCompeleteTask.task_id)
}
#if LANG_CXX11
inline void ReqCompeleteTask::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqCompeleteTask.task_id)
}
#endif
inline void ReqCompeleteTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqCompeleteTask.task_id)
}
inline void ReqCompeleteTask::set_task_id(const void* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqCompeleteTask.task_id)
}
inline ::std::string* ReqCompeleteTask::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCompeleteTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCompeleteTask.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCompeleteTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCompeleteTask.task_id)
}

// -------------------------------------------------------------------

// ReqAckJoinActivity

// .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
inline void ReqAckJoinActivity::clear_activity_type() {
  activity_type_ = 0;
}
inline ::AFMsg::ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivityType >(activity_type_);
}
inline void ReqAckJoinActivity::set_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivityType value) {
  
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.activity_type)
}

// .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
inline void ReqAckJoinActivity::clear_sub_activity_type() {
  sub_activity_type_ = 0;
}
inline ::AFMsg::ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::sub_activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.sub_activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType >(sub_activity_type_);
}
inline void ReqAckJoinActivity::set_sub_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivitySubType value) {
  
  sub_activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.sub_activity_type)
}

// -------------------------------------------------------------------

// ReqAckSearchOppnent

// .AFMsg.EBattleType search_type = 1;
inline void ReqAckSearchOppnent::clear_search_type() {
  search_type_ = 0;
}
inline ::AFMsg::EBattleType ReqAckSearchOppnent::search_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSearchOppnent.search_type)
  return static_cast< ::AFMsg::EBattleType >(search_type_);
}
inline void ReqAckSearchOppnent::set_search_type(::AFMsg::EBattleType value) {
  
  search_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSearchOppnent.search_type)
}

// -------------------------------------------------------------------

// ReqAckBattleOppnent

// .AFMsg.EBattleType battle_type = 1;
inline void ReqAckBattleOppnent::clear_battle_type() {
  battle_type_ = 0;
}
inline ::AFMsg::EBattleType ReqAckBattleOppnent::battle_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckBattleOppnent.battle_type)
  return static_cast< ::AFMsg::EBattleType >(battle_type_);
}
inline void ReqAckBattleOppnent::set_battle_type(::AFMsg::EBattleType value) {
  
  battle_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckBattleOppnent.battle_type)
}

// -------------------------------------------------------------------

// ReqAckCreateGuild

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckCreateGuild::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckCreateGuild::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckCreateGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckCreateGuild::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_id)
  return guild_id_;
}
inline void ReqAckCreateGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_id)
}

// string guild_name = 2;
inline void ReqAckCreateGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckCreateGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.GetNoArena();
}
inline void ReqAckCreateGuild::set_guild_name(const ::std::string& value) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateGuild.guild_name)
}
#if LANG_CXX11
inline void ReqAckCreateGuild::set_guild_name(::std::string&& value) {
  
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckCreateGuild.guild_name)
}
#endif
inline void ReqAckCreateGuild::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateGuild.guild_name)
}
inline void ReqAckCreateGuild::set_guild_name(const char* value, size_t size) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateGuild.guild_name)
}
inline ::std::string* ReqAckCreateGuild::mutable_guild_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckCreateGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_name)
  
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    
  } else {
    
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqSearchGuild

// string guild_name = 1;
inline void ReqSearchGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqSearchGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.GetNoArena();
}
inline void ReqSearchGuild::set_guild_name(const ::std::string& value) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqSearchGuild.guild_name)
}
#if LANG_CXX11
inline void ReqSearchGuild::set_guild_name(::std::string&& value) {
  
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqSearchGuild.guild_name)
}
#endif
inline void ReqSearchGuild::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqSearchGuild.guild_name)
}
inline void ReqSearchGuild::set_guild_name(const char* value, size_t size) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqSearchGuild.guild_name)
}
inline ::std::string* ReqSearchGuild::mutable_guild_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqSearchGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSearchGuild.guild_name)
  
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSearchGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    
  } else {
    
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSearchGuild.guild_name)
}

// -------------------------------------------------------------------

// AckSearchGuild_SearchGuildObject

// .AFMsg.Ident guild_ID = 1;
inline bool AckSearchGuild_SearchGuildObject::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& AckSearchGuild_SearchGuildObject::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckSearchGuild_SearchGuildObject::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckSearchGuild_SearchGuildObject::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return guild_id_;
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
}

// string guild_name = 2;
inline void AckSearchGuild_SearchGuildObject::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckSearchGuild_SearchGuildObject::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.GetNoArena();
}
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const ::std::string& value) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
#if LANG_CXX11
inline void AckSearchGuild_SearchGuildObject::set_guild_name(::std::string&& value) {
  
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
#endif
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value, size_t size) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
inline ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchGuild_SearchGuildObject::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    
  } else {
    
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}

// string guild_icon = 3;
inline void AckSearchGuild_SearchGuildObject::clear_guild_icon() {
  guild_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckSearchGuild_SearchGuildObject::guild_icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.GetNoArena();
}
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const ::std::string& value) {
  
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
#if LANG_CXX11
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(::std::string&& value) {
  
  guild_icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
#endif
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value, size_t size) {
  
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
inline ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_icon() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchGuild_SearchGuildObject::release_guild_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  
  return guild_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_icon(::std::string* guild_icon) {
  if (guild_icon != NULL) {
    
  } else {
    
  }
  guild_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}

// int32 guild_member_count = 4;
inline void AckSearchGuild_SearchGuildObject::clear_guild_member_count() {
  guild_member_count_ = 0;
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
  return guild_member_count_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_member_count(::google::protobuf::int32 value) {
  
  guild_member_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
}

// int32 guild_member_max_count = 5;
inline void AckSearchGuild_SearchGuildObject::clear_guild_member_max_count() {
  guild_member_max_count_ = 0;
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_max_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
  return guild_member_max_count_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_member_max_count(::google::protobuf::int32 value) {
  
  guild_member_max_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
}

// int32 guild_honor = 6;
inline void AckSearchGuild_SearchGuildObject::clear_guild_honor() {
  guild_honor_ = 0;
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_honor() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
  return guild_honor_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_honor(::google::protobuf::int32 value) {
  
  guild_honor_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
}

// int32 guild_rank = 7;
inline void AckSearchGuild_SearchGuildObject::clear_guild_rank() {
  guild_rank_ = 0;
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_rank() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
  return guild_rank_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_rank(::google::protobuf::int32 value) {
  
  guild_rank_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
}

// -------------------------------------------------------------------

// AckSearchGuild

// repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
inline int AckSearchGuild::guild_list_size() const {
  return guild_list_.size();
}
inline void AckSearchGuild::clear_guild_list() {
  guild_list_.Clear();
}
inline ::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::mutable_guild_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >*
AckSearchGuild::mutable_guild_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckSearchGuild.guild_list)
  return &guild_list_;
}
inline const ::AFMsg::AckSearchGuild_SearchGuildObject& AckSearchGuild::guild_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Get(index);
}
inline ::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::add_guild_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >&
AckSearchGuild::guild_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckSearchGuild.guild_list)
  return guild_list_;
}

// -------------------------------------------------------------------

// ReqAckJoinGuild

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckJoinGuild::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckJoinGuild::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckJoinGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckJoinGuild::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_id)
  return guild_id_;
}
inline void ReqAckJoinGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_id)
}

// string guild_name = 2;
inline void ReqAckJoinGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckJoinGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.GetNoArena();
}
inline void ReqAckJoinGuild::set_guild_name(const ::std::string& value) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinGuild.guild_name)
}
#if LANG_CXX11
inline void ReqAckJoinGuild::set_guild_name(::std::string&& value) {
  
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckJoinGuild.guild_name)
}
#endif
inline void ReqAckJoinGuild::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckJoinGuild.guild_name)
}
inline void ReqAckJoinGuild::set_guild_name(const char* value, size_t size) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckJoinGuild.guild_name)
}
inline ::std::string* ReqAckJoinGuild::mutable_guild_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckJoinGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_name)
  
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckJoinGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    
  } else {
    
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqAckLeaveGuild

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckLeaveGuild::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckLeaveGuild::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckLeaveGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckLeaveGuild::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_id)
  return guild_id_;
}
inline void ReqAckLeaveGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_id)
}

// string guild_name = 2;
inline void ReqAckLeaveGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckLeaveGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.GetNoArena();
}
inline void ReqAckLeaveGuild::set_guild_name(const ::std::string& value) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckLeaveGuild.guild_name)
}
#if LANG_CXX11
inline void ReqAckLeaveGuild::set_guild_name(::std::string&& value) {
  
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckLeaveGuild.guild_name)
}
#endif
inline void ReqAckLeaveGuild::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckLeaveGuild.guild_name)
}
inline void ReqAckLeaveGuild::set_guild_name(const char* value, size_t size) {
  
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckLeaveGuild.guild_name)
}
inline ::std::string* ReqAckLeaveGuild::mutable_guild_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckLeaveGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_name)
  
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckLeaveGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    
  } else {
    
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqAckOprGuildMember

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckOprGuildMember::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprGuildMember::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.guild_id)
  return guild_id_;
}
inline void ReqAckOprGuildMember::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.guild_id)
}

// .AFMsg.Ident member_id = 2;
inline bool ReqAckOprGuildMember::has_member_id() const {
  return this != internal_default_instance() && member_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprGuildMember::member_id() const {
  const ::AFMsg::Ident* p = member_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.member_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.member_id)
  
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::mutable_member_id() {
  
  if (member_id_ == NULL) {
    member_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.member_id)
  return member_id_;
}
inline void ReqAckOprGuildMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    
  } else {
    
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.member_id)
}

// .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
inline void ReqAckOprGuildMember::clear_type() {
  type_ = 0;
}
inline ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.type)
  return static_cast< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(type_);
}
inline void ReqAckOprGuildMember::set_type(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuildMember.type)
}

// -------------------------------------------------------------------

// ReqAckOprGuild

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckOprGuild::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprGuild::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprGuild::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.guild_id)
  return guild_id_;
}
inline void ReqAckOprGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.guild_id)
}

// .AFMsg.Ident player_id = 2;
inline bool ReqAckOprGuild::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprGuild::player_id() const {
  const ::AFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprGuild::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.player_id)
  
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprGuild::mutable_player_id() {
  
  if (player_id_ == NULL) {
    player_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.player_id)
  return player_id_;
}
inline void ReqAckOprGuild::set_allocated_player_id(::AFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.player_id)
}

// .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
inline void ReqAckOprGuild::clear_type() {
  type_ = 0;
}
inline ::AFMsg::ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.type)
  return static_cast< ::AFMsg::ReqAckOprGuild_EGGuildOprType >(type_);
}
inline void ReqAckOprGuild::set_type(::AFMsg::ReqAckOprGuild_EGGuildOprType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.type)
}

// string Recruit_data = 4;
inline void ReqAckOprGuild::clear_recruit_data() {
  recruit_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckOprGuild::recruit_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.GetNoArena();
}
inline void ReqAckOprGuild::set_recruit_data(const ::std::string& value) {
  
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Recruit_data)
}
#if LANG_CXX11
inline void ReqAckOprGuild::set_recruit_data(::std::string&& value) {
  
  recruit_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckOprGuild.Recruit_data)
}
#endif
inline void ReqAckOprGuild::set_recruit_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Recruit_data)
}
inline void ReqAckOprGuild::set_recruit_data(const char* value, size_t size) {
  
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Recruit_data)
}
inline ::std::string* ReqAckOprGuild::mutable_recruit_data() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckOprGuild::release_recruit_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Recruit_data)
  
  return recruit_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_allocated_recruit_data(::std::string* recruit_data) {
  if (recruit_data != NULL) {
    
  } else {
    
  }
  recruit_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recruit_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Recruit_data)
}

// string Ad_data = 5;
inline void ReqAckOprGuild::clear_ad_data() {
  ad_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckOprGuild::ad_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.GetNoArena();
}
inline void ReqAckOprGuild::set_ad_data(const ::std::string& value) {
  
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Ad_data)
}
#if LANG_CXX11
inline void ReqAckOprGuild::set_ad_data(::std::string&& value) {
  
  ad_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckOprGuild.Ad_data)
}
#endif
inline void ReqAckOprGuild::set_ad_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Ad_data)
}
inline void ReqAckOprGuild::set_ad_data(const char* value, size_t size) {
  
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Ad_data)
}
inline ::std::string* ReqAckOprGuild::mutable_ad_data() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckOprGuild::release_ad_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Ad_data)
  
  return ad_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_allocated_ad_data(::std::string* ad_data) {
  if (ad_data != NULL) {
    
  } else {
    
  }
  ad_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ad_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Ad_data)
}

// -------------------------------------------------------------------

// ReqAckDonateGuildItem

// .AFMsg.Ident guild_id = 1;
inline bool ReqAckDonateGuildItem::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckDonateGuildItem::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.guild_id)
  return guild_id_;
}
inline void ReqAckDonateGuildItem::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.guild_id)
}

// .AFMsg.Ident target_id = 2;
inline bool ReqAckDonateGuildItem::has_target_id() const {
  return this != internal_default_instance() && target_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckDonateGuildItem::target_id() const {
  const ::AFMsg::Ident* p = target_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.target_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.target_id)
  
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::mutable_target_id() {
  
  if (target_id_ == NULL) {
    target_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.target_id)
  return target_id_;
}
inline void ReqAckDonateGuildItem::set_allocated_target_id(::AFMsg::Ident* target_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.target_id)
}

// repeated .AFMsg.ItemStruct item_list = 3;
inline int ReqAckDonateGuildItem::item_list_size() const {
  return item_list_.size();
}
inline void ReqAckDonateGuildItem::clear_item_list() {
  item_list_.Clear();
}
inline ::AFMsg::ItemStruct* ReqAckDonateGuildItem::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckDonateGuildItem::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return &item_list_;
}
inline const ::AFMsg::ItemStruct& ReqAckDonateGuildItem::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqAckDonateGuildItem::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckDonateGuildItem::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// ReqGuildEctypeInfo

// .AFMsg.Ident selfid = 1;
inline bool ReqGuildEctypeInfo::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqGuildEctypeInfo::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.selfid)
  return selfid_;
}
inline void ReqGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.selfid)
}

// .AFMsg.Ident guild_id = 2;
inline bool ReqGuildEctypeInfo::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqGuildEctypeInfo::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.guild_id)
  return guild_id_;
}
inline void ReqGuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.guild_id)
}

// -------------------------------------------------------------------

// GuildEctypeInfo

// .AFMsg.Ident guild_id = 1;
inline bool GuildEctypeInfo::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& GuildEctypeInfo::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* GuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GuildEctypeInfo.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* GuildEctypeInfo::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GuildEctypeInfo.guild_id)
  return guild_id_;
}
inline void GuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GuildEctypeInfo.guild_id)
}

// int64 server_id = 2;
inline void GuildEctypeInfo::clear_server_id() {
  server_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuildEctypeInfo::server_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.server_id)
  return server_id_;
}
inline void GuildEctypeInfo::set_server_id(::google::protobuf::int64 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.server_id)
}

// int64 Ectype_id = 3;
inline void GuildEctypeInfo::clear_ectype_id() {
  ectype_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuildEctypeInfo::ectype_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_id)
  return ectype_id_;
}
inline void GuildEctypeInfo::set_ectype_id(::google::protobuf::int64 value) {
  
  ectype_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_id)
}

// int64 Ectype_Group = 4;
inline void GuildEctypeInfo::clear_ectype_group() {
  ectype_group_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuildEctypeInfo::ectype_group() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_Group)
  return ectype_group_;
}
inline void GuildEctypeInfo::set_ectype_group(::google::protobuf::int64 value) {
  
  ectype_group_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_Group)
}

// -------------------------------------------------------------------

// AckGuildEctypeInfo

// .AFMsg.Ident selfid = 1;
inline bool AckGuildEctypeInfo::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckGuildEctypeInfo::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckGuildEctypeInfo::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.selfid)
  return selfid_;
}
inline void AckGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.selfid)
}

// .AFMsg.GuildEctypeInfo xectypeinfo = 2;
inline bool AckGuildEctypeInfo::has_xectypeinfo() const {
  return this != internal_default_instance() && xectypeinfo_ != NULL;
}
inline void AckGuildEctypeInfo::clear_xectypeinfo() {
  if (GetArenaNoVirtual() == NULL && xectypeinfo_ != NULL) {
    delete xectypeinfo_;
  }
  xectypeinfo_ = NULL;
}
inline const ::AFMsg::GuildEctypeInfo& AckGuildEctypeInfo::xectypeinfo() const {
  const ::AFMsg::GuildEctypeInfo* p = xectypeinfo_;
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::GuildEctypeInfo*>(
      &::AFMsg::_GuildEctypeInfo_default_instance_);
}
inline ::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
inline ::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::mutable_xectypeinfo() {
  
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = ::google::protobuf::Arena::Create< ::AFMsg::GuildEctypeInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
inline void AckGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xectypeinfo_;
  }
  if (xectypeinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xectypeinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xectypeinfo, submessage_arena);
    }
    
  } else {
    
  }
  xectypeinfo_ = xectypeinfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.xectypeinfo)
}

// -------------------------------------------------------------------

// SetGuildEctypeInfo

// .AFMsg.Ident selfid = 1;
inline bool SetGuildEctypeInfo::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& SetGuildEctypeInfo::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* SetGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* SetGuildEctypeInfo::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.selfid)
  return selfid_;
}
inline void SetGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.selfid)
}

// .AFMsg.GuildEctypeInfo xectypeinfo = 2;
inline bool SetGuildEctypeInfo::has_xectypeinfo() const {
  return this != internal_default_instance() && xectypeinfo_ != NULL;
}
inline void SetGuildEctypeInfo::clear_xectypeinfo() {
  if (GetArenaNoVirtual() == NULL && xectypeinfo_ != NULL) {
    delete xectypeinfo_;
  }
  xectypeinfo_ = NULL;
}
inline const ::AFMsg::GuildEctypeInfo& SetGuildEctypeInfo::xectypeinfo() const {
  const ::AFMsg::GuildEctypeInfo* p = xectypeinfo_;
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::GuildEctypeInfo*>(
      &::AFMsg::_GuildEctypeInfo_default_instance_);
}
inline ::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
inline ::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::mutable_xectypeinfo() {
  
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = ::google::protobuf::Arena::Create< ::AFMsg::GuildEctypeInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
inline void SetGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xectypeinfo_;
  }
  if (xectypeinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xectypeinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xectypeinfo, submessage_arena);
    }
    
  } else {
    
  }
  xectypeinfo_ = xectypeinfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.xectypeinfo)
}

// -------------------------------------------------------------------

// ReqEnterGuildEctype

// .AFMsg.Ident selfid = 1;
inline bool ReqEnterGuildEctype::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqEnterGuildEctype::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGuildEctype.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqEnterGuildEctype::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGuildEctype.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqEnterGuildEctype::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGuildEctype.selfid)
  return selfid_;
}
inline void ReqEnterGuildEctype::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGuildEctype.selfid)
}

// -------------------------------------------------------------------

// ChatInfo

// .AFMsg.ChatInfo.EChatType chat_type = 1;
inline void ChatInfo::clear_chat_type() {
  chat_type_ = 0;
}
inline ::AFMsg::ChatInfo_EChatType ChatInfo::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_type)
  return static_cast< ::AFMsg::ChatInfo_EChatType >(chat_type_);
}
inline void ChatInfo::set_chat_type(::AFMsg::ChatInfo_EChatType value) {
  
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_type)
}

// bytes chat_info = 2;
inline void ChatInfo::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatInfo::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_info)
  return chat_info_.GetNoArena();
}
inline void ChatInfo::set_chat_info(const ::std::string& value) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_info)
}
#if LANG_CXX11
inline void ChatInfo::set_chat_info(::std::string&& value) {
  
  chat_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ChatInfo.chat_info)
}
#endif
inline void ChatInfo::set_chat_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.chat_info)
}
inline void ChatInfo::set_chat_info(const void* value, size_t size) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.chat_info)
}
inline ::std::string* ChatInfo::mutable_chat_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.chat_info)
  
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    
  } else {
    
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.chat_info)
}

// int64 chat_time = 3;
inline void ChatInfo::clear_chat_time() {
  chat_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatInfo::chat_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_time)
  return chat_time_;
}
inline void ChatInfo::set_chat_time(::google::protobuf::int64 value) {
  
  chat_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_time)
}

// bytes addtional_info = 4;
inline void ChatInfo::clear_addtional_info() {
  addtional_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatInfo::addtional_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.GetNoArena();
}
inline void ChatInfo::set_addtional_info(const ::std::string& value) {
  
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.addtional_info)
}
#if LANG_CXX11
inline void ChatInfo::set_addtional_info(::std::string&& value) {
  
  addtional_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ChatInfo.addtional_info)
}
#endif
inline void ChatInfo::set_addtional_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.addtional_info)
}
inline void ChatInfo::set_addtional_info(const void* value, size_t size) {
  
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.addtional_info)
}
inline ::std::string* ChatInfo::mutable_addtional_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_addtional_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.addtional_info)
  
  return addtional_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_addtional_info(::std::string* addtional_info) {
  if (addtional_info != NULL) {
    
  } else {
    
  }
  addtional_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtional_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.addtional_info)
}

// .AFMsg.Ident send_id = 5;
inline bool ChatInfo::has_send_id() const {
  return this != internal_default_instance() && send_id_ != NULL;
}
inline const ::AFMsg::Ident& ChatInfo::send_id() const {
  const ::AFMsg::Ident* p = send_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ChatInfo::release_send_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_id)
  
  ::AFMsg::Ident* temp = send_id_;
  send_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ChatInfo::mutable_send_id() {
  
  if (send_id_ == NULL) {
    send_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_id)
  return send_id_;
}
inline void ChatInfo::set_allocated_send_id(::AFMsg::Ident* send_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(send_id_);
  }
  if (send_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_id, submessage_arena);
    }
    
  } else {
    
  }
  send_id_ = send_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_id)
}

// bytes send_name = 6;
inline void ChatInfo::clear_send_name() {
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatInfo::send_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_name)
  return send_name_.GetNoArena();
}
inline void ChatInfo::set_send_name(const ::std::string& value) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_name)
}
#if LANG_CXX11
inline void ChatInfo::set_send_name(::std::string&& value) {
  
  send_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ChatInfo.send_name)
}
#endif
inline void ChatInfo::set_send_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.send_name)
}
inline void ChatInfo::set_send_name(const void* value, size_t size) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.send_name)
}
inline ::std::string* ChatInfo::mutable_send_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_name)
  return send_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_send_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_name)
  
  return send_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_send_name(::std::string* send_name) {
  if (send_name != NULL) {
    
  } else {
    
  }
  send_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_name)
}

// int32 send_level = 7;
inline void ChatInfo::clear_send_level() {
  send_level_ = 0;
}
inline ::google::protobuf::int32 ChatInfo::send_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_level)
  return send_level_;
}
inline void ChatInfo::set_send_level(::google::protobuf::int32 value) {
  
  send_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_level)
}

// repeated .AFMsg.Ident recvier_id = 8;
inline int ChatInfo::recvier_id_size() const {
  return recvier_id_.size();
}
inline ::AFMsg::Ident* ChatInfo::mutable_recvier_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ChatInfo::mutable_recvier_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ChatInfo.recvier_id)
  return &recvier_id_;
}
inline const ::AFMsg::Ident& ChatInfo::recvier_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Get(index);
}
inline ::AFMsg::Ident* ChatInfo::add_recvier_id() {
  // @@protoc_insertion_point(field_add:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ChatInfo::recvier_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ChatInfo.recvier_id)
  return recvier_id_;
}

// bytes guid_name = 9;
inline void ChatInfo::clear_guid_name() {
  guid_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatInfo::guid_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.guid_name)
  return guid_name_.GetNoArena();
}
inline void ChatInfo::set_guid_name(const ::std::string& value) {
  
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.guid_name)
}
#if LANG_CXX11
inline void ChatInfo::set_guid_name(::std::string&& value) {
  
  guid_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ChatInfo.guid_name)
}
#endif
inline void ChatInfo::set_guid_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.guid_name)
}
inline void ChatInfo::set_guid_name(const void* value, size_t size) {
  
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.guid_name)
}
inline ::std::string* ChatInfo::mutable_guid_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.guid_name)
  return guid_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_guid_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.guid_name)
  
  return guid_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_guid_name(::std::string* guid_name) {
  if (guid_name != NULL) {
    
  } else {
    
  }
  guid_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.guid_name)
}

// -------------------------------------------------------------------

// ReqAckCreateChatGroup

// bytes name = 1;
inline void ReqAckCreateChatGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckCreateChatGroup::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.name)
  return name_.GetNoArena();
}
inline void ReqAckCreateChatGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.name)
}
#if LANG_CXX11
inline void ReqAckCreateChatGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAckCreateChatGroup.name)
}
#endif
inline void ReqAckCreateChatGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateChatGroup.name)
}
inline void ReqAckCreateChatGroup::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateChatGroup.name)
}
inline ::std::string* ReqAckCreateChatGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckCreateChatGroup::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateChatGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.name)
}

// .AFMsg.Ident selfid = 2;
inline bool ReqAckCreateChatGroup::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckCreateChatGroup::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.selfid)
  return selfid_;
}
inline void ReqAckCreateChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.selfid)
}

// .AFMsg.Ident xChatGroupid = 3;
inline bool ReqAckCreateChatGroup::has_xchatgroupid() const {
  return this != internal_default_instance() && xchatgroupid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckCreateChatGroup::xchatgroupid() const {
  const ::AFMsg::Ident* p = xchatgroupid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::mutable_xchatgroupid() {
  
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline void ReqAckCreateChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(xchatgroupid_);
  }
  if (xchatgroupid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xchatgroupid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xchatgroupid, submessage_arena);
    }
    
  } else {
    
  }
  xchatgroupid_ = xchatgroupid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
}

// int32 chatType = 4;
inline void ReqAckCreateChatGroup::clear_chattype() {
  chattype_ = 0;
}
inline ::google::protobuf::int32 ReqAckCreateChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.chatType)
  return chattype_;
}
inline void ReqAckCreateChatGroup::set_chattype(::google::protobuf::int32 value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.chatType)
}

// -------------------------------------------------------------------

// ReqAckjoinChatGroup

// .AFMsg.Ident selfid = 1;
inline bool ReqAckjoinChatGroup::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckjoinChatGroup::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.selfid)
  return selfid_;
}
inline void ReqAckjoinChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.selfid)
}

// .AFMsg.Ident xChatGroupid = 2;
inline bool ReqAckjoinChatGroup::has_xchatgroupid() const {
  return this != internal_default_instance() && xchatgroupid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckjoinChatGroup::xchatgroupid() const {
  const ::AFMsg::Ident* p = xchatgroupid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::mutable_xchatgroupid() {
  
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline void ReqAckjoinChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(xchatgroupid_);
  }
  if (xchatgroupid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xchatgroupid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xchatgroupid, submessage_arena);
    }
    
  } else {
    
  }
  xchatgroupid_ = xchatgroupid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
}

// int64 result = 3;
inline void ReqAckjoinChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqAckjoinChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.result)
  return result_;
}
inline void ReqAckjoinChatGroup::set_result(::google::protobuf::int64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.result)
}

// int32 chatType = 4;
inline void ReqAckjoinChatGroup::clear_chattype() {
  chattype_ = 0;
}
inline ::google::protobuf::int32 ReqAckjoinChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.chatType)
  return chattype_;
}
inline void ReqAckjoinChatGroup::set_chattype(::google::protobuf::int32 value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.chatType)
}

// -------------------------------------------------------------------

// ReqAckQuitChatGroup

// .AFMsg.Ident selfid = 1;
inline bool ReqAckQuitChatGroup::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckQuitChatGroup::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.selfid)
  return selfid_;
}
inline void ReqAckQuitChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.selfid)
}

// .AFMsg.Ident xChatGroupid = 2;
inline bool ReqAckQuitChatGroup::has_xchatgroupid() const {
  return this != internal_default_instance() && xchatgroupid_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckQuitChatGroup::xchatgroupid() const {
  const ::AFMsg::Ident* p = xchatgroupid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::mutable_xchatgroupid() {
  
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline void ReqAckQuitChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(xchatgroupid_);
  }
  if (xchatgroupid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xchatgroupid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xchatgroupid, submessage_arena);
    }
    
  } else {
    
  }
  xchatgroupid_ = xchatgroupid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
}

// int64 result = 3;
inline void ReqAckQuitChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqAckQuitChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.result)
  return result_;
}
inline void ReqAckQuitChatGroup::set_result(::google::protobuf::int64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckQuitChatGroup.result)
}

// -------------------------------------------------------------------

// ReqSubscriptionChatGroup

// .AFMsg.Ident selfid = 1;
inline bool ReqSubscriptionChatGroup::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqSubscriptionChatGroup::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSubscriptionChatGroup.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.selfid)
  return selfid_;
}
inline void ReqSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
inline int ReqSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
inline const ::AFMsg::Ident& ReqSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

// -------------------------------------------------------------------

// ReqCancelSubscriptionChatGroup

// .AFMsg.Ident selfid = 1;
inline bool ReqCancelSubscriptionChatGroup::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return selfid_;
}
inline void ReqCancelSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
inline int ReqCancelSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqCancelSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
inline const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqCancelSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

// -------------------------------------------------------------------

// ReqIntensifylevelToEquip

// .AFMsg.Ident selfid = 1;
inline bool ReqIntensifylevelToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqIntensifylevelToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.selfid)
  return selfid_;
}
inline void ReqIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool ReqIntensifylevelToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& ReqIntensifylevelToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.equipid)
  return equipid_;
}
inline void ReqIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.equipid)
}

// -------------------------------------------------------------------

// AckIntensifylevelToEquip

// .AFMsg.Ident selfid = 1;
inline bool AckIntensifylevelToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckIntensifylevelToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.selfid)
  return selfid_;
}
inline void AckIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool AckIntensifylevelToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& AckIntensifylevelToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.equipid)
  return equipid_;
}
inline void AckIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.equipid)
}

// int32 result = 3;
inline void AckIntensifylevelToEquip::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AckIntensifylevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.result)
  return result_;
}
inline void AckIntensifylevelToEquip::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckIntensifylevelToEquip.result)
}

// -------------------------------------------------------------------

// ReqHoleToEquip

// .AFMsg.Ident selfid = 1;
inline bool ReqHoleToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqHoleToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqHoleToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.selfid)
  return selfid_;
}
inline void ReqHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool ReqHoleToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& ReqHoleToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqHoleToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.equipid)
  return equipid_;
}
inline void ReqHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.equipid)
}

// -------------------------------------------------------------------

// AckHoleToEquip

// .AFMsg.Ident selfid = 1;
inline bool AckHoleToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckHoleToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckHoleToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.selfid)
  return selfid_;
}
inline void AckHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool AckHoleToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& AckHoleToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckHoleToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.equipid)
  return equipid_;
}
inline void AckHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.equipid)
}

// int32 result = 3;
inline void AckHoleToEquip::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AckHoleToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.result)
  return result_;
}
inline void AckHoleToEquip::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckHoleToEquip.result)
}

// -------------------------------------------------------------------

// ReqInlaystoneToEquip

// .AFMsg.Ident selfid = 1;
inline bool ReqInlaystoneToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqInlaystoneToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.selfid)
  return selfid_;
}
inline void ReqInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool ReqInlaystoneToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& ReqInlaystoneToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.equipid)
  return equipid_;
}
inline void ReqInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.equipid)
}

// bytes stoneid = 3;
inline void ReqInlaystoneToEquip::clear_stoneid() {
  stoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqInlaystoneToEquip::stoneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.GetNoArena();
}
inline void ReqInlaystoneToEquip::set_stoneid(const ::std::string& value) {
  
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.stoneid)
}
#if LANG_CXX11
inline void ReqInlaystoneToEquip::set_stoneid(::std::string&& value) {
  
  stoneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqInlaystoneToEquip.stoneid)
}
#endif
inline void ReqInlaystoneToEquip::set_stoneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqInlaystoneToEquip.stoneid)
}
inline void ReqInlaystoneToEquip::set_stoneid(const void* value, size_t size) {
  
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqInlaystoneToEquip.stoneid)
}
inline ::std::string* ReqInlaystoneToEquip::mutable_stoneid() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqInlaystoneToEquip::release_stoneid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.stoneid)
  
  return stoneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqInlaystoneToEquip::set_allocated_stoneid(::std::string* stoneid) {
  if (stoneid != NULL) {
    
  } else {
    
  }
  stoneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoneid);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.stoneid)
}

// int32 hole_index = 4;
inline void ReqInlaystoneToEquip::clear_hole_index() {
  hole_index_ = 0;
}
inline ::google::protobuf::int32 ReqInlaystoneToEquip::hole_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.hole_index)
  return hole_index_;
}
inline void ReqInlaystoneToEquip::set_hole_index(::google::protobuf::int32 value) {
  
  hole_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.hole_index)
}

// -------------------------------------------------------------------

// AckInlaystoneToEquip

// .AFMsg.Ident selfid = 1;
inline bool AckInlaystoneToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckInlaystoneToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.selfid)
  return selfid_;
}
inline void AckInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool AckInlaystoneToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& AckInlaystoneToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.equipid)
  return equipid_;
}
inline void AckInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.equipid)
}

// int32 result = 3;
inline void AckInlaystoneToEquip::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AckInlaystoneToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.result)
  return result_;
}
inline void AckInlaystoneToEquip::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckInlaystoneToEquip.result)
}

// -------------------------------------------------------------------

// ReqElementlevelToEquip

// .AFMsg.Ident selfid = 1;
inline bool ReqElementlevelToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqElementlevelToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.selfid)
  return selfid_;
}
inline void ReqElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool ReqElementlevelToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& ReqElementlevelToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.equipid)
  return equipid_;
}
inline void ReqElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.equipid)
}

// .AFMsg.EGameElementType eElementType = 3;
inline void ReqElementlevelToEquip::clear_eelementtype() {
  eelementtype_ = 0;
}
inline ::AFMsg::EGameElementType ReqElementlevelToEquip::eelementtype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.eElementType)
  return static_cast< ::AFMsg::EGameElementType >(eelementtype_);
}
inline void ReqElementlevelToEquip::set_eelementtype(::AFMsg::EGameElementType value) {
  
  eelementtype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqElementlevelToEquip.eElementType)
}

// -------------------------------------------------------------------

// AckElementlevelToEquip

// .AFMsg.Ident selfid = 1;
inline bool AckElementlevelToEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckElementlevelToEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.selfid)
  return selfid_;
}
inline void AckElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool AckElementlevelToEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& AckElementlevelToEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.equipid)
  return equipid_;
}
inline void AckElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.equipid)
}

// int32 result = 3;
inline void AckElementlevelToEquip::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AckElementlevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.result)
  return result_;
}
inline void AckElementlevelToEquip::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckElementlevelToEquip.result)
}

// -------------------------------------------------------------------

// ReqSetFightHero

// .AFMsg.Ident selfid = 1;
inline bool ReqSetFightHero::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqSetFightHero::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSetFightHero::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSetFightHero::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.selfid)
  return selfid_;
}
inline void ReqSetFightHero::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.selfid)
}

// .AFMsg.Ident Heroid = 2;
inline bool ReqSetFightHero::has_heroid() const {
  return this != internal_default_instance() && heroid_ != NULL;
}
inline const ::AFMsg::Ident& ReqSetFightHero::heroid() const {
  const ::AFMsg::Ident* p = heroid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.Heroid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSetFightHero::release_heroid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.Heroid)
  
  ::AFMsg::Ident* temp = heroid_;
  heroid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSetFightHero::mutable_heroid() {
  
  if (heroid_ == NULL) {
    heroid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.Heroid)
  return heroid_;
}
inline void ReqSetFightHero::set_allocated_heroid(::AFMsg::Ident* heroid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heroid_);
  }
  if (heroid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heroid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heroid, submessage_arena);
    }
    
  } else {
    
  }
  heroid_ = heroid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.Heroid)
}

// int32 FightPos = 3;
inline void ReqSetFightHero::clear_fightpos() {
  fightpos_ = 0;
}
inline ::google::protobuf::int32 ReqSetFightHero::fightpos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.FightPos)
  return fightpos_;
}
inline void ReqSetFightHero::set_fightpos(::google::protobuf::int32 value) {
  
  fightpos_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSetFightHero.FightPos)
}

// -------------------------------------------------------------------

// ReqWearEquip

// .AFMsg.Ident selfid = 1;
inline bool ReqWearEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqWearEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqWearEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.selfid)
  return selfid_;
}
inline void ReqWearEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool ReqWearEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& ReqWearEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqWearEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.equipid)
  return equipid_;
}
inline void ReqWearEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.equipid)
}

// .AFMsg.Ident Targetid = 3;
inline bool ReqWearEquip::has_targetid() const {
  return this != internal_default_instance() && targetid_ != NULL;
}
inline const ::AFMsg::Ident& ReqWearEquip::targetid() const {
  const ::AFMsg::Ident* p = targetid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.Targetid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqWearEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.Targetid)
  
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_targetid() {
  
  if (targetid_ == NULL) {
    targetid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.Targetid)
  return targetid_;
}
inline void ReqWearEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(targetid_);
  }
  if (targetid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetid, submessage_arena);
    }
    
  } else {
    
  }
  targetid_ = targetid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.Targetid)
}

// -------------------------------------------------------------------

// TakeOffEquip

// .AFMsg.Ident selfid = 1;
inline bool TakeOffEquip::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& TakeOffEquip::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TakeOffEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.selfid)
  return selfid_;
}
inline void TakeOffEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.selfid)
}

// .AFMsg.Ident equipid = 2;
inline bool TakeOffEquip::has_equipid() const {
  return this != internal_default_instance() && equipid_ != NULL;
}
inline const ::AFMsg::Ident& TakeOffEquip::equipid() const {
  const ::AFMsg::Ident* p = equipid_;
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.equipid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TakeOffEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.equipid)
  
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_equipid() {
  
  if (equipid_ == NULL) {
    equipid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.equipid)
  return equipid_;
}
inline void TakeOffEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(equipid_);
  }
  if (equipid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equipid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.equipid)
}

// .AFMsg.Ident Targetid = 3;
inline bool TakeOffEquip::has_targetid() const {
  return this != internal_default_instance() && targetid_ != NULL;
}
inline const ::AFMsg::Ident& TakeOffEquip::targetid() const {
  const ::AFMsg::Ident* p = targetid_;
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.Targetid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TakeOffEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.Targetid)
  
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_targetid() {
  
  if (targetid_ == NULL) {
    targetid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.Targetid)
  return targetid_;
}
inline void TakeOffEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(targetid_);
  }
  if (targetid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetid, submessage_arena);
    }
    
  } else {
    
  }
  targetid_ = targetid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.Targetid)
}

// -------------------------------------------------------------------

// ReqMiningTitle

// .AFMsg.Ident selfid = 1;
inline bool ReqMiningTitle::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqMiningTitle::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqMiningTitle::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMiningTitle.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqMiningTitle::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMiningTitle.selfid)
  return selfid_;
}
inline void ReqMiningTitle::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMiningTitle.selfid)
}

// int32 x = 2;
inline void ReqMiningTitle::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 ReqMiningTitle::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.x)
  return x_;
}
inline void ReqMiningTitle::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.x)
}

// int32 y = 3;
inline void ReqMiningTitle::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 ReqMiningTitle::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.y)
  return y_;
}
inline void ReqMiningTitle::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.y)
}

// -------------------------------------------------------------------

// ReqSendMail

// .AFMsg.Ident selfid = 1;
inline bool ReqSendMail::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqSendMail::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSendMail::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSendMail::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.selfid)
  return selfid_;
}
inline void ReqSendMail::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.selfid)
}

// .AFMsg.Ident reciever = 2;
inline bool ReqSendMail::has_reciever() const {
  return this != internal_default_instance() && reciever_ != NULL;
}
inline const ::AFMsg::Ident& ReqSendMail::reciever() const {
  const ::AFMsg::Ident* p = reciever_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.reciever)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSendMail::release_reciever() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.reciever)
  
  ::AFMsg::Ident* temp = reciever_;
  reciever_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSendMail::mutable_reciever() {
  
  if (reciever_ == NULL) {
    reciever_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.reciever)
  return reciever_;
}
inline void ReqSendMail::set_allocated_reciever(::AFMsg::Ident* reciever) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reciever_);
  }
  if (reciever) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reciever = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reciever, submessage_arena);
    }
    
  } else {
    
  }
  reciever_ = reciever;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.reciever)
}

// repeated .AFMsg.ItemStruct item_list = 3;
inline int ReqSendMail::item_list_size() const {
  return item_list_.size();
}
inline void ReqSendMail::clear_item_list() {
  item_list_.Clear();
}
inline ::AFMsg::ItemStruct* ReqSendMail::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqSendMail::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.item_list)
  return &item_list_;
}
inline const ::AFMsg::ItemStruct& ReqSendMail::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqSendMail::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqSendMail::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.item_list)
  return item_list_;
}

// repeated .AFMsg.CurrencyStruct currency_list = 4;
inline int ReqSendMail::currency_list_size() const {
  return currency_list_.size();
}
inline void ReqSendMail::clear_currency_list() {
  currency_list_.Clear();
}
inline ::AFMsg::CurrencyStruct* ReqSendMail::mutable_currency_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >*
ReqSendMail::mutable_currency_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.currency_list)
  return &currency_list_;
}
inline const ::AFMsg::CurrencyStruct& ReqSendMail::currency_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Get(index);
}
inline ::AFMsg::CurrencyStruct* ReqSendMail::add_currency_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >&
ReqSendMail::currency_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.currency_list)
  return currency_list_;
}

// -------------------------------------------------------------------

// ReqSwitchServer

// .AFMsg.Ident selfid = 1;
inline bool ReqSwitchServer::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& ReqSwitchServer::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSwitchServer::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.selfid)
  return selfid_;
}
inline void ReqSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.selfid)
}

// int64 self_serverid = 2;
inline void ReqSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.self_serverid)
  return self_serverid_;
}
inline void ReqSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.self_serverid)
}

// int64 target_serverid = 3;
inline void ReqSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.target_serverid)
  return target_serverid_;
}
inline void ReqSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.target_serverid)
}

// int64 gate_serverid = 4;
inline void ReqSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void ReqSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.gate_serverid)
}

// int64 SceneID = 5;
inline void ReqSwitchServer::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.SceneID)
  return sceneid_;
}
inline void ReqSwitchServer::set_sceneid(::google::protobuf::int64 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.SceneID)
}

// .AFMsg.Ident client_id = 6;
inline bool ReqSwitchServer::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqSwitchServer::client_id() const {
  const ::AFMsg::Ident* p = client_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqSwitchServer::release_client_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.client_id)
  
  ::AFMsg::Ident* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqSwitchServer::mutable_client_id() {
  
  if (client_id_ == NULL) {
    client_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.client_id)
  return client_id_;
}
inline void ReqSwitchServer::set_allocated_client_id(::AFMsg::Ident* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.client_id)
}

// int64 groupID = 7;
inline void ReqSwitchServer::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.groupID)
  return groupid_;
}
inline void ReqSwitchServer::set_groupid(::google::protobuf::int64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.groupID)
}

// -------------------------------------------------------------------

// AckSwitchServer

// .AFMsg.Ident selfid = 1;
inline bool AckSwitchServer::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::AFMsg::Ident& AckSwitchServer::selfid() const {
  const ::AFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSwitchServer.selfid)
  
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckSwitchServer::mutable_selfid() {
  
  if (selfid_ == NULL) {
    selfid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSwitchServer.selfid)
  return selfid_;
}
inline void AckSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSwitchServer.selfid)
}

// int64 self_serverid = 2;
inline void AckSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.self_serverid)
  return self_serverid_;
}
inline void AckSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.self_serverid)
}

// int64 target_serverid = 3;
inline void AckSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.target_serverid)
  return target_serverid_;
}
inline void AckSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.target_serverid)
}

// int64 gate_serverid = 4;
inline void AckSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void AckSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.gate_serverid)
}

// -------------------------------------------------------------------

// TeamInfo

// .AFMsg.Ident team_id = 1;
inline bool TeamInfo::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& TeamInfo::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TeamInfo::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TeamInfo::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.team_id)
  return team_id_;
}
inline void TeamInfo::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.team_id)
}

// .AFMsg.Ident captain_id = 2;
inline bool TeamInfo::has_captain_id() const {
  return this != internal_default_instance() && captain_id_ != NULL;
}
inline const ::AFMsg::Ident& TeamInfo::captain_id() const {
  const ::AFMsg::Ident* p = captain_id_;
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.captain_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TeamInfo::release_captain_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.captain_id)
  
  ::AFMsg::Ident* temp = captain_id_;
  captain_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TeamInfo::mutable_captain_id() {
  
  if (captain_id_ == NULL) {
    captain_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.captain_id)
  return captain_id_;
}
inline void TeamInfo::set_allocated_captain_id(::AFMsg::Ident* captain_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(captain_id_);
  }
  if (captain_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      captain_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, captain_id, submessage_arena);
    }
    
  } else {
    
  }
  captain_id_ = captain_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.captain_id)
}

// repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
inline int TeamInfo::teammemberinfo_size() const {
  return teammemberinfo_.size();
}
inline void TeamInfo::clear_teammemberinfo() {
  teammemberinfo_.Clear();
}
inline ::AFMsg::TeammemberInfo* TeamInfo::mutable_teammemberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >*
TeamInfo::mutable_teammemberinfo() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.TeamInfo.teammemberInfo)
  return &teammemberinfo_;
}
inline const ::AFMsg::TeammemberInfo& TeamInfo::teammemberinfo(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Get(index);
}
inline ::AFMsg::TeammemberInfo* TeamInfo::add_teammemberinfo() {
  // @@protoc_insertion_point(field_add:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >&
TeamInfo::teammemberinfo() const {
  // @@protoc_insertion_point(field_list:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_;
}

// -------------------------------------------------------------------

// TeammemberInfo

// .AFMsg.Ident player_id = 1;
inline bool TeammemberInfo::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline const ::AFMsg::Ident& TeammemberInfo::player_id() const {
  const ::AFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* TeammemberInfo::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.player_id)
  
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* TeammemberInfo::mutable_player_id() {
  
  if (player_id_ == NULL) {
    player_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.player_id)
  return player_id_;
}
inline void TeammemberInfo::set_allocated_player_id(::AFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.player_id)
}

// string name = 2;
inline void TeammemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeammemberInfo::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.name)
  return name_.GetNoArena();
}
inline void TeammemberInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.name)
}
#if LANG_CXX11
inline void TeammemberInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.TeammemberInfo.name)
}
#endif
inline void TeammemberInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.name)
}
inline void TeammemberInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.name)
}
inline ::std::string* TeammemberInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.name)
}

// int32 nLevel = 3;
inline void TeammemberInfo::clear_nlevel() {
  nlevel_ = 0;
}
inline ::google::protobuf::int32 TeammemberInfo::nlevel() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.nLevel)
  return nlevel_;
}
inline void TeammemberInfo::set_nlevel(::google::protobuf::int32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.nLevel)
}

// int32 job = 4;
inline void TeammemberInfo::clear_job() {
  job_ = 0;
}
inline ::google::protobuf::int32 TeammemberInfo::job() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.job)
  return job_;
}
inline void TeammemberInfo::set_job(::google::protobuf::int32 value) {
  
  job_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.job)
}

// string HeadIcon = 5;
inline void TeammemberInfo::clear_headicon() {
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeammemberInfo::headicon() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.GetNoArena();
}
inline void TeammemberInfo::set_headicon(const ::std::string& value) {
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.HeadIcon)
}
#if LANG_CXX11
inline void TeammemberInfo::set_headicon(::std::string&& value) {
  
  headicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.TeammemberInfo.HeadIcon)
}
#endif
inline void TeammemberInfo::set_headicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.HeadIcon)
}
inline void TeammemberInfo::set_headicon(const char* value, size_t size) {
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.HeadIcon)
}
inline ::std::string* TeammemberInfo::mutable_headicon() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_headicon() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.HeadIcon)
  
  return headicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_headicon(::std::string* headicon) {
  if (headicon != NULL) {
    
  } else {
    
  }
  headicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headicon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.HeadIcon)
}

// -------------------------------------------------------------------

// ReqAckCreateTeam

// .AFMsg.Ident team_id = 1;
inline bool ReqAckCreateTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckCreateTeam::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckCreateTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckCreateTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.team_id)
  return team_id_;
}
inline void ReqAckCreateTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.team_id)
}

// .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckCreateTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckCreateTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::AFMsg::TeamInfo& ReqAckCreateTeam::xteaminfo() const {
  const ::AFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::TeamInfo*>(
      &::AFMsg::_TeamInfo_default_instance_);
}
inline ::AFMsg::TeamInfo* ReqAckCreateTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.xTeamInfo)
  
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::AFMsg::TeamInfo* ReqAckCreateTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    xteaminfo_ = ::google::protobuf::Arena::Create< ::AFMsg::TeamInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckCreateTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckJoinTeam

// .AFMsg.Ident team_id = 1;
inline bool ReqAckJoinTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckJoinTeam::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckJoinTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckJoinTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.team_id)
  return team_id_;
}
inline void ReqAckJoinTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.team_id)
}

// .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckJoinTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckJoinTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::AFMsg::TeamInfo& ReqAckJoinTeam::xteaminfo() const {
  const ::AFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::TeamInfo*>(
      &::AFMsg::_TeamInfo_default_instance_);
}
inline ::AFMsg::TeamInfo* ReqAckJoinTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.xTeamInfo)
  
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::AFMsg::TeamInfo* ReqAckJoinTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    xteaminfo_ = ::google::protobuf::Arena::Create< ::AFMsg::TeamInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckJoinTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckLeaveTeam

// .AFMsg.Ident team_id = 1;
inline bool ReqAckLeaveTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckLeaveTeam::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckLeaveTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckLeaveTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.team_id)
  return team_id_;
}
inline void ReqAckLeaveTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.team_id)
}

// .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckLeaveTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckLeaveTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::AFMsg::TeamInfo& ReqAckLeaveTeam::xteaminfo() const {
  const ::AFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::TeamInfo*>(
      &::AFMsg::_TeamInfo_default_instance_);
}
inline ::AFMsg::TeamInfo* ReqAckLeaveTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::AFMsg::TeamInfo* ReqAckLeaveTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    xteaminfo_ = ::google::protobuf::Arena::Create< ::AFMsg::TeamInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckLeaveTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckOprTeamMember

// .AFMsg.Ident team_id = 1;
inline bool ReqAckOprTeamMember::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprTeamMember::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.team_id)
  return team_id_;
}
inline void ReqAckOprTeamMember::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.team_id)
}

// .AFMsg.Ident member_id = 2;
inline bool ReqAckOprTeamMember::has_member_id() const {
  return this != internal_default_instance() && member_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckOprTeamMember::member_id() const {
  const ::AFMsg::Ident* p = member_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.member_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.member_id)
  
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::mutable_member_id() {
  
  if (member_id_ == NULL) {
    member_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.member_id)
  return member_id_;
}
inline void ReqAckOprTeamMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    
  } else {
    
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.member_id)
}

// .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
inline void ReqAckOprTeamMember::clear_type() {
  type_ = 0;
}
inline ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.type)
  return static_cast< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(type_);
}
inline void ReqAckOprTeamMember::set_type(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprTeamMember.type)
}

// .AFMsg.TeamInfo xTeamInfo = 4;
inline bool ReqAckOprTeamMember::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckOprTeamMember::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::AFMsg::TeamInfo& ReqAckOprTeamMember::xteaminfo() const {
  const ::AFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::TeamInfo*>(
      &::AFMsg::_TeamInfo_default_instance_);
}
inline ::AFMsg::TeamInfo* ReqAckOprTeamMember::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::AFMsg::TeamInfo* ReqAckOprTeamMember::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    xteaminfo_ = ::google::protobuf::Arena::Create< ::AFMsg::TeamInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckOprTeamMember::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckInviteTeam

// .AFMsg.Ident team_id = 1;
inline bool ReqAckInviteTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.team_id)
  return team_id_;
}
inline void ReqAckInviteTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.team_id)
}

// .AFMsg.Ident self_id = 2;
inline bool ReqAckInviteTeam::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.self_id)
  return self_id_;
}
inline void ReqAckInviteTeam::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.self_id)
}

// .AFMsg.Ident invite_target_id = 3;
inline bool ReqAckInviteTeam::has_invite_target_id() const {
  return this != internal_default_instance() && invite_target_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::invite_target_id() const {
  const ::AFMsg::Ident* p = invite_target_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.invite_target_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_invite_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.invite_target_id)
  
  ::AFMsg::Ident* temp = invite_target_id_;
  invite_target_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_invite_target_id() {
  
  if (invite_target_id_ == NULL) {
    invite_target_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_;
}
inline void ReqAckInviteTeam::set_allocated_invite_target_id(::AFMsg::Ident* invite_target_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(invite_target_id_);
  }
  if (invite_target_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invite_target_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invite_target_id, submessage_arena);
    }
    
  } else {
    
  }
  invite_target_id_ = invite_target_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.invite_target_id)
}

// -------------------------------------------------------------------

// ReqTeamEnterEctype

// .AFMsg.Ident team_id = 1;
inline bool ReqTeamEnterEctype::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqTeamEnterEctype::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.team_id)
  return team_id_;
}
inline void ReqTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.team_id)
}

// .AFMsg.Ident self_id = 2;
inline bool ReqTeamEnterEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqTeamEnterEctype::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.self_id)
  return self_id_;
}
inline void ReqTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.self_id)
}

// int32 nEctypeID = 3;
inline void ReqTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void ReqTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nEctypeID)
}

// int32 nGroupID = 4;
inline void ReqTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void ReqTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nGroupID)
}

// int32 nResult = 5;
inline void ReqTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nResult)
  return nresult_;
}
inline void ReqTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nResult)
}

// int32 nServerID = 6;
inline void ReqTeamEnterEctype::clear_nserverid() {
  nserverid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nserverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nServerID)
  return nserverid_;
}
inline void ReqTeamEnterEctype::set_nserverid(::google::protobuf::int32 value) {
  
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nServerID)
}

// -------------------------------------------------------------------

// AckTeamEnterEctype

// .AFMsg.Ident team_id = 1;
inline bool AckTeamEnterEctype::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& AckTeamEnterEctype::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.team_id)
  return team_id_;
}
inline void AckTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.team_id)
}

// .AFMsg.Ident self_id = 2;
inline bool AckTeamEnterEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& AckTeamEnterEctype::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.self_id)
  return self_id_;
}
inline void AckTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.self_id)
}

// int32 nEctypeID = 3;
inline void AckTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void AckTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nEctypeID)
}

// int32 nGroupID = 4;
inline void AckTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void AckTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nGroupID)
}

// int32 nResult = 5;
inline void AckTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nResult)
  return nresult_;
}
inline void AckTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nResult)
}

// -------------------------------------------------------------------

// GridGuildBaseInfo

// .AFMsg.Ident id = 1;
inline bool GridGuildBaseInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::AFMsg::Ident& GridGuildBaseInfo::id() const {
  const ::AFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* GridGuildBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.id)
  
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* GridGuildBaseInfo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.id)
  return id_;
}
inline void GridGuildBaseInfo::set_allocated_id(::AFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.id)
}

// int32 level = 2;
inline void GridGuildBaseInfo::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 GridGuildBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.level)
  return level_;
}
inline void GridGuildBaseInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.level)
}

// int32 count = 3;
inline void GridGuildBaseInfo::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 GridGuildBaseInfo::count() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.count)
  return count_;
}
inline void GridGuildBaseInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.count)
}

// int32 resource = 4;
inline void GridGuildBaseInfo::clear_resource() {
  resource_ = 0;
}
inline ::google::protobuf::int32 GridGuildBaseInfo::resource() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.resource)
  return resource_;
}
inline void GridGuildBaseInfo::set_resource(::google::protobuf::int32 value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.resource)
}

// bytes icon = 5;
inline void GridGuildBaseInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GridGuildBaseInfo::icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.icon)
  return icon_.GetNoArena();
}
inline void GridGuildBaseInfo::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.icon)
}
#if LANG_CXX11
inline void GridGuildBaseInfo::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.GridGuildBaseInfo.icon)
}
#endif
inline void GridGuildBaseInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.GridGuildBaseInfo.icon)
}
inline void GridGuildBaseInfo::set_icon(const void* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.GridGuildBaseInfo.icon)
}
inline ::std::string* GridGuildBaseInfo::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GridGuildBaseInfo::release_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GridGuildBaseInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.icon)
}

// -------------------------------------------------------------------

// ReqBigMapGridInfo

// repeated bytes map_title_id = 1;
inline int ReqBigMapGridInfo::map_title_id_size() const {
  return map_title_id_.size();
}
inline void ReqBigMapGridInfo::clear_map_title_id() {
  map_title_id_.Clear();
}
inline const ::std::string& ReqBigMapGridInfo::map_title_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Get(index);
}
inline ::std::string* ReqBigMapGridInfo::mutable_map_title_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Mutable(index);
}
inline void ReqBigMapGridInfo::set_map_title_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFMsg.ReqBigMapGridInfo.map_title_id)
  map_title_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReqBigMapGridInfo::set_map_title_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AFMsg.ReqBigMapGridInfo.map_title_id)
  map_title_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReqBigMapGridInfo::set_map_title_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  map_title_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline void ReqBigMapGridInfo::set_map_title_id(int index, const void* value, size_t size) {
  map_title_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline ::std::string* ReqBigMapGridInfo::add_map_title_id() {
  // @@protoc_insertion_point(field_add_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Add();
}
inline void ReqBigMapGridInfo::add_map_title_id(const ::std::string& value) {
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFMsg.ReqBigMapGridInfo.map_title_id)
}
#if LANG_CXX11
inline void ReqBigMapGridInfo::add_map_title_id(::std::string&& value) {
  map_title_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AFMsg.ReqBigMapGridInfo.map_title_id)
}
#endif
inline void ReqBigMapGridInfo::add_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline void ReqBigMapGridInfo::add_map_title_id(const void* value, size_t size) {
  map_title_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqBigMapGridInfo::map_title_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqBigMapGridInfo::mutable_map_title_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return &map_title_id_;
}

// -------------------------------------------------------------------

// BigMapGridBaseInfo

// bytes id = 1;
inline void BigMapGridBaseInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigMapGridBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.id)
  return id_.GetNoArena();
}
inline void BigMapGridBaseInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.id)
}
#if LANG_CXX11
inline void BigMapGridBaseInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.BigMapGridBaseInfo.id)
}
#endif
inline void BigMapGridBaseInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapGridBaseInfo.id)
}
inline void BigMapGridBaseInfo::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapGridBaseInfo.id)
}
inline ::std::string* BigMapGridBaseInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapGridBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapGridBaseInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.id)
}

// .AFMsg.GridGuildBaseInfo guild_info = 2;
inline bool BigMapGridBaseInfo::has_guild_info() const {
  return this != internal_default_instance() && guild_info_ != NULL;
}
inline void BigMapGridBaseInfo::clear_guild_info() {
  if (GetArenaNoVirtual() == NULL && guild_info_ != NULL) {
    delete guild_info_;
  }
  guild_info_ = NULL;
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapGridBaseInfo::guild_info() const {
  const ::AFMsg::GridGuildBaseInfo* p = guild_info_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.guild_info)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::GridGuildBaseInfo*>(
      &::AFMsg::_GridGuildBaseInfo_default_instance_);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::release_guild_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.guild_info)
  
  ::AFMsg::GridGuildBaseInfo* temp = guild_info_;
  guild_info_ = NULL;
  return temp;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::mutable_guild_info() {
  
  if (guild_info_ == NULL) {
    guild_info_ = ::google::protobuf::Arena::Create< ::AFMsg::GridGuildBaseInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.guild_info)
  return guild_info_;
}
inline void BigMapGridBaseInfo::set_allocated_guild_info(::AFMsg::GridGuildBaseInfo* guild_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guild_info_;
  }
  if (guild_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_info, submessage_arena);
    }
    
  } else {
    
  }
  guild_info_ = guild_info;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.guild_info)
}

// int32 kingwar_time = 10;
inline void BigMapGridBaseInfo::clear_kingwar_time() {
  kingwar_time_ = 0;
}
inline ::google::protobuf::int32 BigMapGridBaseInfo::kingwar_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwar_time)
  return kingwar_time_;
}
inline void BigMapGridBaseInfo::set_kingwar_time(::google::protobuf::int32 value) {
  
  kingwar_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.kingwar_time)
}

// .AFMsg.Ident kingwarrer = 11;
inline bool BigMapGridBaseInfo::has_kingwarrer() const {
  return this != internal_default_instance() && kingwarrer_ != NULL;
}
inline const ::AFMsg::Ident& BigMapGridBaseInfo::kingwarrer() const {
  const ::AFMsg::Ident* p = kingwarrer_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::release_kingwarrer() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.kingwarrer)
  
  ::AFMsg::Ident* temp = kingwarrer_;
  kingwarrer_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::mutable_kingwarrer() {
  
  if (kingwarrer_ == NULL) {
    kingwarrer_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return kingwarrer_;
}
inline void BigMapGridBaseInfo::set_allocated_kingwarrer(::AFMsg::Ident* kingwarrer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kingwarrer_);
  }
  if (kingwarrer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kingwarrer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kingwarrer, submessage_arena);
    }
    
  } else {
    
  }
  kingwarrer_ = kingwarrer;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.kingwarrer)
}

// int32 hurting_time = 20;
inline void BigMapGridBaseInfo::clear_hurting_time() {
  hurting_time_ = 0;
}
inline ::google::protobuf::int32 BigMapGridBaseInfo::hurting_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurting_time)
  return hurting_time_;
}
inline void BigMapGridBaseInfo::set_hurting_time(::google::protobuf::int32 value) {
  
  hurting_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.hurting_time)
}

// .AFMsg.Ident hurter = 21;
inline bool BigMapGridBaseInfo::has_hurter() const {
  return this != internal_default_instance() && hurter_ != NULL;
}
inline const ::AFMsg::Ident& BigMapGridBaseInfo::hurter() const {
  const ::AFMsg::Ident* p = hurter_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurter)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::release_hurter() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.hurter)
  
  ::AFMsg::Ident* temp = hurter_;
  hurter_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::mutable_hurter() {
  
  if (hurter_ == NULL) {
    hurter_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.hurter)
  return hurter_;
}
inline void BigMapGridBaseInfo::set_allocated_hurter(::AFMsg::Ident* hurter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hurter_);
  }
  if (hurter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hurter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hurter, submessage_arena);
    }
    
  } else {
    
  }
  hurter_ = hurter;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.hurter)
}

// -------------------------------------------------------------------

// BigMapLeaveMsg

// .AFMsg.Ident owner = 1;
inline bool BigMapLeaveMsg::has_owner() const {
  return this != internal_default_instance() && owner_ != NULL;
}
inline const ::AFMsg::Ident& BigMapLeaveMsg::owner() const {
  const ::AFMsg::Ident* p = owner_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* BigMapLeaveMsg::release_owner() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner)
  
  ::AFMsg::Ident* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* BigMapLeaveMsg::mutable_owner() {
  
  if (owner_ == NULL) {
    owner_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner)
  return owner_;
}
inline void BigMapLeaveMsg::set_allocated_owner(::AFMsg::Ident* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(owner_);
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner)
}

// bytes owner_name = 2;
inline void BigMapLeaveMsg::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigMapLeaveMsg::owner_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.GetNoArena();
}
inline void BigMapLeaveMsg::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_name)
}
#if LANG_CXX11
inline void BigMapLeaveMsg::set_owner_name(::std::string&& value) {
  
  owner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.BigMapLeaveMsg.owner_name)
}
#endif
inline void BigMapLeaveMsg::set_owner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.owner_name)
}
inline void BigMapLeaveMsg::set_owner_name(const void* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.owner_name)
}
inline ::std::string* BigMapLeaveMsg::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapLeaveMsg::release_owner_name() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner_name)
}

// bytes msg_data = 3;
inline void BigMapLeaveMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigMapLeaveMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.GetNoArena();
}
inline void BigMapLeaveMsg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_data)
}
#if LANG_CXX11
inline void BigMapLeaveMsg::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.BigMapLeaveMsg.msg_data)
}
#endif
inline void BigMapLeaveMsg::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.msg_data)
}
inline void BigMapLeaveMsg::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.msg_data)
}
inline ::std::string* BigMapLeaveMsg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapLeaveMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.msg_data)
}

// int32 msg_time = 4;
inline void BigMapLeaveMsg::clear_msg_time() {
  msg_time_ = 0;
}
inline ::google::protobuf::int32 BigMapLeaveMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_time)
  return msg_time_;
}
inline void BigMapLeaveMsg::set_msg_time(::google::protobuf::int32 value) {
  
  msg_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_time)
}

// int32 owner_level = 5;
inline void BigMapLeaveMsg::clear_owner_level() {
  owner_level_ = 0;
}
inline ::google::protobuf::int32 BigMapLeaveMsg::owner_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_level)
  return owner_level_;
}
inline void BigMapLeaveMsg::set_owner_level(::google::protobuf::int32 value) {
  
  owner_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_level)
}

// -------------------------------------------------------------------

// BigMapWarHistory

// .AFMsg.GridGuildBaseInfo red_info = 1;
inline bool BigMapWarHistory::has_red_info() const {
  return this != internal_default_instance() && red_info_ != NULL;
}
inline void BigMapWarHistory::clear_red_info() {
  if (GetArenaNoVirtual() == NULL && red_info_ != NULL) {
    delete red_info_;
  }
  red_info_ = NULL;
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::red_info() const {
  const ::AFMsg::GridGuildBaseInfo* p = red_info_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.red_info)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::GridGuildBaseInfo*>(
      &::AFMsg::_GridGuildBaseInfo_default_instance_);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_red_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.red_info)
  
  ::AFMsg::GridGuildBaseInfo* temp = red_info_;
  red_info_ = NULL;
  return temp;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_red_info() {
  
  if (red_info_ == NULL) {
    red_info_ = ::google::protobuf::Arena::Create< ::AFMsg::GridGuildBaseInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.red_info)
  return red_info_;
}
inline void BigMapWarHistory::set_allocated_red_info(::AFMsg::GridGuildBaseInfo* red_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete red_info_;
  }
  if (red_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      red_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, red_info, submessage_arena);
    }
    
  } else {
    
  }
  red_info_ = red_info;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.red_info)
}

// .AFMsg.GridGuildBaseInfo blue_info = 2;
inline bool BigMapWarHistory::has_blue_info() const {
  return this != internal_default_instance() && blue_info_ != NULL;
}
inline void BigMapWarHistory::clear_blue_info() {
  if (GetArenaNoVirtual() == NULL && blue_info_ != NULL) {
    delete blue_info_;
  }
  blue_info_ = NULL;
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::blue_info() const {
  const ::AFMsg::GridGuildBaseInfo* p = blue_info_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.blue_info)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::GridGuildBaseInfo*>(
      &::AFMsg::_GridGuildBaseInfo_default_instance_);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_blue_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.blue_info)
  
  ::AFMsg::GridGuildBaseInfo* temp = blue_info_;
  blue_info_ = NULL;
  return temp;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_blue_info() {
  
  if (blue_info_ == NULL) {
    blue_info_ = ::google::protobuf::Arena::Create< ::AFMsg::GridGuildBaseInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.blue_info)
  return blue_info_;
}
inline void BigMapWarHistory::set_allocated_blue_info(::AFMsg::GridGuildBaseInfo* blue_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blue_info_;
  }
  if (blue_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blue_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blue_info, submessage_arena);
    }
    
  } else {
    
  }
  blue_info_ = blue_info;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.blue_info)
}

// .AFMsg.Ident winner_id = 10;
inline bool BigMapWarHistory::has_winner_id() const {
  return this != internal_default_instance() && winner_id_ != NULL;
}
inline const ::AFMsg::Ident& BigMapWarHistory::winner_id() const {
  const ::AFMsg::Ident* p = winner_id_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.winner_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* BigMapWarHistory::release_winner_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.winner_id)
  
  ::AFMsg::Ident* temp = winner_id_;
  winner_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* BigMapWarHistory::mutable_winner_id() {
  
  if (winner_id_ == NULL) {
    winner_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.winner_id)
  return winner_id_;
}
inline void BigMapWarHistory::set_allocated_winner_id(::AFMsg::Ident* winner_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(winner_id_);
  }
  if (winner_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      winner_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, winner_id, submessage_arena);
    }
    
  } else {
    
  }
  winner_id_ = winner_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.winner_id)
}

// int32 war_time = 11;
inline void BigMapWarHistory::clear_war_time() {
  war_time_ = 0;
}
inline ::google::protobuf::int32 BigMapWarHistory::war_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.war_time)
  return war_time_;
}
inline void BigMapWarHistory::set_war_time(::google::protobuf::int32 value) {
  
  war_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapWarHistory.war_time)
}

// -------------------------------------------------------------------

// BigMapGridDetailInfo

// .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
inline bool BigMapGridDetailInfo::has_grid_base_info() const {
  return this != internal_default_instance() && grid_base_info_ != NULL;
}
inline void BigMapGridDetailInfo::clear_grid_base_info() {
  if (GetArenaNoVirtual() == NULL && grid_base_info_ != NULL) {
    delete grid_base_info_;
  }
  grid_base_info_ = NULL;
}
inline const ::AFMsg::BigMapGridBaseInfo& BigMapGridDetailInfo::grid_base_info() const {
  const ::AFMsg::BigMapGridBaseInfo* p = grid_base_info_;
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::BigMapGridBaseInfo*>(
      &::AFMsg::_BigMapGridBaseInfo_default_instance_);
}
inline ::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::release_grid_base_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridDetailInfo.grid_base_info)
  
  ::AFMsg::BigMapGridBaseInfo* temp = grid_base_info_;
  grid_base_info_ = NULL;
  return temp;
}
inline ::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::mutable_grid_base_info() {
  
  if (grid_base_info_ == NULL) {
    grid_base_info_ = ::google::protobuf::Arena::Create< ::AFMsg::BigMapGridBaseInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return grid_base_info_;
}
inline void BigMapGridDetailInfo::set_allocated_grid_base_info(::AFMsg::BigMapGridBaseInfo* grid_base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete grid_base_info_;
  }
  if (grid_base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      grid_base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grid_base_info, submessage_arena);
    }
    
  } else {
    
  }
  grid_base_info_ = grid_base_info;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridDetailInfo.grid_base_info)
}

// repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
inline int BigMapGridDetailInfo::stay_guid_list_size() const {
  return stay_guid_list_.size();
}
inline void BigMapGridDetailInfo::clear_stay_guid_list() {
  stay_guid_list_.Clear();
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::mutable_stay_guid_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >*
BigMapGridDetailInfo::mutable_stay_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return &stay_guid_list_;
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapGridDetailInfo::stay_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Get(index);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::add_stay_guid_list() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >&
BigMapGridDetailInfo::stay_guid_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_;
}

// repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
inline int BigMapGridDetailInfo::leave_msg_size() const {
  return leave_msg_.size();
}
inline void BigMapGridDetailInfo::clear_leave_msg() {
  leave_msg_.Clear();
}
inline ::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::mutable_leave_msg(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >*
BigMapGridDetailInfo::mutable_leave_msg() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return &leave_msg_;
}
inline const ::AFMsg::BigMapLeaveMsg& BigMapGridDetailInfo::leave_msg(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Get(index);
}
inline ::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::add_leave_msg() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >&
BigMapGridDetailInfo::leave_msg() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_;
}

// repeated .AFMsg.BigMapWarHistory war_history = 4;
inline int BigMapGridDetailInfo::war_history_size() const {
  return war_history_.size();
}
inline void BigMapGridDetailInfo::clear_war_history() {
  war_history_.Clear();
}
inline ::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::mutable_war_history(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >*
BigMapGridDetailInfo::mutable_war_history() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.war_history)
  return &war_history_;
}
inline const ::AFMsg::BigMapWarHistory& BigMapGridDetailInfo::war_history(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Get(index);
}
inline ::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::add_war_history() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >&
BigMapGridDetailInfo::war_history() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_;
}

// -------------------------------------------------------------------

// AckBigMapGridInfo

// repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
inline int AckBigMapGridInfo::map_data_size() const {
  return map_data_.size();
}
inline void AckBigMapGridInfo::clear_map_data() {
  map_data_.Clear();
}
inline ::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::mutable_map_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >*
AckBigMapGridInfo::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapGridInfo.map_data)
  return &map_data_;
}
inline const ::AFMsg::BigMapGridDetailInfo& AckBigMapGridInfo::map_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Get(index);
}
inline ::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::add_map_data() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >&
AckBigMapGridInfo::map_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_;
}

// -------------------------------------------------------------------

// ReqBigMapInfo

// -------------------------------------------------------------------

// AckBigMapInfo

// repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
inline int AckBigMapInfo::grid_base_info_size() const {
  return grid_base_info_.size();
}
inline void AckBigMapInfo::clear_grid_base_info() {
  grid_base_info_.Clear();
}
inline ::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::mutable_grid_base_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >*
AckBigMapInfo::mutable_grid_base_info() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapInfo.grid_base_info)
  return &grid_base_info_;
}
inline const ::AFMsg::BigMapGridBaseInfo& AckBigMapInfo::grid_base_info(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Get(index);
}
inline ::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::add_grid_base_info() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >&
AckBigMapInfo::grid_base_info() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_;
}

// -------------------------------------------------------------------

// ReqHoldMapGrid

// bytes map_title_id = 1;
inline void ReqHoldMapGrid::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqHoldMapGrid::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.GetNoArena();
}
inline void ReqHoldMapGrid::set_map_title_id(const ::std::string& value) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqHoldMapGrid.map_title_id)
}
#if LANG_CXX11
inline void ReqHoldMapGrid::set_map_title_id(::std::string&& value) {
  
  map_title_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqHoldMapGrid.map_title_id)
}
#endif
inline void ReqHoldMapGrid::set_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqHoldMapGrid.map_title_id)
}
inline void ReqHoldMapGrid::set_map_title_id(const void* value, size_t size) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqHoldMapGrid.map_title_id)
}
inline ::std::string* ReqHoldMapGrid::mutable_map_title_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqHoldMapGrid::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.map_title_id)
  
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqHoldMapGrid::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    
  } else {
    
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.map_title_id)
}

// .AFMsg.Ident guild_id = 2;
inline bool ReqHoldMapGrid::has_guild_id() const {
  return this != internal_default_instance() && guild_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqHoldMapGrid::guild_id() const {
  const ::AFMsg::Ident* p = guild_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.guild_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqHoldMapGrid::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.guild_id)
  
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqHoldMapGrid::mutable_guild_id() {
  
  if (guild_id_ == NULL) {
    guild_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.guild_id)
  return guild_id_;
}
inline void ReqHoldMapGrid::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_id_);
  }
  if (guild_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_id, submessage_arena);
    }
    
  } else {
    
  }
  guild_id_ = guild_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.guild_id)
}

// -------------------------------------------------------------------

// AckHoldMapGrid

// -------------------------------------------------------------------

// ReqLeaveMapMsg

// bytes map_title_id = 1;
inline void ReqLeaveMapMsg::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLeaveMapMsg::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.GetNoArena();
}
inline void ReqLeaveMapMsg::set_map_title_id(const ::std::string& value) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqLeaveMapMsg.map_title_id)
}
#if LANG_CXX11
inline void ReqLeaveMapMsg::set_map_title_id(::std::string&& value) {
  
  map_title_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqLeaveMapMsg.map_title_id)
}
#endif
inline void ReqLeaveMapMsg::set_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqLeaveMapMsg.map_title_id)
}
inline void ReqLeaveMapMsg::set_map_title_id(const void* value, size_t size) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqLeaveMapMsg.map_title_id)
}
inline ::std::string* ReqLeaveMapMsg::mutable_map_title_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLeaveMapMsg::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.map_title_id)
  
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLeaveMapMsg::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    
  } else {
    
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.map_title_id)
}

// .AFMsg.BigMapLeaveMsg leave_msg = 2;
inline bool ReqLeaveMapMsg::has_leave_msg() const {
  return this != internal_default_instance() && leave_msg_ != NULL;
}
inline void ReqLeaveMapMsg::clear_leave_msg() {
  if (GetArenaNoVirtual() == NULL && leave_msg_ != NULL) {
    delete leave_msg_;
  }
  leave_msg_ = NULL;
}
inline const ::AFMsg::BigMapLeaveMsg& ReqLeaveMapMsg::leave_msg() const {
  const ::AFMsg::BigMapLeaveMsg* p = leave_msg_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.leave_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::BigMapLeaveMsg*>(
      &::AFMsg::_BigMapLeaveMsg_default_instance_);
}
inline ::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::release_leave_msg() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.leave_msg)
  
  ::AFMsg::BigMapLeaveMsg* temp = leave_msg_;
  leave_msg_ = NULL;
  return temp;
}
inline ::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::mutable_leave_msg() {
  
  if (leave_msg_ == NULL) {
    leave_msg_ = ::google::protobuf::Arena::Create< ::AFMsg::BigMapLeaveMsg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.leave_msg)
  return leave_msg_;
}
inline void ReqLeaveMapMsg::set_allocated_leave_msg(::AFMsg::BigMapLeaveMsg* leave_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leave_msg_;
  }
  if (leave_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leave_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leave_msg, submessage_arena);
    }
    
  } else {
    
  }
  leave_msg_ = leave_msg;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.leave_msg)
}

// -------------------------------------------------------------------

// AckLeaveMapMsg

// -------------------------------------------------------------------

// ReqGetMapAward

// bytes map_title_id = 1;
inline void ReqGetMapAward::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqGetMapAward::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.GetNoArena();
}
inline void ReqGetMapAward::set_map_title_id(const ::std::string& value) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqGetMapAward.map_title_id)
}
#if LANG_CXX11
inline void ReqGetMapAward::set_map_title_id(::std::string&& value) {
  
  map_title_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqGetMapAward.map_title_id)
}
#endif
inline void ReqGetMapAward::set_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqGetMapAward.map_title_id)
}
inline void ReqGetMapAward::set_map_title_id(const void* value, size_t size) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqGetMapAward.map_title_id)
}
inline ::std::string* ReqGetMapAward::mutable_map_title_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqGetMapAward::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGetMapAward.map_title_id)
  
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqGetMapAward::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    
  } else {
    
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGetMapAward.map_title_id)
}

// -------------------------------------------------------------------

// AckGetMapAward

// -------------------------------------------------------------------

// ReqMapHunting

// bytes map_title_id = 1;
inline void ReqMapHunting::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqMapHunting::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.GetNoArena();
}
inline void ReqMapHunting::set_map_title_id(const ::std::string& value) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapHunting.map_title_id)
}
#if LANG_CXX11
inline void ReqMapHunting::set_map_title_id(::std::string&& value) {
  
  map_title_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqMapHunting.map_title_id)
}
#endif
inline void ReqMapHunting::set_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapHunting.map_title_id)
}
inline void ReqMapHunting::set_map_title_id(const void* value, size_t size) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapHunting.map_title_id)
}
inline ::std::string* ReqMapHunting::mutable_map_title_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqMapHunting::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapHunting.map_title_id)
  
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapHunting::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    
  } else {
    
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapHunting.map_title_id)
}

// -------------------------------------------------------------------

// AckMapHunting

// -------------------------------------------------------------------

// ReqMapKingWar

// bytes map_title_id = 1;
inline void ReqMapKingWar::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqMapKingWar::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.GetNoArena();
}
inline void ReqMapKingWar::set_map_title_id(const ::std::string& value) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapKingWar.map_title_id)
}
#if LANG_CXX11
inline void ReqMapKingWar::set_map_title_id(::std::string&& value) {
  
  map_title_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqMapKingWar.map_title_id)
}
#endif
inline void ReqMapKingWar::set_map_title_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapKingWar.map_title_id)
}
inline void ReqMapKingWar::set_map_title_id(const void* value, size_t size) {
  
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapKingWar.map_title_id)
}
inline ::std::string* ReqMapKingWar::mutable_map_title_id() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqMapKingWar::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapKingWar.map_title_id)
  
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapKingWar::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    
  } else {
    
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapKingWar.map_title_id)
}

// -------------------------------------------------------------------

// AckMapKingWar

// -------------------------------------------------------------------

// PVPRoomInfo

// int32 nCellStatus = 1;
inline void PVPRoomInfo::clear_ncellstatus() {
  ncellstatus_ = 0;
}
inline ::google::protobuf::int32 PVPRoomInfo::ncellstatus() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nCellStatus)
  return ncellstatus_;
}
inline void PVPRoomInfo::set_ncellstatus(::google::protobuf::int32 value) {
  
  ncellstatus_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nCellStatus)
}

// .AFMsg.Ident RoomID = 2;
inline bool PVPRoomInfo::has_roomid() const {
  return this != internal_default_instance() && roomid_ != NULL;
}
inline const ::AFMsg::Ident& PVPRoomInfo::roomid() const {
  const ::AFMsg::Ident* p = roomid_;
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.RoomID)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* PVPRoomInfo::release_roomid() {
  // @@protoc_insertion_point(field_release:AFMsg.PVPRoomInfo.RoomID)
  
  ::AFMsg::Ident* temp = roomid_;
  roomid_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_roomid() {
  
  if (roomid_ == NULL) {
    roomid_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.RoomID)
  return roomid_;
}
inline void PVPRoomInfo::set_allocated_roomid(::AFMsg::Ident* roomid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(roomid_);
  }
  if (roomid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roomid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roomid, submessage_arena);
    }
    
  } else {
    
  }
  roomid_ = roomid;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PVPRoomInfo.RoomID)
}

// int32 nPVPMode = 3;
inline void PVPRoomInfo::clear_npvpmode() {
  npvpmode_ = 0;
}
inline ::google::protobuf::int32 PVPRoomInfo::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPMode)
  return npvpmode_;
}
inline void PVPRoomInfo::set_npvpmode(::google::protobuf::int32 value) {
  
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPMode)
}

// int32 nPVPGrade = 4;
inline void PVPRoomInfo::clear_npvpgrade() {
  npvpgrade_ = 0;
}
inline ::google::protobuf::int32 PVPRoomInfo::npvpgrade() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPGrade)
  return npvpgrade_;
}
inline void PVPRoomInfo::set_npvpgrade(::google::protobuf::int32 value) {
  
  npvpgrade_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPGrade)
}

// int32 MaxPalyer = 5;
inline void PVPRoomInfo::clear_maxpalyer() {
  maxpalyer_ = 0;
}
inline ::google::protobuf::int32 PVPRoomInfo::maxpalyer() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.MaxPalyer)
  return maxpalyer_;
}
inline void PVPRoomInfo::set_maxpalyer(::google::protobuf::int32 value) {
  
  maxpalyer_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.MaxPalyer)
}

// repeated .AFMsg.Ident xRedPlayer = 6;
inline int PVPRoomInfo::xredplayer_size() const {
  return xredplayer_.size();
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_xredplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xredplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return &xredplayer_;
}
inline const ::AFMsg::Ident& PVPRoomInfo::xredplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Get(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::add_xredplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xredplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_;
}

// repeated .AFMsg.Ident xBluePlayer = 7;
inline int PVPRoomInfo::xblueplayer_size() const {
  return xblueplayer_.size();
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_xblueplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xblueplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return &xblueplayer_;
}
inline const ::AFMsg::Ident& PVPRoomInfo::xblueplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Get(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::add_xblueplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xblueplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_;
}

// int64 serverid = 8;
inline void PVPRoomInfo::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PVPRoomInfo::serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.serverid)
  return serverid_;
}
inline void PVPRoomInfo::set_serverid(::google::protobuf::int64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.serverid)
}

// int64 SceneID = 9;
inline void PVPRoomInfo::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PVPRoomInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.SceneID)
  return sceneid_;
}
inline void PVPRoomInfo::set_sceneid(::google::protobuf::int64 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.SceneID)
}

// int64 groupID = 10;
inline void PVPRoomInfo::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PVPRoomInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.groupID)
  return groupid_;
}
inline void PVPRoomInfo::set_groupid(::google::protobuf::int64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.groupID)
}

// -------------------------------------------------------------------

// ReqPVPApplyMatch

// .AFMsg.Ident self_id = 1;
inline bool ReqPVPApplyMatch::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqPVPApplyMatch::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.self_id)
  return self_id_;
}
inline void ReqPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.self_id)
}

// int32 nPVPMode = 2;
inline void ReqPVPApplyMatch::clear_npvpmode() {
  npvpmode_ = 0;
}
inline ::google::protobuf::int32 ReqPVPApplyMatch::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.nPVPMode)
  return npvpmode_;
}
inline void ReqPVPApplyMatch::set_npvpmode(::google::protobuf::int32 value) {
  
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.nPVPMode)
}

// int64 score = 3;
inline void ReqPVPApplyMatch::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqPVPApplyMatch::score() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.score)
  return score_;
}
inline void ReqPVPApplyMatch::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.score)
}

// int32 ApplyType = 4;
inline void ReqPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
}
inline ::google::protobuf::int32 ReqPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.ApplyType)
  return applytype_;
}
inline void ReqPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.ApplyType)
}

// .AFMsg.Ident team_id = 5;
inline bool ReqPVPApplyMatch::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqPVPApplyMatch::team_id() const {
  const ::AFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.team_id)
  
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::mutable_team_id() {
  
  if (team_id_ == NULL) {
    team_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.team_id)
  return team_id_;
}
inline void ReqPVPApplyMatch::set_allocated_team_id(::AFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.team_id)
}

// -------------------------------------------------------------------

// AckPVPApplyMatch

// .AFMsg.Ident self_id = 1;
inline bool AckPVPApplyMatch::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& AckPVPApplyMatch::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckPVPApplyMatch::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.self_id)
  return self_id_;
}
inline void AckPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.self_id)
}

// .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool AckPVPApplyMatch::has_xroominfo() const {
  return this != internal_default_instance() && xroominfo_ != NULL;
}
inline void AckPVPApplyMatch::clear_xroominfo() {
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
}
inline const ::AFMsg::PVPRoomInfo& AckPVPApplyMatch::xroominfo() const {
  const ::AFMsg::PVPRoomInfo* p = xroominfo_;
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::PVPRoomInfo*>(
      &::AFMsg::_PVPRoomInfo_default_instance_);
}
inline ::AFMsg::PVPRoomInfo* AckPVPApplyMatch::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.xRoomInfo)
  
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline ::AFMsg::PVPRoomInfo* AckPVPApplyMatch::mutable_xroominfo() {
  
  if (xroominfo_ == NULL) {
    xroominfo_ = ::google::protobuf::Arena::Create< ::AFMsg::PVPRoomInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return xroominfo_;
}
inline void AckPVPApplyMatch::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xroominfo_;
  }
  if (xroominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xroominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xroominfo, submessage_arena);
    }
    
  } else {
    
  }
  xroominfo_ = xroominfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.xRoomInfo)
}

// int32 ApplyType = 3;
inline void AckPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
}
inline ::google::protobuf::int32 AckPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.ApplyType)
  return applytype_;
}
inline void AckPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.ApplyType)
}

// int32 nResult = 4;
inline void AckPVPApplyMatch::clear_nresult() {
  nresult_ = 0;
}
inline ::google::protobuf::int32 AckPVPApplyMatch::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.nResult)
  return nresult_;
}
inline void AckPVPApplyMatch::set_nresult(::google::protobuf::int32 value) {
  
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.nResult)
}

// -------------------------------------------------------------------

// ReqCreatePVPEctype

// .AFMsg.Ident self_id = 1;
inline bool ReqCreatePVPEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& ReqCreatePVPEctype::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqCreatePVPEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.self_id)
  return self_id_;
}
inline void ReqCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.self_id)
}

// .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool ReqCreatePVPEctype::has_xroominfo() const {
  return this != internal_default_instance() && xroominfo_ != NULL;
}
inline void ReqCreatePVPEctype::clear_xroominfo() {
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
}
inline const ::AFMsg::PVPRoomInfo& ReqCreatePVPEctype::xroominfo() const {
  const ::AFMsg::PVPRoomInfo* p = xroominfo_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::PVPRoomInfo*>(
      &::AFMsg::_PVPRoomInfo_default_instance_);
}
inline ::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline ::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::mutable_xroominfo() {
  
  if (xroominfo_ == NULL) {
    xroominfo_ = ::google::protobuf::Arena::Create< ::AFMsg::PVPRoomInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
inline void ReqCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xroominfo_;
  }
  if (xroominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xroominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xroominfo, submessage_arena);
    }
    
  } else {
    
  }
  xroominfo_ = xroominfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.xRoomInfo)
}

// -------------------------------------------------------------------

// AckCreatePVPEctype

// .AFMsg.Ident self_id = 1;
inline bool AckCreatePVPEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::AFMsg::Ident& AckCreatePVPEctype::self_id() const {
  const ::AFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.self_id)
  
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckCreatePVPEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    self_id_ = ::google::protobuf::Arena::Create< ::AFMsg::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.self_id)
  return self_id_;
}
inline void AckCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.self_id)
}

// .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool AckCreatePVPEctype::has_xroominfo() const {
  return this != internal_default_instance() && xroominfo_ != NULL;
}
inline void AckCreatePVPEctype::clear_xroominfo() {
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
}
inline const ::AFMsg::PVPRoomInfo& AckCreatePVPEctype::xroominfo() const {
  const ::AFMsg::PVPRoomInfo* p = xroominfo_;
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::PVPRoomInfo*>(
      &::AFMsg::_PVPRoomInfo_default_instance_);
}
inline ::AFMsg::PVPRoomInfo* AckCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.xRoomInfo)
  
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline ::AFMsg::PVPRoomInfo* AckCreatePVPEctype::mutable_xroominfo() {
  
  if (xroominfo_ == NULL) {
    xroominfo_ = ::google::protobuf::Arena::Create< ::AFMsg::PVPRoomInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
inline void AckCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xroominfo_;
  }
  if (xroominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xroominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xroominfo, submessage_arena);
    }
    
  } else {
    
  }
  xroominfo_ = xroominfo;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.xRoomInfo)
}

// int32 ApplyType = 3;
inline void AckCreatePVPEctype::clear_applytype() {
  applytype_ = 0;
}
inline ::google::protobuf::int32 AckCreatePVPEctype::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.ApplyType)
  return applytype_;
}
inline void AckCreatePVPEctype::set_applytype(::google::protobuf::int32 value) {
  
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckCreatePVPEctype.ApplyType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AFMsg::ReqAckSynData_SynType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckSynData_SynType>() {
  return ::AFMsg::ReqAckSynData_SynType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ChatContainer_ContainerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ChatContainer_ContainerType>() {
  return ::AFMsg::ChatContainer_ContainerType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckPlayerChat_EGameChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::AFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::EffectData_EResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::EffectData_EResultType>() {
  return ::AFMsg::EffectData_EResultType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckSwapScene_EGameSwapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckSwapScene_EGameSwapType>() {
  return ::AFMsg::ReqAckSwapScene_EGameSwapType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckJoinActivity_EGameActivityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckJoinActivity_EGameActivityType>() {
  return ::AFMsg::ReqAckJoinActivity_EGameActivityType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType>() {
  return ::AFMsg::ReqAckJoinActivity_EGameActivitySubType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType>() {
  return ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprGuild_EGGuildOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprGuild_EGGuildOprType>() {
  return ::AFMsg::ReqAckOprGuild_EGGuildOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ChatInfo_EChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ChatInfo_EChatType>() {
  return ::AFMsg::ChatInfo_EChatType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType>() {
  return ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqPVPApplyMatch_EApplyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqPVPApplyMatch_EApplyType>() {
  return ::AFMsg::ReqPVPApplyMatch_EApplyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AFMsgShare_2eproto_INCLUDED
