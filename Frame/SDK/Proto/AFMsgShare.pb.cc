// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgShare.proto

#include "AFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace AFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGameServer>
      _instance;
} _ReqEnterGameServer_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHeartBeat>
      _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveGameServer>
      _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntryInfo>
      _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerEntryList>
      _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerLeaveList>
      _instance;
} _AckPlayerLeaveList_default_instance_;
class ReqAckSynDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSynData>
      _instance;
} _ReqAckSynData_default_instance_;
class ReqAckPlayerMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerMove>
      _instance;
} _ReqAckPlayerMove_default_instance_;
class ChatContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatContainer>
      _instance;
} _ChatContainer_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat>
      _instance;
} _ReqAckPlayerChat_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EffectData>
      _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseSkill>
      _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckUseItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseItem>
      _instance;
} _ReqAckUseItem_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSwapScene>
      _instance;
} _ReqAckSwapScene_default_instance_;
class ItemStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ItemStruct>
      _instance;
} _ItemStruct_default_instance_;
class CurrencyStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrencyStruct>
      _instance;
} _CurrencyStruct_default_instance_;
class ReqAckEndBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckEndBattle>
      _instance;
} _ReqAckEndBattle_default_instance_;
class ReqPickDropItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPickDropItem>
      _instance;
} _ReqPickDropItem_default_instance_;
class ReqAcceptTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAcceptTask>
      _instance;
} _ReqAcceptTask_default_instance_;
class ReqCompeleteTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCompeleteTask>
      _instance;
} _ReqCompeleteTask_default_instance_;
class ReqAckJoinActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinActivity>
      _instance;
} _ReqAckJoinActivity_default_instance_;
class ReqAckSearchOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSearchOppnent>
      _instance;
} _ReqAckSearchOppnent_default_instance_;
class ReqAckBattleOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckBattleOppnent>
      _instance;
} _ReqAckBattleOppnent_default_instance_;
class ReqAckCreateGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateGuild>
      _instance;
} _ReqAckCreateGuild_default_instance_;
class ReqSearchGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSearchGuild>
      _instance;
} _ReqSearchGuild_default_instance_;
class AckSearchGuild_SearchGuildObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchGuild_SearchGuildObject>
      _instance;
} _AckSearchGuild_SearchGuildObject_default_instance_;
class AckSearchGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchGuild>
      _instance;
} _AckSearchGuild_default_instance_;
class ReqAckJoinGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinGuild>
      _instance;
} _ReqAckJoinGuild_default_instance_;
class ReqAckLeaveGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveGuild>
      _instance;
} _ReqAckLeaveGuild_default_instance_;
class ReqAckOprGuildMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprGuildMember>
      _instance;
} _ReqAckOprGuildMember_default_instance_;
class ReqAckOprGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprGuild>
      _instance;
} _ReqAckOprGuild_default_instance_;
class ReqAckDonateGuildItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckDonateGuildItem>
      _instance;
} _ReqAckDonateGuildItem_default_instance_;
class ReqGuildEctypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqGuildEctypeInfo>
      _instance;
} _ReqGuildEctypeInfo_default_instance_;
class GuildEctypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildEctypeInfo>
      _instance;
} _GuildEctypeInfo_default_instance_;
class AckGuildEctypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckGuildEctypeInfo>
      _instance;
} _AckGuildEctypeInfo_default_instance_;
class SetGuildEctypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetGuildEctypeInfo>
      _instance;
} _SetGuildEctypeInfo_default_instance_;
class ReqEnterGuildEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGuildEctype>
      _instance;
} _ReqEnterGuildEctype_default_instance_;
class ChatInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatInfo>
      _instance;
} _ChatInfo_default_instance_;
class ReqAckCreateChatGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateChatGroup>
      _instance;
} _ReqAckCreateChatGroup_default_instance_;
class ReqAckjoinChatGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckjoinChatGroup>
      _instance;
} _ReqAckjoinChatGroup_default_instance_;
class ReqAckQuitChatGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckQuitChatGroup>
      _instance;
} _ReqAckQuitChatGroup_default_instance_;
class ReqSubscriptionChatGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSubscriptionChatGroup>
      _instance;
} _ReqSubscriptionChatGroup_default_instance_;
class ReqCancelSubscriptionChatGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCancelSubscriptionChatGroup>
      _instance;
} _ReqCancelSubscriptionChatGroup_default_instance_;
class ReqIntensifylevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqIntensifylevelToEquip>
      _instance;
} _ReqIntensifylevelToEquip_default_instance_;
class AckIntensifylevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckIntensifylevelToEquip>
      _instance;
} _AckIntensifylevelToEquip_default_instance_;
class ReqHoleToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHoleToEquip>
      _instance;
} _ReqHoleToEquip_default_instance_;
class AckHoleToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckHoleToEquip>
      _instance;
} _AckHoleToEquip_default_instance_;
class ReqInlaystoneToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqInlaystoneToEquip>
      _instance;
} _ReqInlaystoneToEquip_default_instance_;
class AckInlaystoneToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckInlaystoneToEquip>
      _instance;
} _AckInlaystoneToEquip_default_instance_;
class ReqElementlevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqElementlevelToEquip>
      _instance;
} _ReqElementlevelToEquip_default_instance_;
class AckElementlevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckElementlevelToEquip>
      _instance;
} _AckElementlevelToEquip_default_instance_;
class ReqSetFightHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSetFightHero>
      _instance;
} _ReqSetFightHero_default_instance_;
class ReqWearEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqWearEquip>
      _instance;
} _ReqWearEquip_default_instance_;
class TakeOffEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakeOffEquip>
      _instance;
} _TakeOffEquip_default_instance_;
class ReqMiningTitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMiningTitle>
      _instance;
} _ReqMiningTitle_default_instance_;
class ReqSendMailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSendMail>
      _instance;
} _ReqSendMail_default_instance_;
class ReqSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSwitchServer>
      _instance;
} _ReqSwitchServer_default_instance_;
class AckSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSwitchServer>
      _instance;
} _AckSwitchServer_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamInfo>
      _instance;
} _TeamInfo_default_instance_;
class TeammemberInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeammemberInfo>
      _instance;
} _TeammemberInfo_default_instance_;
class ReqAckCreateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateTeam>
      _instance;
} _ReqAckCreateTeam_default_instance_;
class ReqAckJoinTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinTeam>
      _instance;
} _ReqAckJoinTeam_default_instance_;
class ReqAckLeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveTeam>
      _instance;
} _ReqAckLeaveTeam_default_instance_;
class ReqAckOprTeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprTeamMember>
      _instance;
} _ReqAckOprTeamMember_default_instance_;
class ReqAckInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckInviteTeam>
      _instance;
} _ReqAckInviteTeam_default_instance_;
class ReqTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqTeamEnterEctype>
      _instance;
} _ReqTeamEnterEctype_default_instance_;
class AckTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckTeamEnterEctype>
      _instance;
} _AckTeamEnterEctype_default_instance_;
class GridGuildBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GridGuildBaseInfo>
      _instance;
} _GridGuildBaseInfo_default_instance_;
class ReqBigMapGridInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqBigMapGridInfo>
      _instance;
} _ReqBigMapGridInfo_default_instance_;
class BigMapGridBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapGridBaseInfo>
      _instance;
} _BigMapGridBaseInfo_default_instance_;
class BigMapLeaveMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapLeaveMsg>
      _instance;
} _BigMapLeaveMsg_default_instance_;
class BigMapWarHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapWarHistory>
      _instance;
} _BigMapWarHistory_default_instance_;
class BigMapGridDetailInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapGridDetailInfo>
      _instance;
} _BigMapGridDetailInfo_default_instance_;
class AckBigMapGridInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckBigMapGridInfo>
      _instance;
} _AckBigMapGridInfo_default_instance_;
class ReqBigMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqBigMapInfo>
      _instance;
} _ReqBigMapInfo_default_instance_;
class AckBigMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckBigMapInfo>
      _instance;
} _AckBigMapInfo_default_instance_;
class ReqHoldMapGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHoldMapGrid>
      _instance;
} _ReqHoldMapGrid_default_instance_;
class AckHoldMapGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckHoldMapGrid>
      _instance;
} _AckHoldMapGrid_default_instance_;
class ReqLeaveMapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveMapMsg>
      _instance;
} _ReqLeaveMapMsg_default_instance_;
class AckLeaveMapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLeaveMapMsg>
      _instance;
} _AckLeaveMapMsg_default_instance_;
class ReqGetMapAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqGetMapAward>
      _instance;
} _ReqGetMapAward_default_instance_;
class AckGetMapAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckGetMapAward>
      _instance;
} _AckGetMapAward_default_instance_;
class ReqMapHuntingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMapHunting>
      _instance;
} _ReqMapHunting_default_instance_;
class AckMapHuntingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckMapHunting>
      _instance;
} _AckMapHunting_default_instance_;
class ReqMapKingWarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMapKingWar>
      _instance;
} _ReqMapKingWar_default_instance_;
class AckMapKingWarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckMapKingWar>
      _instance;
} _AckMapKingWar_default_instance_;
class PVPRoomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRoomInfo>
      _instance;
} _PVPRoomInfo_default_instance_;
class ReqPVPApplyMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPVPApplyMatch>
      _instance;
} _ReqPVPApplyMatch_default_instance_;
class AckPVPApplyMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPVPApplyMatch>
      _instance;
} _AckPVPApplyMatch_default_instance_;
class ReqCreatePVPEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCreatePVPEctype>
      _instance;
} _ReqCreatePVPEctype_default_instance_;
class AckCreatePVPEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckCreatePVPEctype>
      _instance;
} _AckCreatePVPEctype_default_instance_;
}  // namespace AFMsg
namespace protobuf_AFMsgShare_2eproto {
void InitDefaultsReqEnterGameServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::AFMsg::ReqEnterGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

void InitDefaultsReqEnterGameServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqEnterGameServerImpl);
}

void InitDefaultsReqHeartBeatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::AFMsg::ReqHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

void InitDefaultsReqHeartBeat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqHeartBeatImpl);
}

void InitDefaultsReqLeaveGameServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::AFMsg::ReqLeaveGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

void InitDefaultsReqLeaveGameServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqLeaveGameServerImpl);
}

void InitDefaultsPlayerEntryInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgBase_2eproto::InitDefaultsPoint3D();
  {
    void* ptr = &::AFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::AFMsg::PlayerEntryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerEntryInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEntryInfoImpl);
}

void InitDefaultsAckPlayerEntryListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  {
    void* ptr = &::AFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::AFMsg::AckPlayerEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

void InitDefaultsAckPlayerEntryList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPlayerEntryListImpl);
}

void InitDefaultsAckPlayerLeaveListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::AFMsg::AckPlayerLeaveList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

void InitDefaultsAckPlayerLeaveList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPlayerLeaveListImpl);
}

void InitDefaultsReqAckSynDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckSynData_default_instance_;
    new (ptr) ::AFMsg::ReqAckSynData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckSynData::InitAsDefaultInstance();
}

void InitDefaultsReqAckSynData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckSynDataImpl);
}

void InitDefaultsReqAckPlayerMoveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgBase_2eproto::InitDefaultsPosition();
  {
    void* ptr = &::AFMsg::_ReqAckPlayerMove_default_instance_;
    new (ptr) ::AFMsg::ReqAckPlayerMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckPlayerMove::InitAsDefaultInstance();
}

void InitDefaultsReqAckPlayerMove() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckPlayerMoveImpl);
}

void InitDefaultsChatContainerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ChatContainer_default_instance_;
    new (ptr) ::AFMsg::ChatContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ChatContainer::InitAsDefaultInstance();
}

void InitDefaultsChatContainer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatContainerImpl);
}

void InitDefaultsReqAckPlayerChatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsChatContainer();
  {
    void* ptr = &::AFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::AFMsg::ReqAckPlayerChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

void InitDefaultsReqAckPlayerChat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckPlayerChatImpl);
}

void InitDefaultsEffectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_EffectData_default_instance_;
    new (ptr) ::AFMsg::EffectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::EffectData::InitAsDefaultInstance();
}

void InitDefaultsEffectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEffectDataImpl);
}

void InitDefaultsReqAckUseSkillImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgBase_2eproto::InitDefaultsPosition();
  protobuf_AFMsgShare_2eproto::InitDefaultsEffectData();
  {
    void* ptr = &::AFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::AFMsg::ReqAckUseSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

void InitDefaultsReqAckUseSkill() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckUseSkillImpl);
}

void InitDefaultsReqAckUseItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsEffectData();
  protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  {
    void* ptr = &::AFMsg::_ReqAckUseItem_default_instance_;
    new (ptr) ::AFMsg::ReqAckUseItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckUseItem::InitAsDefaultInstance();
}

void InitDefaultsReqAckUseItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckUseItemImpl);
}

void InitDefaultsReqAckSwapSceneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::AFMsg::ReqAckSwapScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

void InitDefaultsReqAckSwapScene() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckSwapSceneImpl);
}

void InitDefaultsItemStructImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ItemStruct_default_instance_;
    new (ptr) ::AFMsg::ItemStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ItemStruct::InitAsDefaultInstance();
}

void InitDefaultsItemStruct() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsItemStructImpl);
}

void InitDefaultsCurrencyStructImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_CurrencyStruct_default_instance_;
    new (ptr) ::AFMsg::CurrencyStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::CurrencyStruct::InitAsDefaultInstance();
}

void InitDefaultsCurrencyStruct() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCurrencyStructImpl);
}

void InitDefaultsReqAckEndBattleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  {
    void* ptr = &::AFMsg::_ReqAckEndBattle_default_instance_;
    new (ptr) ::AFMsg::ReqAckEndBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckEndBattle::InitAsDefaultInstance();
}

void InitDefaultsReqAckEndBattle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckEndBattleImpl);
}

void InitDefaultsReqPickDropItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqPickDropItem_default_instance_;
    new (ptr) ::AFMsg::ReqPickDropItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqPickDropItem::InitAsDefaultInstance();
}

void InitDefaultsReqPickDropItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqPickDropItemImpl);
}

void InitDefaultsReqAcceptTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAcceptTask_default_instance_;
    new (ptr) ::AFMsg::ReqAcceptTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAcceptTask::InitAsDefaultInstance();
}

void InitDefaultsReqAcceptTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAcceptTaskImpl);
}

void InitDefaultsReqCompeleteTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqCompeleteTask_default_instance_;
    new (ptr) ::AFMsg::ReqCompeleteTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqCompeleteTask::InitAsDefaultInstance();
}

void InitDefaultsReqCompeleteTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqCompeleteTaskImpl);
}

void InitDefaultsReqAckJoinActivityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAckJoinActivity_default_instance_;
    new (ptr) ::AFMsg::ReqAckJoinActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckJoinActivity::InitAsDefaultInstance();
}

void InitDefaultsReqAckJoinActivity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckJoinActivityImpl);
}

void InitDefaultsReqAckSearchOppnentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAckSearchOppnent_default_instance_;
    new (ptr) ::AFMsg::ReqAckSearchOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckSearchOppnent::InitAsDefaultInstance();
}

void InitDefaultsReqAckSearchOppnent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckSearchOppnentImpl);
}

void InitDefaultsReqAckBattleOppnentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqAckBattleOppnent_default_instance_;
    new (ptr) ::AFMsg::ReqAckBattleOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckBattleOppnent::InitAsDefaultInstance();
}

void InitDefaultsReqAckBattleOppnent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckBattleOppnentImpl);
}

void InitDefaultsReqAckCreateGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckCreateGuild_default_instance_;
    new (ptr) ::AFMsg::ReqAckCreateGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckCreateGuild::InitAsDefaultInstance();
}

void InitDefaultsReqAckCreateGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckCreateGuildImpl);
}

void InitDefaultsReqSearchGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqSearchGuild_default_instance_;
    new (ptr) ::AFMsg::ReqSearchGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSearchGuild::InitAsDefaultInstance();
}

void InitDefaultsReqSearchGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSearchGuildImpl);
}

void InitDefaultsAckSearchGuild_SearchGuildObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckSearchGuild_SearchGuildObject_default_instance_;
    new (ptr) ::AFMsg::AckSearchGuild_SearchGuildObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckSearchGuild_SearchGuildObject::InitAsDefaultInstance();
}

void InitDefaultsAckSearchGuild_SearchGuildObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckSearchGuild_SearchGuildObjectImpl);
}

void InitDefaultsAckSearchGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild_SearchGuildObject();
  {
    void* ptr = &::AFMsg::_AckSearchGuild_default_instance_;
    new (ptr) ::AFMsg::AckSearchGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckSearchGuild::InitAsDefaultInstance();
}

void InitDefaultsAckSearchGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckSearchGuildImpl);
}

void InitDefaultsReqAckJoinGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckJoinGuild_default_instance_;
    new (ptr) ::AFMsg::ReqAckJoinGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckJoinGuild::InitAsDefaultInstance();
}

void InitDefaultsReqAckJoinGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckJoinGuildImpl);
}

void InitDefaultsReqAckLeaveGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckLeaveGuild_default_instance_;
    new (ptr) ::AFMsg::ReqAckLeaveGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckLeaveGuild::InitAsDefaultInstance();
}

void InitDefaultsReqAckLeaveGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckLeaveGuildImpl);
}

void InitDefaultsReqAckOprGuildMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckOprGuildMember_default_instance_;
    new (ptr) ::AFMsg::ReqAckOprGuildMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckOprGuildMember::InitAsDefaultInstance();
}

void InitDefaultsReqAckOprGuildMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckOprGuildMemberImpl);
}

void InitDefaultsReqAckOprGuildImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckOprGuild_default_instance_;
    new (ptr) ::AFMsg::ReqAckOprGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckOprGuild::InitAsDefaultInstance();
}

void InitDefaultsReqAckOprGuild() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckOprGuildImpl);
}

void InitDefaultsReqAckDonateGuildItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  {
    void* ptr = &::AFMsg::_ReqAckDonateGuildItem_default_instance_;
    new (ptr) ::AFMsg::ReqAckDonateGuildItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckDonateGuildItem::InitAsDefaultInstance();
}

void InitDefaultsReqAckDonateGuildItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckDonateGuildItemImpl);
}

void InitDefaultsReqGuildEctypeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqGuildEctypeInfo_default_instance_;
    new (ptr) ::AFMsg::ReqGuildEctypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqGuildEctypeInfo::InitAsDefaultInstance();
}

void InitDefaultsReqGuildEctypeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqGuildEctypeInfoImpl);
}

void InitDefaultsGuildEctypeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_GuildEctypeInfo_default_instance_;
    new (ptr) ::AFMsg::GuildEctypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::GuildEctypeInfo::InitAsDefaultInstance();
}

void InitDefaultsGuildEctypeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGuildEctypeInfoImpl);
}

void InitDefaultsAckGuildEctypeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsGuildEctypeInfo();
  {
    void* ptr = &::AFMsg::_AckGuildEctypeInfo_default_instance_;
    new (ptr) ::AFMsg::AckGuildEctypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckGuildEctypeInfo::InitAsDefaultInstance();
}

void InitDefaultsAckGuildEctypeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckGuildEctypeInfoImpl);
}

void InitDefaultsSetGuildEctypeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsGuildEctypeInfo();
  {
    void* ptr = &::AFMsg::_SetGuildEctypeInfo_default_instance_;
    new (ptr) ::AFMsg::SetGuildEctypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::SetGuildEctypeInfo::InitAsDefaultInstance();
}

void InitDefaultsSetGuildEctypeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetGuildEctypeInfoImpl);
}

void InitDefaultsReqEnterGuildEctypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqEnterGuildEctype_default_instance_;
    new (ptr) ::AFMsg::ReqEnterGuildEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqEnterGuildEctype::InitAsDefaultInstance();
}

void InitDefaultsReqEnterGuildEctype() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqEnterGuildEctypeImpl);
}

void InitDefaultsChatInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ChatInfo_default_instance_;
    new (ptr) ::AFMsg::ChatInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ChatInfo::InitAsDefaultInstance();
}

void InitDefaultsChatInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatInfoImpl);
}

void InitDefaultsReqAckCreateChatGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckCreateChatGroup_default_instance_;
    new (ptr) ::AFMsg::ReqAckCreateChatGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckCreateChatGroup::InitAsDefaultInstance();
}

void InitDefaultsReqAckCreateChatGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckCreateChatGroupImpl);
}

void InitDefaultsReqAckjoinChatGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckjoinChatGroup_default_instance_;
    new (ptr) ::AFMsg::ReqAckjoinChatGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckjoinChatGroup::InitAsDefaultInstance();
}

void InitDefaultsReqAckjoinChatGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckjoinChatGroupImpl);
}

void InitDefaultsReqAckQuitChatGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckQuitChatGroup_default_instance_;
    new (ptr) ::AFMsg::ReqAckQuitChatGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckQuitChatGroup::InitAsDefaultInstance();
}

void InitDefaultsReqAckQuitChatGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckQuitChatGroupImpl);
}

void InitDefaultsReqSubscriptionChatGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqSubscriptionChatGroup_default_instance_;
    new (ptr) ::AFMsg::ReqSubscriptionChatGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSubscriptionChatGroup::InitAsDefaultInstance();
}

void InitDefaultsReqSubscriptionChatGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSubscriptionChatGroupImpl);
}

void InitDefaultsReqCancelSubscriptionChatGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqCancelSubscriptionChatGroup_default_instance_;
    new (ptr) ::AFMsg::ReqCancelSubscriptionChatGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqCancelSubscriptionChatGroup::InitAsDefaultInstance();
}

void InitDefaultsReqCancelSubscriptionChatGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqCancelSubscriptionChatGroupImpl);
}

void InitDefaultsReqIntensifylevelToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqIntensifylevelToEquip_default_instance_;
    new (ptr) ::AFMsg::ReqIntensifylevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqIntensifylevelToEquip::InitAsDefaultInstance();
}

void InitDefaultsReqIntensifylevelToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqIntensifylevelToEquipImpl);
}

void InitDefaultsAckIntensifylevelToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckIntensifylevelToEquip_default_instance_;
    new (ptr) ::AFMsg::AckIntensifylevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckIntensifylevelToEquip::InitAsDefaultInstance();
}

void InitDefaultsAckIntensifylevelToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckIntensifylevelToEquipImpl);
}

void InitDefaultsReqHoleToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqHoleToEquip_default_instance_;
    new (ptr) ::AFMsg::ReqHoleToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqHoleToEquip::InitAsDefaultInstance();
}

void InitDefaultsReqHoleToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqHoleToEquipImpl);
}

void InitDefaultsAckHoleToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckHoleToEquip_default_instance_;
    new (ptr) ::AFMsg::AckHoleToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckHoleToEquip::InitAsDefaultInstance();
}

void InitDefaultsAckHoleToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckHoleToEquipImpl);
}

void InitDefaultsReqInlaystoneToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqInlaystoneToEquip_default_instance_;
    new (ptr) ::AFMsg::ReqInlaystoneToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqInlaystoneToEquip::InitAsDefaultInstance();
}

void InitDefaultsReqInlaystoneToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqInlaystoneToEquipImpl);
}

void InitDefaultsAckInlaystoneToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckInlaystoneToEquip_default_instance_;
    new (ptr) ::AFMsg::AckInlaystoneToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckInlaystoneToEquip::InitAsDefaultInstance();
}

void InitDefaultsAckInlaystoneToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckInlaystoneToEquipImpl);
}

void InitDefaultsReqElementlevelToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqElementlevelToEquip_default_instance_;
    new (ptr) ::AFMsg::ReqElementlevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqElementlevelToEquip::InitAsDefaultInstance();
}

void InitDefaultsReqElementlevelToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqElementlevelToEquipImpl);
}

void InitDefaultsAckElementlevelToEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckElementlevelToEquip_default_instance_;
    new (ptr) ::AFMsg::AckElementlevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckElementlevelToEquip::InitAsDefaultInstance();
}

void InitDefaultsAckElementlevelToEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckElementlevelToEquipImpl);
}

void InitDefaultsReqSetFightHeroImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqSetFightHero_default_instance_;
    new (ptr) ::AFMsg::ReqSetFightHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSetFightHero::InitAsDefaultInstance();
}

void InitDefaultsReqSetFightHero() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSetFightHeroImpl);
}

void InitDefaultsReqWearEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqWearEquip_default_instance_;
    new (ptr) ::AFMsg::ReqWearEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqWearEquip::InitAsDefaultInstance();
}

void InitDefaultsReqWearEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqWearEquipImpl);
}

void InitDefaultsTakeOffEquipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_TakeOffEquip_default_instance_;
    new (ptr) ::AFMsg::TakeOffEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::TakeOffEquip::InitAsDefaultInstance();
}

void InitDefaultsTakeOffEquip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTakeOffEquipImpl);
}

void InitDefaultsReqMiningTitleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqMiningTitle_default_instance_;
    new (ptr) ::AFMsg::ReqMiningTitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqMiningTitle::InitAsDefaultInstance();
}

void InitDefaultsReqMiningTitle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqMiningTitleImpl);
}

void InitDefaultsReqSendMailImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  protobuf_AFMsgShare_2eproto::InitDefaultsCurrencyStruct();
  {
    void* ptr = &::AFMsg::_ReqSendMail_default_instance_;
    new (ptr) ::AFMsg::ReqSendMail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSendMail::InitAsDefaultInstance();
}

void InitDefaultsReqSendMail() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSendMailImpl);
}

void InitDefaultsReqSwitchServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqSwitchServer_default_instance_;
    new (ptr) ::AFMsg::ReqSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqSwitchServer::InitAsDefaultInstance();
}

void InitDefaultsReqSwitchServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqSwitchServerImpl);
}

void InitDefaultsAckSwitchServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckSwitchServer_default_instance_;
    new (ptr) ::AFMsg::AckSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckSwitchServer::InitAsDefaultInstance();
}

void InitDefaultsAckSwitchServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckSwitchServerImpl);
}

void InitDefaultsTeamInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsTeammemberInfo();
  {
    void* ptr = &::AFMsg::_TeamInfo_default_instance_;
    new (ptr) ::AFMsg::TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::TeamInfo::InitAsDefaultInstance();
}

void InitDefaultsTeamInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamInfoImpl);
}

void InitDefaultsTeammemberInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_TeammemberInfo_default_instance_;
    new (ptr) ::AFMsg::TeammemberInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::TeammemberInfo::InitAsDefaultInstance();
}

void InitDefaultsTeammemberInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeammemberInfoImpl);
}

void InitDefaultsReqAckCreateTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  {
    void* ptr = &::AFMsg::_ReqAckCreateTeam_default_instance_;
    new (ptr) ::AFMsg::ReqAckCreateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckCreateTeam::InitAsDefaultInstance();
}

void InitDefaultsReqAckCreateTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckCreateTeamImpl);
}

void InitDefaultsReqAckJoinTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  {
    void* ptr = &::AFMsg::_ReqAckJoinTeam_default_instance_;
    new (ptr) ::AFMsg::ReqAckJoinTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckJoinTeam::InitAsDefaultInstance();
}

void InitDefaultsReqAckJoinTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckJoinTeamImpl);
}

void InitDefaultsReqAckLeaveTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  {
    void* ptr = &::AFMsg::_ReqAckLeaveTeam_default_instance_;
    new (ptr) ::AFMsg::ReqAckLeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckLeaveTeam::InitAsDefaultInstance();
}

void InitDefaultsReqAckLeaveTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckLeaveTeamImpl);
}

void InitDefaultsReqAckOprTeamMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  {
    void* ptr = &::AFMsg::_ReqAckOprTeamMember_default_instance_;
    new (ptr) ::AFMsg::ReqAckOprTeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckOprTeamMember::InitAsDefaultInstance();
}

void InitDefaultsReqAckOprTeamMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckOprTeamMemberImpl);
}

void InitDefaultsReqAckInviteTeamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqAckInviteTeam_default_instance_;
    new (ptr) ::AFMsg::ReqAckInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqAckInviteTeam::InitAsDefaultInstance();
}

void InitDefaultsReqAckInviteTeam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckInviteTeamImpl);
}

void InitDefaultsReqTeamEnterEctypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqTeamEnterEctype_default_instance_;
    new (ptr) ::AFMsg::ReqTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqTeamEnterEctype::InitAsDefaultInstance();
}

void InitDefaultsReqTeamEnterEctype() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqTeamEnterEctypeImpl);
}

void InitDefaultsAckTeamEnterEctypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_AckTeamEnterEctype_default_instance_;
    new (ptr) ::AFMsg::AckTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckTeamEnterEctype::InitAsDefaultInstance();
}

void InitDefaultsAckTeamEnterEctype() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckTeamEnterEctypeImpl);
}

void InitDefaultsGridGuildBaseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_GridGuildBaseInfo_default_instance_;
    new (ptr) ::AFMsg::GridGuildBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::GridGuildBaseInfo::InitAsDefaultInstance();
}

void InitDefaultsGridGuildBaseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGridGuildBaseInfoImpl);
}

void InitDefaultsReqBigMapGridInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqBigMapGridInfo_default_instance_;
    new (ptr) ::AFMsg::ReqBigMapGridInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqBigMapGridInfo::InitAsDefaultInstance();
}

void InitDefaultsReqBigMapGridInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqBigMapGridInfoImpl);
}

void InitDefaultsBigMapGridBaseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfo();
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_BigMapGridBaseInfo_default_instance_;
    new (ptr) ::AFMsg::BigMapGridBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::BigMapGridBaseInfo::InitAsDefaultInstance();
}

void InitDefaultsBigMapGridBaseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigMapGridBaseInfoImpl);
}

void InitDefaultsBigMapLeaveMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_BigMapLeaveMsg_default_instance_;
    new (ptr) ::AFMsg::BigMapLeaveMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::BigMapLeaveMsg::InitAsDefaultInstance();
}

void InitDefaultsBigMapLeaveMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigMapLeaveMsgImpl);
}

void InitDefaultsBigMapWarHistoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfo();
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_BigMapWarHistory_default_instance_;
    new (ptr) ::AFMsg::BigMapWarHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::BigMapWarHistory::InitAsDefaultInstance();
}

void InitDefaultsBigMapWarHistory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigMapWarHistoryImpl);
}

void InitDefaultsBigMapGridDetailInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridBaseInfo();
  protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfo();
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapLeaveMsg();
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapWarHistory();
  {
    void* ptr = &::AFMsg::_BigMapGridDetailInfo_default_instance_;
    new (ptr) ::AFMsg::BigMapGridDetailInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::BigMapGridDetailInfo::InitAsDefaultInstance();
}

void InitDefaultsBigMapGridDetailInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigMapGridDetailInfoImpl);
}

void InitDefaultsAckBigMapGridInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridDetailInfo();
  {
    void* ptr = &::AFMsg::_AckBigMapGridInfo_default_instance_;
    new (ptr) ::AFMsg::AckBigMapGridInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckBigMapGridInfo::InitAsDefaultInstance();
}

void InitDefaultsAckBigMapGridInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckBigMapGridInfoImpl);
}

void InitDefaultsReqBigMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqBigMapInfo_default_instance_;
    new (ptr) ::AFMsg::ReqBigMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqBigMapInfo::InitAsDefaultInstance();
}

void InitDefaultsReqBigMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqBigMapInfoImpl);
}

void InitDefaultsAckBigMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridBaseInfo();
  {
    void* ptr = &::AFMsg::_AckBigMapInfo_default_instance_;
    new (ptr) ::AFMsg::AckBigMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckBigMapInfo::InitAsDefaultInstance();
}

void InitDefaultsAckBigMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckBigMapInfoImpl);
}

void InitDefaultsReqHoldMapGridImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqHoldMapGrid_default_instance_;
    new (ptr) ::AFMsg::ReqHoldMapGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqHoldMapGrid::InitAsDefaultInstance();
}

void InitDefaultsReqHoldMapGrid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqHoldMapGridImpl);
}

void InitDefaultsAckHoldMapGridImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_AckHoldMapGrid_default_instance_;
    new (ptr) ::AFMsg::AckHoldMapGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckHoldMapGrid::InitAsDefaultInstance();
}

void InitDefaultsAckHoldMapGrid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckHoldMapGridImpl);
}

void InitDefaultsReqLeaveMapMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgShare_2eproto::InitDefaultsBigMapLeaveMsg();
  {
    void* ptr = &::AFMsg::_ReqLeaveMapMsg_default_instance_;
    new (ptr) ::AFMsg::ReqLeaveMapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqLeaveMapMsg::InitAsDefaultInstance();
}

void InitDefaultsReqLeaveMapMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqLeaveMapMsgImpl);
}

void InitDefaultsAckLeaveMapMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_AckLeaveMapMsg_default_instance_;
    new (ptr) ::AFMsg::AckLeaveMapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckLeaveMapMsg::InitAsDefaultInstance();
}

void InitDefaultsAckLeaveMapMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckLeaveMapMsgImpl);
}

void InitDefaultsReqGetMapAwardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqGetMapAward_default_instance_;
    new (ptr) ::AFMsg::ReqGetMapAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqGetMapAward::InitAsDefaultInstance();
}

void InitDefaultsReqGetMapAward() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqGetMapAwardImpl);
}

void InitDefaultsAckGetMapAwardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_AckGetMapAward_default_instance_;
    new (ptr) ::AFMsg::AckGetMapAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckGetMapAward::InitAsDefaultInstance();
}

void InitDefaultsAckGetMapAward() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckGetMapAwardImpl);
}

void InitDefaultsReqMapHuntingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqMapHunting_default_instance_;
    new (ptr) ::AFMsg::ReqMapHunting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqMapHunting::InitAsDefaultInstance();
}

void InitDefaultsReqMapHunting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqMapHuntingImpl);
}

void InitDefaultsAckMapHuntingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_AckMapHunting_default_instance_;
    new (ptr) ::AFMsg::AckMapHunting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckMapHunting::InitAsDefaultInstance();
}

void InitDefaultsAckMapHunting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckMapHuntingImpl);
}

void InitDefaultsReqMapKingWarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_ReqMapKingWar_default_instance_;
    new (ptr) ::AFMsg::ReqMapKingWar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqMapKingWar::InitAsDefaultInstance();
}

void InitDefaultsReqMapKingWar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqMapKingWarImpl);
}

void InitDefaultsAckMapKingWarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::AFMsg::_AckMapKingWar_default_instance_;
    new (ptr) ::AFMsg::AckMapKingWar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckMapKingWar::InitAsDefaultInstance();
}

void InitDefaultsAckMapKingWar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckMapKingWarImpl);
}

void InitDefaultsPVPRoomInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_PVPRoomInfo_default_instance_;
    new (ptr) ::AFMsg::PVPRoomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::PVPRoomInfo::InitAsDefaultInstance();
}

void InitDefaultsPVPRoomInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPVPRoomInfoImpl);
}

void InitDefaultsReqPVPApplyMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::AFMsg::_ReqPVPApplyMatch_default_instance_;
    new (ptr) ::AFMsg::ReqPVPApplyMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqPVPApplyMatch::InitAsDefaultInstance();
}

void InitDefaultsReqPVPApplyMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqPVPApplyMatchImpl);
}

void InitDefaultsAckPVPApplyMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfo();
  {
    void* ptr = &::AFMsg::_AckPVPApplyMatch_default_instance_;
    new (ptr) ::AFMsg::AckPVPApplyMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckPVPApplyMatch::InitAsDefaultInstance();
}

void InitDefaultsAckPVPApplyMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPVPApplyMatchImpl);
}

void InitDefaultsReqCreatePVPEctypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfo();
  {
    void* ptr = &::AFMsg::_ReqCreatePVPEctype_default_instance_;
    new (ptr) ::AFMsg::ReqCreatePVPEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::ReqCreatePVPEctype::InitAsDefaultInstance();
}

void InitDefaultsReqCreatePVPEctype() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqCreatePVPEctypeImpl);
}

void InitDefaultsAckCreatePVPEctypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfo();
  {
    void* ptr = &::AFMsg::_AckCreatePVPEctype_default_instance_;
    new (ptr) ::AFMsg::AckCreatePVPEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AFMsg::AckCreatePVPEctype::InitAsDefaultInstance();
}

void InitDefaultsAckCreatePVPEctype() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckCreatePVPEctypeImpl);
}

::google::protobuf::Metadata file_level_metadata[91];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGameServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGameServer, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGameServer, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGameServer, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, object_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, career_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, syser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, syn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSynData, msg_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerMove, mover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerMove, movetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerMove, target_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerMove, source_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatContainer, containertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatContainer, data_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, chat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, chat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckPlayerChat, container_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::EffectData, effect_ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::EffectData, effect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::EffectData, effect_rlt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, now_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, tar_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, use_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseSkill, effect_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, item_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, effect_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckUseItem, targetid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, transfer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSwapScene, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ItemStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ItemStruct, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ItemStruct, item_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::CurrencyStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::CurrencyStruct, currency_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::CurrencyStruct, currency_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckEndBattle, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckEndBattle, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckEndBattle, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckEndBattle, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPickDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPickDropItem, item_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAcceptTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAcceptTask, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCompeleteTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCompeleteTask, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinActivity, activity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinActivity, sub_activity_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckSearchOppnent, search_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckBattleOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckBattleOppnent, battle_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateGuild, guild_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSearchGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSearchGuild, guild_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_member_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_honor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild_SearchGuildObject, guild_rank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSearchGuild, guild_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinGuild, guild_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveGuild, guild_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuildMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuildMember, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuildMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuildMember, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, recruit_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprGuild, ad_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckDonateGuildItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckDonateGuildItem, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckDonateGuildItem, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckDonateGuildItem, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqGuildEctypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqGuildEctypeInfo, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqGuildEctypeInfo, guild_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GuildEctypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GuildEctypeInfo, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GuildEctypeInfo, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GuildEctypeInfo, ectype_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GuildEctypeInfo, ectype_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckGuildEctypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckGuildEctypeInfo, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckGuildEctypeInfo, xectypeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::SetGuildEctypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::SetGuildEctypeInfo, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::SetGuildEctypeInfo, xectypeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGuildEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqEnterGuildEctype, selfid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, chat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, chat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, chat_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, addtional_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, send_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, send_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, recvier_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ChatInfo, guid_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateChatGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateChatGroup, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateChatGroup, xchatgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateChatGroup, chattype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckjoinChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckjoinChatGroup, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckjoinChatGroup, xchatgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckjoinChatGroup, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckjoinChatGroup, chattype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckQuitChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckQuitChatGroup, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckQuitChatGroup, xchatgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckQuitChatGroup, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSubscriptionChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSubscriptionChatGroup, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSubscriptionChatGroup, xchatgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCancelSubscriptionChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCancelSubscriptionChatGroup, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCancelSubscriptionChatGroup, xchatgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqIntensifylevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqIntensifylevelToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqIntensifylevelToEquip, equipid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckIntensifylevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckIntensifylevelToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckIntensifylevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckIntensifylevelToEquip, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoleToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoleToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoleToEquip, equipid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckHoleToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckHoleToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckHoleToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckHoleToEquip, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqInlaystoneToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqInlaystoneToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqInlaystoneToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqInlaystoneToEquip, stoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqInlaystoneToEquip, hole_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckInlaystoneToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckInlaystoneToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckInlaystoneToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckInlaystoneToEquip, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqElementlevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqElementlevelToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqElementlevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqElementlevelToEquip, eelementtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckElementlevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckElementlevelToEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckElementlevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckElementlevelToEquip, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSetFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSetFightHero, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSetFightHero, heroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSetFightHero, fightpos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqWearEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqWearEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqWearEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqWearEquip, targetid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TakeOffEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TakeOffEquip, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TakeOffEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TakeOffEquip, targetid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMiningTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMiningTitle, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMiningTitle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMiningTitle, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSendMail, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSendMail, reciever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSendMail, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSendMail, currency_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, gate_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqSwitchServer, groupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckSwitchServer, gate_serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeamInfo, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeamInfo, captain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeamInfo, teammemberinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, nlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::TeammemberInfo, headicon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckCreateTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckJoinTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckLeaveTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprTeamMember, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprTeamMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprTeamMember, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckOprTeamMember, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckInviteTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckInviteTeam, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqAckInviteTeam, invite_target_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, nresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqTeamEnterEctype, nserverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckTeamEnterEctype, nresult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::GridGuildBaseInfo, icon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqBigMapGridInfo, map_title_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, guild_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, kingwar_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, kingwarrer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, hurting_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridBaseInfo, hurter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, owner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, msg_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, msg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapLeaveMsg, owner_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapWarHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapWarHistory, red_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapWarHistory, blue_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapWarHistory, winner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapWarHistory, war_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridDetailInfo, grid_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridDetailInfo, stay_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridDetailInfo, leave_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::BigMapGridDetailInfo, war_history_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckBigMapGridInfo, map_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckBigMapInfo, grid_base_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoldMapGrid, map_title_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqHoldMapGrid, guild_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqLeaveMapMsg, map_title_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqLeaveMapMsg, leave_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqGetMapAward, map_title_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMapHunting, map_title_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqMapKingWar, map_title_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, ncellstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, npvpmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, npvpgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, maxpalyer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, xredplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, xblueplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::PVPRoomInfo, groupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, npvpmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, applytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqPVPApplyMatch, team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPVPApplyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPVPApplyMatch, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPVPApplyMatch, xroominfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPVPApplyMatch, applytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckPVPApplyMatch, nresult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreatePVPEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreatePVPEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::ReqCreatePVPEctype, xroominfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckCreatePVPEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckCreatePVPEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckCreatePVPEctype, xroominfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AFMsg::AckCreatePVPEctype, applytype_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AFMsg::ReqEnterGameServer)},
  { 9, -1, sizeof(::AFMsg::ReqHeartBeat)},
  { 14, -1, sizeof(::AFMsg::ReqLeaveGameServer)},
  { 19, -1, sizeof(::AFMsg::PlayerEntryInfo)},
  { 31, -1, sizeof(::AFMsg::AckPlayerEntryList)},
  { 37, -1, sizeof(::AFMsg::AckPlayerLeaveList)},
  { 43, -1, sizeof(::AFMsg::ReqAckSynData)},
  { 53, -1, sizeof(::AFMsg::ReqAckPlayerMove)},
  { 62, -1, sizeof(::AFMsg::ChatContainer)},
  { 69, -1, sizeof(::AFMsg::ReqAckPlayerChat)},
  { 80, -1, sizeof(::AFMsg::EffectData)},
  { 88, -1, sizeof(::AFMsg::ReqAckUseSkill)},
  { 99, -1, sizeof(::AFMsg::ReqAckUseItem)},
  { 109, -1, sizeof(::AFMsg::ReqAckSwapScene)},
  { 120, -1, sizeof(::AFMsg::ItemStruct)},
  { 127, -1, sizeof(::AFMsg::CurrencyStruct)},
  { 134, -1, sizeof(::AFMsg::ReqAckEndBattle)},
  { 143, -1, sizeof(::AFMsg::ReqPickDropItem)},
  { 149, -1, sizeof(::AFMsg::ReqAcceptTask)},
  { 155, -1, sizeof(::AFMsg::ReqCompeleteTask)},
  { 161, -1, sizeof(::AFMsg::ReqAckJoinActivity)},
  { 168, -1, sizeof(::AFMsg::ReqAckSearchOppnent)},
  { 174, -1, sizeof(::AFMsg::ReqAckBattleOppnent)},
  { 180, -1, sizeof(::AFMsg::ReqAckCreateGuild)},
  { 187, -1, sizeof(::AFMsg::ReqSearchGuild)},
  { 193, -1, sizeof(::AFMsg::AckSearchGuild_SearchGuildObject)},
  { 205, -1, sizeof(::AFMsg::AckSearchGuild)},
  { 211, -1, sizeof(::AFMsg::ReqAckJoinGuild)},
  { 218, -1, sizeof(::AFMsg::ReqAckLeaveGuild)},
  { 225, -1, sizeof(::AFMsg::ReqAckOprGuildMember)},
  { 233, -1, sizeof(::AFMsg::ReqAckOprGuild)},
  { 243, -1, sizeof(::AFMsg::ReqAckDonateGuildItem)},
  { 251, -1, sizeof(::AFMsg::ReqGuildEctypeInfo)},
  { 258, -1, sizeof(::AFMsg::GuildEctypeInfo)},
  { 267, -1, sizeof(::AFMsg::AckGuildEctypeInfo)},
  { 274, -1, sizeof(::AFMsg::SetGuildEctypeInfo)},
  { 281, -1, sizeof(::AFMsg::ReqEnterGuildEctype)},
  { 287, -1, sizeof(::AFMsg::ChatInfo)},
  { 301, -1, sizeof(::AFMsg::ReqAckCreateChatGroup)},
  { 310, -1, sizeof(::AFMsg::ReqAckjoinChatGroup)},
  { 319, -1, sizeof(::AFMsg::ReqAckQuitChatGroup)},
  { 327, -1, sizeof(::AFMsg::ReqSubscriptionChatGroup)},
  { 334, -1, sizeof(::AFMsg::ReqCancelSubscriptionChatGroup)},
  { 341, -1, sizeof(::AFMsg::ReqIntensifylevelToEquip)},
  { 348, -1, sizeof(::AFMsg::AckIntensifylevelToEquip)},
  { 356, -1, sizeof(::AFMsg::ReqHoleToEquip)},
  { 363, -1, sizeof(::AFMsg::AckHoleToEquip)},
  { 371, -1, sizeof(::AFMsg::ReqInlaystoneToEquip)},
  { 380, -1, sizeof(::AFMsg::AckInlaystoneToEquip)},
  { 388, -1, sizeof(::AFMsg::ReqElementlevelToEquip)},
  { 396, -1, sizeof(::AFMsg::AckElementlevelToEquip)},
  { 404, -1, sizeof(::AFMsg::ReqSetFightHero)},
  { 412, -1, sizeof(::AFMsg::ReqWearEquip)},
  { 420, -1, sizeof(::AFMsg::TakeOffEquip)},
  { 428, -1, sizeof(::AFMsg::ReqMiningTitle)},
  { 436, -1, sizeof(::AFMsg::ReqSendMail)},
  { 445, -1, sizeof(::AFMsg::ReqSwitchServer)},
  { 457, -1, sizeof(::AFMsg::AckSwitchServer)},
  { 466, -1, sizeof(::AFMsg::TeamInfo)},
  { 474, -1, sizeof(::AFMsg::TeammemberInfo)},
  { 484, -1, sizeof(::AFMsg::ReqAckCreateTeam)},
  { 491, -1, sizeof(::AFMsg::ReqAckJoinTeam)},
  { 498, -1, sizeof(::AFMsg::ReqAckLeaveTeam)},
  { 505, -1, sizeof(::AFMsg::ReqAckOprTeamMember)},
  { 514, -1, sizeof(::AFMsg::ReqAckInviteTeam)},
  { 522, -1, sizeof(::AFMsg::ReqTeamEnterEctype)},
  { 533, -1, sizeof(::AFMsg::AckTeamEnterEctype)},
  { 543, -1, sizeof(::AFMsg::GridGuildBaseInfo)},
  { 553, -1, sizeof(::AFMsg::ReqBigMapGridInfo)},
  { 559, -1, sizeof(::AFMsg::BigMapGridBaseInfo)},
  { 570, -1, sizeof(::AFMsg::BigMapLeaveMsg)},
  { 580, -1, sizeof(::AFMsg::BigMapWarHistory)},
  { 589, -1, sizeof(::AFMsg::BigMapGridDetailInfo)},
  { 598, -1, sizeof(::AFMsg::AckBigMapGridInfo)},
  { 604, -1, sizeof(::AFMsg::ReqBigMapInfo)},
  { 609, -1, sizeof(::AFMsg::AckBigMapInfo)},
  { 615, -1, sizeof(::AFMsg::ReqHoldMapGrid)},
  { 622, -1, sizeof(::AFMsg::AckHoldMapGrid)},
  { 627, -1, sizeof(::AFMsg::ReqLeaveMapMsg)},
  { 634, -1, sizeof(::AFMsg::AckLeaveMapMsg)},
  { 639, -1, sizeof(::AFMsg::ReqGetMapAward)},
  { 645, -1, sizeof(::AFMsg::AckGetMapAward)},
  { 650, -1, sizeof(::AFMsg::ReqMapHunting)},
  { 656, -1, sizeof(::AFMsg::AckMapHunting)},
  { 661, -1, sizeof(::AFMsg::ReqMapKingWar)},
  { 667, -1, sizeof(::AFMsg::AckMapKingWar)},
  { 672, -1, sizeof(::AFMsg::PVPRoomInfo)},
  { 687, -1, sizeof(::AFMsg::ReqPVPApplyMatch)},
  { 697, -1, sizeof(::AFMsg::AckPVPApplyMatch)},
  { 706, -1, sizeof(::AFMsg::ReqCreatePVPEctype)},
  { 713, -1, sizeof(::AFMsg::AckCreatePVPEctype)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckSynData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckPlayerMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ChatContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckUseItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ItemStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_CurrencyStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckEndBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqPickDropItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAcceptTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqCompeleteTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckJoinActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckSearchOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckBattleOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckCreateGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSearchGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckSearchGuild_SearchGuildObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckSearchGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckJoinGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckLeaveGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckOprGuildMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckOprGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckDonateGuildItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqGuildEctypeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_GuildEctypeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckGuildEctypeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_SetGuildEctypeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqEnterGuildEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ChatInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckCreateChatGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckjoinChatGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckQuitChatGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSubscriptionChatGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqCancelSubscriptionChatGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqIntensifylevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckIntensifylevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqHoleToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckHoleToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqInlaystoneToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckInlaystoneToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqElementlevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckElementlevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSetFightHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqWearEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_TakeOffEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqMiningTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSendMail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqSwitchServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckSwitchServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_TeammemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckCreateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckJoinTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckLeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckOprTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqAckInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqTeamEnterEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckTeamEnterEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_GridGuildBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_BigMapGridBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_BigMapLeaveMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_BigMapWarHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_BigMapGridDetailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqBigMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckBigMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqHoldMapGrid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckHoldMapGrid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqGetMapAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckGetMapAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqMapHunting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckMapHunting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqMapKingWar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckMapKingWar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_PVPRoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqPVPApplyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckPVPApplyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_ReqCreatePVPEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AFMsg::_AckCreatePVPEctype_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AFMsgShare.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 91);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020AFMsgShare.proto\022\005AFMsg\032\016AFDefine.prot"
      "o\032\017AFMsgBase.proto\"^\n\022ReqEnterGameServer"
      "\022\030\n\002id\030\001 \001(\0132\014.AFMsg.Ident\022\017\n\007account\030\002 "
      "\001(\t\022\017\n\007game_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\"\016\n\014Re"
      "qHeartBeat\"\024\n\022ReqLeaveGameServer\"\263\001\n\017Pla"
      "yerEntryInfo\022!\n\013object_guid\030\001 \001(\0132\014.AFMs"
      "g.Ident\022\033\n\003pos\030\002 \001(\0132\016.AFMsg.Point3D\022\023\n\013"
      "career_type\030\003 \001(\005\022\024\n\014player_state\030\004 \001(\005\022"
      "\021\n\tconfig_id\030\005 \001(\t\022\020\n\010scene_id\030\006 \001(\005\022\020\n\010"
      "class_id\030\007 \001(\t\"A\n\022AckPlayerEntryList\022+\n\013"
      "object_list\030\001 \003(\0132\026.AFMsg.PlayerEntryInf"
      "o\"7\n\022AckPlayerLeaveList\022!\n\013object_list\030\001"
      " \003(\0132\014.AFMsg.Ident\"\206\002\n\rReqAckSynData\022\033\n\005"
      "syser\030\001 \001(\0132\014.AFMsg.Ident\022!\n\013object_list"
      "\030\002 \003(\0132\014.AFMsg.Ident\022\014\n\004data\030\003 \001(\t\022.\n\010sy"
      "n_type\030\004 \001(\0162\034.AFMsg.ReqAckSynData.SynTy"
      "pe\022!\n\006msg_id\030\005 \001(\0162\021.AFMsg.EGameMsgID\"T\n"
      "\007SynType\022\014\n\010EST_NONE\020\000\022\r\n\tEST_SCENE\020\001\022\r\n"
      "\tEST_GROUP\020\002\022\r\n\tEST_GUILD\020\003\022\016\n\nEST_FRIEN"
      "D\020\004\"\213\001\n\020ReqAckPlayerMove\022\033\n\005mover\030\001 \001(\0132"
      "\014.AFMsg.Ident\022\020\n\010moveType\030\002 \001(\005\022#\n\ntarge"
      "t_pos\030\003 \003(\0132\017.AFMsg.Position\022#\n\nsource_p"
      "os\030\004 \003(\0132\017.AFMsg.Position\"h\n\rChatContain"
      "er\022\025\n\rConTainerType\030\002 \001(\005\022\021\n\tdata_info\030\003"
      " \001(\t\"-\n\rContainerType\022\r\n\tEGCT_NONE\020\000\022\r\n\t"
      "EGCT_ITEM\020\001\"\262\002\n\020ReqAckPlayerChat\022\035\n\007chat"
      "_id\030\001 \001(\0132\014.AFMsg.Ident\0228\n\tchat_type\030\002 \001"
      "(\0162%.AFMsg.ReqAckPlayerChat.EGameChatTyp"
      "e\022\021\n\tchat_info\030\003 \001(\t\022\021\n\tchat_name\030\004 \001(\t\022"
      "\037\n\ttarget_id\030\005 \001(\0132\014.AFMsg.Ident\022,\n\016Cont"
      "ainer_data\030\006 \003(\0132\024.AFMsg.ChatContainer\"P"
      "\n\rEGameChatType\022\016\n\nEGCT_GUILD\020\000\022\020\n\014EGCT_"
      "PRIVATE\020\001\022\r\n\tEGCT_TEAM\020\002\022\016\n\nEGCT_WORLD\020\003"
      "\"\267\001\n\nEffectData\022\"\n\014effect_ident\030\001 \001(\0132\014."
      "AFMsg.Ident\022\024\n\014effect_value\030\002 \001(\005\0221\n\neff"
      "ect_rlt\030\003 \001(\0162\035.AFMsg.EffectData.EResult"
      "Type\"<\n\013EResultType\022\017\n\013EET_SUCCESS\020\000\022\014\n\010"
      "EET_FAIL\020\001\022\016\n\nEET_REFUSE\020\002\"\275\001\n\016ReqAckUse"
      "Skill\022\032\n\004user\030\001 \001(\0132\014.AFMsg.Ident\022\020\n\010ski"
      "ll_id\030\002 \001(\t\022 \n\007now_pos\030\003 \001(\0132\017.AFMsg.Pos"
      "ition\022 \n\007tar_pos\030\004 \001(\0132\017.AFMsg.Position\022"
      "\021\n\tuse_index\030\005 \001(\005\022&\n\013effect_data\030\006 \003(\0132"
      "\021.AFMsg.EffectData\"\265\001\n\rReqAckUseItem\022\032\n\004"
      "user\030\001 \001(\0132\014.AFMsg.Ident\022\037\n\titem_guid\030\002 "
      "\001(\0132\014.AFMsg.Ident\022&\n\013effect_data\030\003 \003(\0132\021"
      ".AFMsg.EffectData\022\037\n\004item\030\004 \001(\0132\021.AFMsg."
      "ItemStruct\022\036\n\010targetid\030\005 \001(\0132\014.AFMsg.Ide"
      "nt\"\345\001\n\017ReqAckSwapScene\022;\n\rtransfer_type\030"
      "\001 \001(\0162$.AFMsg.ReqAckSwapScene.EGameSwapT"
      "ype\022\020\n\010scene_id\030\002 \001(\005\022\017\n\007line_id\030\003 \001(\005\022\t"
      "\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\"Q\n\rEGame"
      "SwapType\022\017\n\013EGST_NARMAL\020\000\022\016\n\nEGST_CLONE\020"
      "\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST_MIRROR\020\003\"1\n\nIt"
      "emStruct\022\017\n\007item_id\030\001 \001(\t\022\022\n\nitem_count\030"
      "\002 \001(\005\"\?\n\016CurrencyStruct\022\025\n\rcurrency_type"
      "\030\001 \001(\005\022\026\n\016currency_count\030\002 \001(\005\"d\n\017ReqAck"
      "EndBattle\022\r\n\005money\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\017\n"
      "\007diamond\030\003 \001(\005\022$\n\titem_list\030\004 \003(\0132\021.AFMs"
      "g.ItemStruct\"2\n\017ReqPickDropItem\022\037\n\titem_"
      "guid\030\002 \001(\0132\014.AFMsg.Ident\" \n\rReqAcceptTas"
      "k\022\017\n\007task_id\030\001 \001(\t\"#\n\020ReqCompeleteTask\022\017"
      "\n\007task_id\030\001 \001(\t\"\357\001\n\022ReqAckJoinActivity\022B"
      "\n\ractivity_type\030\001 \001(\0162+.AFMsg.ReqAckJoin"
      "Activity.EGameActivityType\022I\n\021sub_activi"
      "ty_type\030\002 \001(\0162..AFMsg.ReqAckJoinActivity"
      ".EGameActivitySubType\"!\n\021EGameActivityTy"
      "pe\022\014\n\010EGAT_PVP\020\000\"\'\n\024EGameActivitySubType"
      "\022\017\n\013EGAT_NORMAL\020\000\">\n\023ReqAckSearchOppnent"
      "\022\'\n\013search_type\030\001 \001(\0162\022.AFMsg.EBattleTyp"
      "e\">\n\023ReqAckBattleOppnent\022\'\n\013battle_type\030"
      "\001 \001(\0162\022.AFMsg.EBattleType\"G\n\021ReqAckCreat"
      "eGuild\022\036\n\010guild_id\030\001 \001(\0132\014.AFMsg.Ident\022\022"
      "\n\nguild_name\030\002 \001(\t\"$\n\016ReqSearchGuild\022\022\n\n"
      "guild_name\030\001 \001(\t\"\220\002\n\016AckSearchGuild\022;\n\ng"
      "uild_list\030\001 \003(\0132\'.AFMsg.AckSearchGuild.S"
      "earchGuildObject\032\300\001\n\021SearchGuildObject\022\036"
      "\n\010guild_ID\030\001 \001(\0132\014.AFMsg.Ident\022\022\n\nguild_"
      "name\030\002 \001(\t\022\022\n\nguild_icon\030\003 \001(\t\022\032\n\022guild_"
      "member_count\030\004 \001(\005\022\036\n\026guild_member_max_c"
      "ount\030\005 \001(\005\022\023\n\013guild_honor\030\006 \001(\005\022\022\n\nguild"
      "_rank\030\007 \001(\005\"E\n\017ReqAckJoinGuild\022\036\n\010guild_"
      "id\030\001 \001(\0132\014.AFMsg.Ident\022\022\n\nguild_name\030\002 \001"
      "(\t\"F\n\020ReqAckLeaveGuild\022\036\n\010guild_id\030\001 \001(\013"
      "2\014.AFMsg.Ident\022\022\n\nguild_name\030\002 \001(\t\"\311\002\n\024R"
      "eqAckOprGuildMember\022\036\n\010guild_id\030\001 \001(\0132\014."
      "AFMsg.Ident\022\037\n\tmember_id\030\002 \001(\0132\014.AFMsg.I"
      "dent\022>\n\004type\030\003 \001(\01620.AFMsg.ReqAckOprGuil"
      "dMember.EGGuildMemberOprType\"\257\001\n\024EGGuild"
      "MemberOprType\022\r\n\tEGAT_DOWN\020\000\022\013\n\007EGAT_UP\020"
      "\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_APPOINT\020\003\022\r\n\tEG"
      "AT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020\005\022\024\n\020EGAT_ACCEP"
      "TAPPLY\020\006\022\022\n\016EGAT_DENYAPPLY\020\007\022\020\n\014EGAT_KIC"
      "KOUT\020\010\"\314\002\n\016ReqAckOprGuild\022\036\n\010guild_id\030\001 "
      "\001(\0132\014.AFMsg.Ident\022\037\n\tplayer_id\030\002 \001(\0132\014.A"
      "FMsg.Ident\0222\n\004type\030\003 \001(\0162$.AFMsg.ReqAckO"
      "prGuild.EGGuildOprType\022\024\n\014Recruit_data\030\004"
      " \001(\t\022\017\n\007Ad_data\030\005 \001(\t\"\235\001\n\016EGGuildOprType"
      "\022\r\n\tEGAT_NONE\020\000\022\025\n\021EGAT_APPLYDISMISS\020\001\022\024"
      "\n\020EGAT_STOPDISMISS\020\002\022\023\n\017EGAT_SETRECRUIT\020"
      "\003\022\027\n\023EGAT_PUBLISHRECRUIT\020\004\022\017\n\013EGAT_EDITA"
      "D\020\005\022\020\n\014EGAT_LEVELUP\020\006\"~\n\025ReqAckDonateGui"
      "ldItem\022\036\n\010guild_id\030\001 \001(\0132\014.AFMsg.Ident\022\037"
      "\n\ttarget_id\030\002 \001(\0132\014.AFMsg.Ident\022$\n\titem_"
      "list\030\003 \003(\0132\021.AFMsg.ItemStruct\"R\n\022ReqGuil"
      "dEctypeInfo\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Iden"
      "t\022\036\n\010guild_id\030\002 \001(\0132\014.AFMsg.Ident\"m\n\017Gui"
      "ldEctypeInfo\022\036\n\010guild_id\030\001 \001(\0132\014.AFMsg.I"
      "dent\022\021\n\tserver_id\030\002 \001(\003\022\021\n\tEctype_id\030\003 \001"
      "(\003\022\024\n\014Ectype_Group\030\004 \001(\003\"_\n\022AckGuildEcty"
      "peInfo\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022+\n\013"
      "xectypeinfo\030\002 \001(\0132\026.AFMsg.GuildEctypeInf"
      "o\"_\n\022SetGuildEctypeInfo\022\034\n\006selfid\030\001 \001(\0132"
      "\014.AFMsg.Ident\022+\n\013xectypeinfo\030\002 \001(\0132\026.AFM"
      "sg.GuildEctypeInfo\"3\n\023ReqEnterGuildEctyp"
      "e\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\"\325\002\n\010Chat"
      "Info\022,\n\tchat_type\030\001 \001(\0162\031.AFMsg.ChatInfo"
      ".EChatType\022\021\n\tchat_info\030\002 \001(\t\022\021\n\tchat_ti"
      "me\030\003 \001(\003\022\026\n\016addtional_info\030\004 \001(\t\022\035\n\007send"
      "_id\030\005 \001(\0132\014.AFMsg.Ident\022\021\n\tsend_name\030\006 \001"
      "(\t\022\022\n\nsend_level\030\007 \001(\005\022 \n\nrecvier_id\030\010 \003"
      "(\0132\014.AFMsg.Ident\022\021\n\tguid_name\030\t \001(\t\"b\n\tE"
      "ChatType\022\024\n\020ECHATTYPE_NORMAL\020\000\022\025\n\021ECHATT"
      "YPE_PRIVATE\020\001\022\023\n\017ECHATTYPE_GUILD\020\002\022\023\n\017EC"
      "HATTYPE_WORLD\020\003\"y\n\025ReqAckCreateChatGroup"
      "\022\014\n\004name\030\001 \001(\t\022\034\n\006selfid\030\002 \001(\0132\014.AFMsg.I"
      "dent\022\"\n\014xChatGroupid\030\003 \001(\0132\014.AFMsg.Ident"
      "\022\020\n\010chatType\030\004 \001(\005\"y\n\023ReqAckjoinChatGrou"
      "p\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022\"\n\014xChat"
      "Groupid\030\002 \001(\0132\014.AFMsg.Ident\022\016\n\006result\030\003 "
      "\001(\003\022\020\n\010chatType\030\004 \001(\005\"g\n\023ReqAckQuitChatG"
      "roup\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022\"\n\014xC"
      "hatGroupid\030\002 \001(\0132\014.AFMsg.Ident\022\016\n\006result"
      "\030\003 \001(\003\"\\\n\030ReqSubscriptionChatGroup\022\034\n\006se"
      "lfid\030\001 \001(\0132\014.AFMsg.Ident\022\"\n\014xChatGroupid"
      "\030\002 \003(\0132\014.AFMsg.Ident\"b\n\036ReqCancelSubscri"
      "ptionChatGroup\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.I"
      "dent\022\"\n\014xChatGroupid\030\002 \003(\0132\014.AFMsg.Ident"
      "\"W\n\030ReqIntensifylevelToEquip\022\034\n\006selfid\030\001"
      " \001(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \001(\0132\014.AF"
      "Msg.Ident\"g\n\030AckIntensifylevelToEquip\022\034\n"
      "\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002"
      " \001(\0132\014.AFMsg.Ident\022\016\n\006result\030\003 \001(\005\"M\n\016Re"
      "qHoleToEquip\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ide"
      "nt\022\035\n\007equipid\030\002 \001(\0132\014.AFMsg.Ident\"]\n\016Ack"
      "HoleToEquip\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Iden"
      "t\022\035\n\007equipid\030\002 \001(\0132\014.AFMsg.Ident\022\016\n\006resu"
      "lt\030\003 \001(\005\"x\n\024ReqInlaystoneToEquip\022\034\n\006self"
      "id\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \001(\0132"
      "\014.AFMsg.Ident\022\017\n\007stoneid\030\003 \001(\t\022\022\n\nhole_i"
      "ndex\030\004 \001(\005\"c\n\024AckInlaystoneToEquip\022\034\n\006se"
      "lfid\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \001("
      "\0132\014.AFMsg.Ident\022\016\n\006result\030\003 \001(\005\"\204\001\n\026ReqE"
      "lementlevelToEquip\022\034\n\006selfid\030\001 \001(\0132\014.AFM"
      "sg.Ident\022\035\n\007equipid\030\002 \001(\0132\014.AFMsg.Ident\022"
      "-\n\014eElementType\030\003 \001(\0162\027.AFMsg.EGameEleme"
      "ntType\"e\n\026AckElementlevelToEquip\022\034\n\006self"
      "id\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \001(\0132"
      "\014.AFMsg.Ident\022\016\n\006result\030\003 \001(\005\"_\n\017ReqSetF"
      "ightHero\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022\034"
      "\n\006Heroid\030\002 \001(\0132\014.AFMsg.Ident\022\020\n\010FightPos"
      "\030\003 \001(\005\"k\n\014ReqWearEquip\022\034\n\006selfid\030\001 \001(\0132\014"
      ".AFMsg.Ident\022\035\n\007equipid\030\002 \001(\0132\014.AFMsg.Id"
      "ent\022\036\n\010Targetid\030\003 \001(\0132\014.AFMsg.Ident\"k\n\014T"
      "akeOffEquip\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Iden"
      "t\022\035\n\007equipid\030\002 \001(\0132\014.AFMsg.Ident\022\036\n\010Targ"
      "etid\030\003 \001(\0132\014.AFMsg.Ident\"D\n\016ReqMiningTit"
      "le\022\034\n\006selfid\030\001 \001(\0132\014.AFMsg.Ident\022\t\n\001x\030\002 "
      "\001(\005\022\t\n\001y\030\003 \001(\005\"\237\001\n\013ReqSendMail\022\034\n\006selfid"
      "\030\001 \001(\0132\014.AFMsg.Ident\022\036\n\010reciever\030\002 \001(\0132\014"
      ".AFMsg.Ident\022$\n\titem_list\030\003 \003(\0132\021.AFMsg."
      "ItemStruct\022,\n\rcurrency_list\030\004 \003(\0132\025.AFMs"
      "g.CurrencyStruct\"\271\001\n\017ReqSwitchServer\022\034\n\006"
      "selfid\030\001 \001(\0132\014.AFMsg.Ident\022\025\n\rself_serve"
      "rid\030\002 \001(\003\022\027\n\017target_serverid\030\003 \001(\003\022\025\n\rga"
      "te_serverid\030\004 \001(\003\022\017\n\007SceneID\030\005 \001(\003\022\037\n\tcl"
      "ient_id\030\006 \001(\0132\014.AFMsg.Ident\022\017\n\007groupID\030\007"
      " \001(\003\"v\n\017AckSwitchServer\022\034\n\006selfid\030\001 \001(\0132"
      "\014.AFMsg.Ident\022\025\n\rself_serverid\030\002 \001(\003\022\027\n\017"
      "target_serverid\030\003 \001(\003\022\025\n\rgate_serverid\030\004"
      " \001(\003\"z\n\010TeamInfo\022\035\n\007team_id\030\001 \001(\0132\014.AFMs"
      "g.Ident\022 \n\ncaptain_id\030\002 \001(\0132\014.AFMsg.Iden"
      "t\022-\n\016teammemberInfo\030\003 \003(\0132\025.AFMsg.Teamme"
      "mberInfo\"n\n\016TeammemberInfo\022\037\n\tplayer_id\030"
      "\001 \001(\0132\014.AFMsg.Ident\022\014\n\004name\030\002 \001(\t\022\016\n\006nLe"
      "vel\030\003 \001(\005\022\013\n\003job\030\004 \001(\005\022\020\n\010HeadIcon\030\005 \001(\t"
      "\"U\n\020ReqAckCreateTeam\022\035\n\007team_id\030\001 \001(\0132\014."
      "AFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.AFMsg.T"
      "eamInfo\"S\n\016ReqAckJoinTeam\022\035\n\007team_id\030\001 \001"
      "(\0132\014.AFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.AF"
      "Msg.TeamInfo\"T\n\017ReqAckLeaveTeam\022\035\n\007team_"
      "id\030\001 \001(\0132\014.AFMsg.Ident\022\"\n\txTeamInfo\030\002 \001("
      "\0132\017.AFMsg.TeamInfo\"\350\002\n\023ReqAckOprTeamMemb"
      "er\022\035\n\007team_id\030\001 \001(\0132\014.AFMsg.Ident\022\037\n\tmem"
      "ber_id\030\002 \001(\0132\014.AFMsg.Ident\022<\n\004type\030\003 \001(\016"
      "2..AFMsg.ReqAckOprTeamMember.EGTeamMembe"
      "rOprType\022\"\n\txTeamInfo\030\004 \001(\0132\017.AFMsg.Team"
      "Info\"\256\001\n\023EGTeamMemberOprType\022\r\n\tEGAT_DOW"
      "N\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_"
      "APPOINT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020"
      "\005\022\024\n\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPL"
      "Y\020\007\022\020\n\014EGAT_KICKOUT\020\010\"x\n\020ReqAckInviteTea"
      "m\022\035\n\007team_id\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007self"
      "_id\030\002 \001(\0132\014.AFMsg.Ident\022&\n\020invite_target"
      "_id\030\003 \001(\0132\014.AFMsg.Ident\"\233\001\n\022ReqTeamEnter"
      "Ectype\022\035\n\007team_id\030\001 \001(\0132\014.AFMsg.Ident\022\035\n"
      "\007self_id\030\002 \001(\0132\014.AFMsg.Ident\022\021\n\tnEctypeI"
      "D\030\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001"
      "(\005\022\021\n\tnServerID\030\006 \001(\005\"\210\001\n\022AckTeamEnterEc"
      "type\022\035\n\007team_id\030\001 \001(\0132\014.AFMsg.Ident\022\035\n\007s"
      "elf_id\030\002 \001(\0132\014.AFMsg.Ident\022\021\n\tnEctypeID\030"
      "\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005"
      "\"k\n\021GridGuildBaseInfo\022\030\n\002id\030\001 \001(\0132\014.AFMs"
      "g.Ident\022\r\n\005level\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\020\n"
      "\010resource\030\004 \001(\005\022\014\n\004icon\030\005 \001(\t\")\n\021ReqBigM"
      "apGridInfo\022\024\n\014map_title_id\030\001 \003(\t\"\272\001\n\022Big"
      "MapGridBaseInfo\022\n\n\002id\030\001 \001(\t\022,\n\nguild_inf"
      "o\030\002 \001(\0132\030.AFMsg.GridGuildBaseInfo\022\024\n\014kin"
      "gwar_time\030\n \001(\005\022 \n\nkingwarrer\030\013 \001(\0132\014.AF"
      "Msg.Ident\022\024\n\014hurting_time\030\024 \001(\005\022\034\n\006hurte"
      "r\030\025 \001(\0132\014.AFMsg.Ident\"z\n\016BigMapLeaveMsg\022"
      "\033\n\005owner\030\001 \001(\0132\014.AFMsg.Ident\022\022\n\nowner_na"
      "me\030\002 \001(\t\022\020\n\010msg_data\030\003 \001(\t\022\020\n\010msg_time\030\004"
      " \001(\005\022\023\n\013owner_level\030\005 \001(\005\"\236\001\n\020BigMapWarH"
      "istory\022*\n\010red_info\030\001 \001(\0132\030.AFMsg.GridGui"
      "ldBaseInfo\022+\n\tblue_info\030\002 \001(\0132\030.AFMsg.Gr"
      "idGuildBaseInfo\022\037\n\twinner_id\030\n \001(\0132\014.AFM"
      "sg.Ident\022\020\n\010war_time\030\013 \001(\005\"\323\001\n\024BigMapGri"
      "dDetailInfo\0221\n\016grid_base_info\030\001 \001(\0132\031.AF"
      "Msg.BigMapGridBaseInfo\0220\n\016stay_guid_list"
      "\030\002 \003(\0132\030.AFMsg.GridGuildBaseInfo\022(\n\tleav"
      "e_msg\030\003 \003(\0132\025.AFMsg.BigMapLeaveMsg\022,\n\013wa"
      "r_history\030\004 \003(\0132\027.AFMsg.BigMapWarHistory"
      "\"B\n\021AckBigMapGridInfo\022-\n\010map_data\030\001 \003(\0132"
      "\033.AFMsg.BigMapGridDetailInfo\"\017\n\rReqBigMa"
      "pInfo\"B\n\rAckBigMapInfo\0221\n\016grid_base_info"
      "\030\001 \003(\0132\031.AFMsg.BigMapGridBaseInfo\"F\n\016Req"
      "HoldMapGrid\022\024\n\014map_title_id\030\001 \001(\t\022\036\n\010gui"
      "ld_id\030\002 \001(\0132\014.AFMsg.Ident\"\020\n\016AckHoldMapG"
      "rid\"P\n\016ReqLeaveMapMsg\022\024\n\014map_title_id\030\001 "
      "\001(\t\022(\n\tleave_msg\030\002 \001(\0132\025.AFMsg.BigMapLea"
      "veMsg\"\020\n\016AckLeaveMapMsg\"&\n\016ReqGetMapAwar"
      "d\022\024\n\014map_title_id\030\001 \001(\t\"\020\n\016AckGetMapAwar"
      "d\"%\n\rReqMapHunting\022\024\n\014map_title_id\030\001 \001(\t"
      "\"\017\n\rAckMapHunting\"%\n\rReqMapKingWar\022\024\n\014ma"
      "p_title_id\030\001 \001(\t\"\017\n\rAckMapKingWar\"\361\001\n\013PV"
      "PRoomInfo\022\023\n\013nCellStatus\030\001 \001(\005\022\034\n\006RoomID"
      "\030\002 \001(\0132\014.AFMsg.Ident\022\020\n\010nPVPMode\030\003 \001(\005\022\021"
      "\n\tnPVPGrade\030\004 \001(\005\022\021\n\tMaxPalyer\030\005 \001(\005\022 \n\n"
      "xRedPlayer\030\006 \003(\0132\014.AFMsg.Ident\022!\n\013xBlueP"
      "layer\030\007 \003(\0132\014.AFMsg.Ident\022\020\n\010serverid\030\010 "
      "\001(\003\022\017\n\007SceneID\030\t \001(\003\022\017\n\007groupID\030\n \001(\003\"\276\001"
      "\n\020ReqPVPApplyMatch\022\035\n\007self_id\030\001 \001(\0132\014.AF"
      "Msg.Ident\022\020\n\010nPVPMode\030\002 \001(\005\022\r\n\005score\030\003 \001"
      "(\003\022\021\n\tApplyType\030\004 \001(\005\022\035\n\007team_id\030\005 \001(\0132\014"
      ".AFMsg.Ident\"8\n\nEApplyType\022\025\n\021EApplyType"
      "_Single\020\000\022\023\n\017EApplyType_Team\020\001\"|\n\020AckPVP"
      "ApplyMatch\022\035\n\007self_id\030\001 \001(\0132\014.AFMsg.Iden"
      "t\022%\n\txRoomInfo\030\002 \001(\0132\022.AFMsg.PVPRoomInfo"
      "\022\021\n\tApplyType\030\003 \001(\005\022\017\n\007nResult\030\004 \001(\005\"Z\n\022"
      "ReqCreatePVPEctype\022\035\n\007self_id\030\001 \001(\0132\014.AF"
      "Msg.Ident\022%\n\txRoomInfo\030\002 \001(\0132\022.AFMsg.PVP"
      "RoomInfo\"m\n\022AckCreatePVPEctype\022\035\n\007self_i"
      "d\030\001 \001(\0132\014.AFMsg.Ident\022%\n\txRoomInfo\030\002 \001(\013"
      "2\022.AFMsg.PVPRoomInfo\022\021\n\tApplyType\030\003 \001(\005b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AFMsgShare.proto", &protobuf_RegisterTypes);
  ::protobuf_AFDefine_2eproto::AddDescriptors();
  ::protobuf_AFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AFMsgShare_2eproto
namespace AFMsg {
const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[0];
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSynData_SynType ReqAckSynData::EST_NONE;
const ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
const ReqAckSynData_SynType ReqAckSynData::EST_GUILD;
const ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
const ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
const ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
const int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[1];
}
bool ChatContainer_ContainerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatContainer_ContainerType ChatContainer::EGCT_NONE;
const ChatContainer_ContainerType ChatContainer::EGCT_ITEM;
const ChatContainer_ContainerType ChatContainer::ContainerType_MIN;
const ChatContainer_ContainerType ChatContainer::ContainerType_MAX;
const int ChatContainer::ContainerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[3];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[4];
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[5];
}
bool ReqAckJoinActivity_EGameActivityType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MIN;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MAX;
const int ReqAckJoinActivity::EGameActivityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[6];
}
bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MIN;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MAX;
const int ReqAckJoinActivity::EGameActivitySubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[7];
}
bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_UP;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICK;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_APPOINT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_FIRE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DEMISE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_ACCEPTAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DENYAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICKOUT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MIN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MAX;
const int ReqAckOprGuildMember::EGGuildMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[8];
}
bool ReqAckOprGuild_EGGuildOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_NONE;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_APPLYDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_STOPDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_SETRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_PUBLISHRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_EDITAD;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_LEVELUP;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MIN;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MAX;
const int ReqAckOprGuild::EGGuildOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[9];
}
bool ChatInfo_EChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatInfo_EChatType ChatInfo::ECHATTYPE_NORMAL;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_PRIVATE;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_GUILD;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_WORLD;
const ChatInfo_EChatType ChatInfo::EChatType_MIN;
const ChatInfo_EChatType ChatInfo::EChatType_MAX;
const int ChatInfo::EChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[10];
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor() {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AFMsgShare_2eproto::file_level_enum_descriptors[11];
}
bool ReqPVPApplyMatch_EApplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Team;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MIN;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MAX;
const int ReqPVPApplyMatch::EApplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::AFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGameServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::AFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGameServer();
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqEnterGameServer.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqEnterGameServer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqEnterGameServer)
  return false;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_, output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqEnterGameServer.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqEnterGameServer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqEnterGameServer)
}

::google::protobuf::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *id_, deterministic, target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqEnterGameServer.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqEnterGameServer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqEnterGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::AFMsg::Ident::MergeFrom(from.id());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHeartBeat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHeartBeat();
  return *internal_default_instance();
}


void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHeartBeat)
  return false;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHeartBeat)
}

::google::protobuf::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHeartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveGameServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  _cached_size_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveGameServer();
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqLeaveGameServer)
}

::google::protobuf::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqLeaveGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::AFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::AFMsg::Point3D*>(
      ::AFMsg::Point3D::internal_default_instance());
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
}
void PlayerEntryInfo::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kPosFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_id().size() > 0) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_id().size() > 0) {
    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    object_guid_ = new ::AFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::AFMsg::Point3D(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&career_type_, &from.career_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&career_type_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
  _cached_size_ = 0;
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
  if (this != internal_default_instance()) delete pos_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  return *internal_default_instance();
}


void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&career_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&career_type_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.PlayerEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident object_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Point3D pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 career_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_id().data(), static_cast<int>(this->config_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.PlayerEntryInfo.config_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_id().data(), static_cast<int>(this->class_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.PlayerEntryInfo.class_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.PlayerEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.PlayerEntryInfo)
  return false;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *object_guid_, output);
  }

  // .AFMsg.Point3D pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *pos_, output);
  }

  // int32 career_type = 3;
  if (this->career_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->career_type(), output);
  }

  // int32 player_state = 4;
  if (this->player_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_state(), output);
  }

  // string config_id = 5;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_id().data(), static_cast<int>(this->config_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.PlayerEntryInfo.config_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->config_id(), output);
  }

  // int32 scene_id = 6;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scene_id(), output);
  }

  // string class_id = 7;
  if (this->class_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_id().data(), static_cast<int>(this->class_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.PlayerEntryInfo.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->class_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.PlayerEntryInfo)
}

::google::protobuf::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *object_guid_, deterministic, target);
  }

  // .AFMsg.Point3D pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *pos_, deterministic, target);
  }

  // int32 career_type = 3;
  if (this->career_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->career_type(), target);
  }

  // int32 player_state = 4;
  if (this->player_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_state(), target);
  }

  // string config_id = 5;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_id().data(), static_cast<int>(this->config_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.PlayerEntryInfo.config_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config_id(), target);
  }

  // int32 scene_id = 6;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scene_id(), target);
  }

  // string class_id = 7;
  if (this->class_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_id().data(), static_cast<int>(this->class_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.PlayerEntryInfo.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->class_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string config_id = 5;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_id());
  }

  // string class_id = 7;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_id());
  }

  // .AFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // .AFMsg.Point3D pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 career_type = 3;
  if (this->career_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());
  }

  // int32 player_state = 4;
  if (this->player_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());
  }

  // int32 scene_id = 6;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.PlayerEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.class_id().size() > 0) {

    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    mutable_object_guid()->::AFMsg::Ident::MergeFrom(from.object_guid());
  }
  if (from.has_pos()) {
    mutable_pos()->::AFMsg::Point3D::MergeFrom(from.pos());
  }
  if (from.career_type() != 0) {
    set_career_type(from.career_type());
  }
  if (from.player_state() != 0) {
    set_player_state(from.player_state());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  config_id_.Swap(&other->config_id_);
  class_id_.Swap(&other->class_id_);
  swap(object_guid_, other->object_guid_);
  swap(pos_, other->pos_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerEntryList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
  _cached_size_ = 0;
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerEntryList();
  return *internal_default_instance();
}


void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPlayerEntryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPlayerEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPlayerEntryList)
  return false;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPlayerEntryList)
}

::google::protobuf::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPlayerEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerLeaveList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
  _cached_size_ = 0;
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPlayerLeaveList();
  return *internal_default_instance();
}


void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPlayerLeaveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.Ident object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPlayerLeaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPlayerLeaveList)
  return false;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPlayerLeaveList)
}

::google::protobuf::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerLeaveList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPlayerLeaveList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSynData::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckSynData_default_instance_._instance.get_mutable()->syser_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckSynData::clear_syser() {
  if (GetArenaNoVirtual() == NULL && syser_ != NULL) {
    delete syser_;
  }
  syser_ = NULL;
}
void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSynData::kSyserFieldNumber;
const int ReqAckSynData::kObjectListFieldNumber;
const int ReqAckSynData::kDataFieldNumber;
const int ReqAckSynData::kSynTypeFieldNumber;
const int ReqAckSynData::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSynData::ReqAckSynData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSynData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSynData)
}
ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    syser_ = new ::AFMsg::Ident(*from.syser_);
  } else {
    syser_ = NULL;
  }
  ::memcpy(&syn_type_, &from.syn_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSynData)
}

void ReqAckSynData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&syser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syser_)) + sizeof(msg_id_));
  _cached_size_ = 0;
}

ReqAckSynData::~ReqAckSynData() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSynData)
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syser_;
}

void ReqAckSynData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSynData::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSynData& ReqAckSynData::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSynData();
  return *internal_default_instance();
}


void ReqAckSynData::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && syser_ != NULL) {
    delete syser_;
  }
  syser_ = NULL;
  ::memset(&syn_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

bool ReqAckSynData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSynData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident syser = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_syser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident object_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckSynData.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_syn_type(static_cast< ::AFMsg::ReqAckSynData_SynType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.EGameMsgID msg_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_id(static_cast< ::AFMsg::EGameMsgID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSynData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSynData)
  return false;
#undef DO_
}

void ReqAckSynData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident syser = 1;
  if (this->has_syser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *syser_, output);
  }

  // repeated .AFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->object_list(static_cast<int>(i)),
      output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckSynData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // .AFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->syn_type(), output);
  }

  // .AFMsg.EGameMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSynData)
}

::google::protobuf::uint8* ReqAckSynData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident syser = 1;
  if (this->has_syser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *syser_, deterministic, target);
  }

  // repeated .AFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckSynData.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // .AFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->syn_type(), target);
  }

  // .AFMsg.EGameMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSynData)
  return target;
}

size_t ReqAckSynData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSynData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident object_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .AFMsg.Ident syser = 1;
  if (this->has_syser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syser_);
  }

  // .AFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());
  }

  // .AFMsg.EGameMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSynData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSynData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSynData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSynData)
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    mutable_syser()->::AFMsg::Ident::MergeFrom(from.syser());
  }
  if (from.syn_type() != 0) {
    set_syn_type(from.syn_type());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void ReqAckSynData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  return true;
}

void ReqAckSynData::Swap(ReqAckSynData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSynData::InternalSwap(ReqAckSynData* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  data_.Swap(&other->data_);
  swap(syser_, other->syser_);
  swap(syn_type_, other->syn_type_);
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSynData::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerMove::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckPlayerMove_default_instance_._instance.get_mutable()->mover_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerMove::clear_mover() {
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
}
void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerMove();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckPlayerMove)
}
ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      target_pos_(from.target_pos_),
      source_pos_(from.source_pos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mover()) {
    mover_ = new ::AFMsg::Ident(*from.mover_);
  } else {
    mover_ = NULL;
  }
  movetype_ = from.movetype_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::SharedCtor() {
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movetype_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(movetype_));
  _cached_size_ = 0;
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckPlayerMove)
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerMove();
  return *internal_default_instance();
}


void ReqAckPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  source_pos_.Clear();
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
  movetype_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckPlayerMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident mover = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 moveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Position target_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_target_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Position source_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_source_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckPlayerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckPlayerMove)
  return false;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident mover = 1;
  if (this->has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *mover_, output);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // repeated .AFMsg.Position target_pos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->target_pos(static_cast<int>(i)),
      output);
  }

  // repeated .AFMsg.Position source_pos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->source_pos(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckPlayerMove)
}

::google::protobuf::uint8* ReqAckPlayerMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *mover_, deterministic, target);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // repeated .AFMsg.Position target_pos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->target_pos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AFMsg.Position source_pos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->source_pos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckPlayerMove)
  return target;
}

size_t ReqAckPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckPlayerMove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Position target_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->target_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->target_pos(static_cast<int>(i)));
    }
  }

  // repeated .AFMsg.Position source_pos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->source_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->source_pos(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckPlayerMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckPlayerMove)
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  if (from.has_mover()) {
    mutable_mover()->::AFMsg::Ident::MergeFrom(from.mover());
  }
  if (from.movetype() != 0) {
    set_movetype(from.movetype());
  }
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerMove::InternalSwap(ReqAckPlayerMove* other) {
  using std::swap;
  CastToBase(&target_pos_)->InternalSwap(CastToBase(&other->target_pos_));
  CastToBase(&source_pos_)->InternalSwap(CastToBase(&other->source_pos_));
  swap(mover_, other->mover_);
  swap(movetype_, other->movetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatContainer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatContainer::kConTainerTypeFieldNumber;
const int ChatContainer::kDataInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatContainer::ChatContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsChatContainer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ChatContainer)
}
ChatContainer::ChatContainer(const ChatContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_info().size() > 0) {
    data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
  }
  containertype_ = from.containertype_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ChatContainer)
}

void ChatContainer::SharedCtor() {
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  containertype_ = 0;
  _cached_size_ = 0;
}

ChatContainer::~ChatContainer() {
  // @@protoc_insertion_point(destructor:AFMsg.ChatContainer)
  SharedDtor();
}

void ChatContainer::SharedDtor() {
  data_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatContainer::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatContainer& ChatContainer::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsChatContainer();
  return *internal_default_instance();
}


void ChatContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  containertype_ = 0;
  _internal_metadata_.Clear();
}

bool ChatContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ChatContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ConTainerType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_info().data(), static_cast<int>(this->data_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ChatContainer.data_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ChatContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ChatContainer)
  return false;
#undef DO_
}

void ChatContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containertype(), output);
  }

  // string data_info = 3;
  if (this->data_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_info().data(), static_cast<int>(this->data_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatContainer.data_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ChatContainer)
}

::google::protobuf::uint8* ChatContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containertype(), target);
  }

  // string data_info = 3;
  if (this->data_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_info().data(), static_cast<int>(this->data_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatContainer.data_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ChatContainer)
  return target;
}

size_t ChatContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ChatContainer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data_info = 3;
  if (this->data_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_info());
  }

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ChatContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ChatContainer)
    MergeFrom(*source);
  }
}

void ChatContainer::MergeFrom(const ChatContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_info().size() > 0) {

    data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
  }
  if (from.containertype() != 0) {
    set_containertype(from.containertype());
  }
}

void ChatContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatContainer::CopyFrom(const ChatContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatContainer::IsInitialized() const {
  return true;
}

void ChatContainer::Swap(ChatContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatContainer::InternalSwap(ChatContainer* other) {
  using std::swap;
  data_info_.Swap(&other->data_info_);
  swap(containertype_, other->containertype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatContainer::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->chat_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerChat::clear_chat_id() {
  if (GetArenaNoVirtual() == NULL && chat_id_ != NULL) {
    delete chat_id_;
  }
  chat_id_ = NULL;
}
void ReqAckPlayerChat::clear_target_id() {
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
const int ReqAckPlayerChat::kChatNameFieldNumber;
const int ReqAckPlayerChat::kTargetIdFieldNumber;
const int ReqAckPlayerChat::kContainerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerChat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      container_data_(from.container_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_info().size() > 0) {
    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_name().size() > 0) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  if (from.has_chat_id()) {
    chat_id_ = new ::AFMsg::Ident(*from.chat_id_);
  } else {
    chat_id_ = NULL;
  }
  if (from.has_target_id()) {
    target_id_ = new ::AFMsg::Ident(*from.target_id_);
  } else {
    target_id_ = NULL;
  }
  chat_type_ = from.chat_type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_type_));
  _cached_size_ = 0;
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckPlayerChat();
  return *internal_default_instance();
}


void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_data_.Clear();
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chat_id_ != NULL) {
    delete chat_id_;
  }
  chat_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
  chat_type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckPlayerChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chat_type(static_cast< ::AFMsg::ReqAckPlayerChat_EGameChatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_info().data(), static_cast<int>(this->chat_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckPlayerChat.chat_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_name().data(), static_cast<int>(this->chat_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckPlayerChat.chat_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident target_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.ChatContainer Container_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_container_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckPlayerChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckPlayerChat)
  return false;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *chat_id_, output);
  }

  // .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // string chat_info = 3;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_info().data(), static_cast<int>(this->chat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckPlayerChat.chat_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chat_info(), output);
  }

  // string chat_name = 4;
  if (this->chat_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckPlayerChat.chat_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chat_name(), output);
  }

  // .AFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *target_id_, output);
  }

  // repeated .AFMsg.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->container_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckPlayerChat)
}

::google::protobuf::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *chat_id_, deterministic, target);
  }

  // .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // string chat_info = 3;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_info().data(), static_cast<int>(this->chat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckPlayerChat.chat_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_info(), target);
  }

  // string chat_name = 4;
  if (this->chat_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_name().data(), static_cast<int>(this->chat_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckPlayerChat.chat_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chat_name(), target);
  }

  // .AFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *target_id_, deterministic, target);
  }

  // repeated .AFMsg.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->container_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ChatContainer Container_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->container_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->container_data(static_cast<int>(i)));
    }
  }

  // string chat_info = 3;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_info());
  }

  // string chat_name = 4;
  if (this->chat_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_name());
  }

  // .AFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_id_);
  }

  // .AFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckPlayerChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_data_.MergeFrom(from.container_data_);
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.chat_name().size() > 0) {

    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  if (from.has_chat_id()) {
    mutable_chat_id()->::AFMsg::Ident::MergeFrom(from.chat_id());
  }
  if (from.has_target_id()) {
    mutable_target_id()->::AFMsg::Ident::MergeFrom(from.target_id());
  }
  if (from.chat_type() != 0) {
    set_chat_type(from.chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  CastToBase(&container_data_)->InternalSwap(CastToBase(&other->container_data_));
  chat_info_.Swap(&other->chat_info_);
  chat_name_.Swap(&other->chat_name_);
  swap(chat_id_, other->chat_id_);
  swap(target_id_, other->target_id_);
  swap(chat_type_, other->chat_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::AFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void EffectData::clear_effect_ident() {
  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsEffectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effect_ident()) {
    effect_ident_ = new ::AFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = NULL;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
  _cached_size_ = 0;
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:AFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffectData& EffectData::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsEffectData();
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
  ::memset(&effect_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  _internal_metadata_.Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.EffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident effect_ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_effect_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 effect_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect_rlt(static_cast< ::AFMsg::EffectData_EResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *effect_ident_, output);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // .AFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *effect_ident_, deterministic, target);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // .AFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.EffectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *effect_ident_);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());
  }

  // .AFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effect_ident()) {
    mutable_effect_ident()->::AFMsg::Ident::MergeFrom(from.effect_ident());
  }
  if (from.effect_value() != 0) {
    set_effect_value(from.effect_value());
  }
  if (from.effect_rlt() != 0) {
    set_effect_rlt(from.effect_rlt());
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->now_pos_ = const_cast< ::AFMsg::Position*>(
      ::AFMsg::Position::internal_default_instance());
  ::AFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->tar_pos_ = const_cast< ::AFMsg::Position*>(
      ::AFMsg::Position::internal_default_instance());
}
void ReqAckUseSkill::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
void ReqAckUseSkill::clear_now_pos() {
  if (GetArenaNoVirtual() == NULL && now_pos_ != NULL) {
    delete now_pos_;
  }
  now_pos_ = NULL;
}
void ReqAckUseSkill::clear_tar_pos() {
  if (GetArenaNoVirtual() == NULL && tar_pos_ != NULL) {
    delete tar_pos_;
  }
  tar_pos_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kNowPosFieldNumber;
const int ReqAckUseSkill::kTarPosFieldNumber;
const int ReqAckUseSkill::kUseIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseSkill();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      effect_data_(from.effect_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skill_id().size() > 0) {
    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    user_ = new ::AFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_now_pos()) {
    now_pos_ = new ::AFMsg::Position(*from.now_pos_);
  } else {
    now_pos_ = NULL;
  }
  if (from.has_tar_pos()) {
    tar_pos_ = new ::AFMsg::Position(*from.tar_pos_);
  } else {
    tar_pos_ = NULL;
  }
  use_index_ = from.use_index_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(use_index_));
  _cached_size_ = 0;
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete now_pos_;
  if (this != internal_default_instance()) delete tar_pos_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseSkill();
  return *internal_default_instance();
}


void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && now_pos_ != NULL) {
    delete now_pos_;
  }
  now_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && tar_pos_ != NULL) {
    delete tar_pos_;
  }
  tar_pos_ = NULL;
  use_index_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skill_id().data(), static_cast<int>(this->skill_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckUseSkill.skill_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Position now_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Position tar_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 use_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.EffectData effect_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckUseSkill)
  return false;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *user_, output);
  }

  // string skill_id = 2;
  if (this->skill_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skill_id().data(), static_cast<int>(this->skill_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckUseSkill.skill_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->skill_id(), output);
  }

  // .AFMsg.Position now_pos = 3;
  if (this->has_now_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *now_pos_, output);
  }

  // .AFMsg.Position tar_pos = 4;
  if (this->has_tar_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *tar_pos_, output);
  }

  // int32 use_index = 5;
  if (this->use_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_index(), output);
  }

  // repeated .AFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckUseSkill)
}

::google::protobuf::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *user_, deterministic, target);
  }

  // string skill_id = 2;
  if (this->skill_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skill_id().data(), static_cast<int>(this->skill_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckUseSkill.skill_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->skill_id(), target);
  }

  // .AFMsg.Position now_pos = 3;
  if (this->has_now_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *now_pos_, deterministic, target);
  }

  // .AFMsg.Position tar_pos = 4;
  if (this->has_tar_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *tar_pos_, deterministic, target);
  }

  // int32 use_index = 5;
  if (this->use_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_index(), target);
  }

  // repeated .AFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.EffectData effect_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  // string skill_id = 2;
  if (this->skill_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skill_id());
  }

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .AFMsg.Position now_pos = 3;
  if (this->has_now_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *now_pos_);
  }

  // .AFMsg.Position tar_pos = 4;
  if (this->has_tar_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tar_pos_);
  }

  // int32 use_index = 5;
  if (this->use_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.skill_id().size() > 0) {

    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    mutable_user()->::AFMsg::Ident::MergeFrom(from.user());
  }
  if (from.has_now_pos()) {
    mutable_now_pos()->::AFMsg::Position::MergeFrom(from.now_pos());
  }
  if (from.has_tar_pos()) {
    mutable_tar_pos()->::AFMsg::Position::MergeFrom(from.tar_pos());
  }
  if (from.use_index() != 0) {
    set_use_index(from.use_index());
  }
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  skill_id_.Swap(&other->skill_id_);
  swap(user_, other->user_);
  swap(now_pos_, other->now_pos_);
  swap(tar_pos_, other->tar_pos_);
  swap(use_index_, other->use_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseItem::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->user_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::AFMsg::ItemStruct*>(
      ::AFMsg::ItemStruct::internal_default_instance());
  ::AFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckUseItem::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
void ReqAckUseItem::clear_item_guid() {
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
}
void ReqAckUseItem::clear_targetid() {
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectDataFieldNumber;
const int ReqAckUseItem::kItemFieldNumber;
const int ReqAckUseItem::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckUseItem)
}
ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      effect_data_(from.effect_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::AFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_item_guid()) {
    item_guid_ = new ::AFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  if (from.has_item()) {
    item_ = new ::AFMsg::ItemStruct(*from.item_);
  } else {
    item_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::AFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckUseItem)
}

void ReqAckUseItem::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&user_)) + sizeof(targetid_));
  _cached_size_ = 0;
}

ReqAckUseItem::~ReqAckUseItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckUseItem)
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete item_guid_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete targetid_;
}

void ReqAckUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckUseItem();
  return *internal_default_instance();
}


void ReqAckUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckUseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.EffectData effect_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ItemStruct item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident targetid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckUseItem)
  return false;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *user_, output);
  }

  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *item_guid_, output);
  }

  // repeated .AFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  // .AFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *item_, output);
  }

  // .AFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *targetid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckUseItem)
}

::google::protobuf::uint8* ReqAckUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *user_, deterministic, target);
  }

  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *item_guid_, deterministic, target);
  }

  // repeated .AFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  // .AFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *item_, deterministic, target);
  }

  // .AFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *targetid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckUseItem)
  return target;
}

size_t ReqAckUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckUseItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.EffectData effect_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  // .AFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .AFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckUseItem)
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.has_user()) {
    mutable_user()->::AFMsg::Ident::MergeFrom(from.user());
  }
  if (from.has_item_guid()) {
    mutable_item_guid()->::AFMsg::Ident::MergeFrom(from.item_guid());
  }
  if (from.has_item()) {
    mutable_item()->::AFMsg::ItemStruct::MergeFrom(from.item());
  }
  if (from.has_targetid()) {
    mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
  }
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseItem::InternalSwap(ReqAckUseItem* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  swap(user_, other->user_);
  swap(item_guid_, other->item_guid_);
  swap(item_, other->item_);
  swap(targetid_, other->targetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSwapScene();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _cached_size_ = 0;
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSwapScene();
  return *internal_default_instance();
}


void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSwapScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transfer_type(static_cast< ::AFMsg::ReqAckSwapScene_EGameSwapType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSwapScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSwapScene)
  return false;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // float x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // float y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // float z = 6;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSwapScene)
}

::google::protobuf::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // float x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // float y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // float z = 6;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  // float x = 4;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 6;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSwapScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSwapScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transfer_type() != 0) {
    set_transfer_type(from.transfer_type());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ItemStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemStruct::kItemIdFieldNumber;
const int ItemStruct::kItemCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemStruct::ItemStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ItemStruct)
}
ItemStruct::ItemStruct(const ItemStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item_id().size() > 0) {
    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ItemStruct)
}

void ItemStruct::SharedCtor() {
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  _cached_size_ = 0;
}

ItemStruct::~ItemStruct() {
  // @@protoc_insertion_point(destructor:AFMsg.ItemStruct)
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ItemStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemStruct::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemStruct& ItemStruct::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsItemStruct();
  return *internal_default_instance();
}


void ItemStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  _internal_metadata_.Clear();
}

bool ItemStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ItemStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_id().data(), static_cast<int>(this->item_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ItemStruct.item_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 item_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ItemStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ItemStruct)
  return false;
#undef DO_
}

void ItemStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (this->item_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ItemStruct.item_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_id(), output);
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ItemStruct)
}

::google::protobuf::uint8* ItemStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (this->item_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ItemStruct.item_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item_id(), target);
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ItemStruct)
  return target;
}

size_t ItemStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ItemStruct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string item_id = 1;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ItemStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ItemStruct)
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  if (from.item_count() != 0) {
    set_item_count(from.item_count());
  }
}

void ItemStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  return true;
}

void ItemStruct::Swap(ItemStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemStruct::InternalSwap(ItemStruct* other) {
  using std::swap;
  item_id_.Swap(&other->item_id_);
  swap(item_count_, other->item_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemStruct::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrencyStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyStruct::kCurrencyTypeFieldNumber;
const int CurrencyStruct::kCurrencyCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyStruct::CurrencyStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsCurrencyStruct();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.CurrencyStruct)
}
CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currency_type_, &from.currency_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_count_) -
    reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.CurrencyStruct)
}

void CurrencyStruct::SharedCtor() {
  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  _cached_size_ = 0;
}

CurrencyStruct::~CurrencyStruct() {
  // @@protoc_insertion_point(destructor:AFMsg.CurrencyStruct)
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
}

void CurrencyStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyStruct::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrencyStruct& CurrencyStruct::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsCurrencyStruct();
  return *internal_default_instance();
}


void CurrencyStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  _internal_metadata_.Clear();
}

bool CurrencyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.CurrencyStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 currency_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.CurrencyStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.CurrencyStruct)
  return false;
#undef DO_
}

void CurrencyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency_type(), output);
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.CurrencyStruct)
}

::google::protobuf::uint8* CurrencyStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency_type(), target);
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.CurrencyStruct)
  return target;
}

size_t CurrencyStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.CurrencyStruct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.CurrencyStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.CurrencyStruct)
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.currency_count() != 0) {
    set_currency_count(from.currency_count());
  }
}

void CurrencyStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  return true;
}

void CurrencyStruct::Swap(CurrencyStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyStruct::InternalSwap(CurrencyStruct* other) {
  using std::swap;
  swap(currency_type_, other->currency_type_);
  swap(currency_count_, other->currency_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyStruct::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckEndBattle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckEndBattle::kMoneyFieldNumber;
const int ReqAckEndBattle::kExpFieldNumber;
const int ReqAckEndBattle::kDiamondFieldNumber;
const int ReqAckEndBattle::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckEndBattle::ReqAckEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckEndBattle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckEndBattle)
}
ReqAckEndBattle::ReqAckEndBattle(const ReqAckEndBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&diamond_) -
    reinterpret_cast<char*>(&money_)) + sizeof(diamond_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckEndBattle)
}

void ReqAckEndBattle::SharedCtor() {
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&money_)) + sizeof(diamond_));
  _cached_size_ = 0;
}

ReqAckEndBattle::~ReqAckEndBattle() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckEndBattle)
  SharedDtor();
}

void ReqAckEndBattle::SharedDtor() {
}

void ReqAckEndBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckEndBattle::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckEndBattle& ReqAckEndBattle::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckEndBattle();
  return *internal_default_instance();
}


void ReqAckEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&money_)) + sizeof(diamond_));
  _internal_metadata_.Clear();
}

bool ReqAckEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckEndBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 money = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diamond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckEndBattle)
  return false;
#undef DO_
}

void ReqAckEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 money = 1;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // int32 diamond = 3;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diamond(), output);
  }

  // repeated .AFMsg.ItemStruct item_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->item_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckEndBattle)
}

::google::protobuf::uint8* ReqAckEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 money = 1;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // int32 diamond = 3;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diamond(), target);
  }

  // repeated .AFMsg.ItemStruct item_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckEndBattle)
  return target;
}

size_t ReqAckEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckEndBattle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ItemStruct item_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // int32 money = 1;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  // int32 diamond = 3;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEndBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckEndBattle)
    MergeFrom(*source);
  }
}

void ReqAckEndBattle::MergeFrom(const ReqAckEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
}

void ReqAckEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEndBattle::CopyFrom(const ReqAckEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEndBattle::IsInitialized() const {
  return true;
}

void ReqAckEndBattle::Swap(ReqAckEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckEndBattle::InternalSwap(ReqAckEndBattle* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  swap(money_, other->money_);
  swap(exp_, other->exp_);
  swap(diamond_, other->diamond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckEndBattle::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPickDropItem::InitAsDefaultInstance() {
  ::AFMsg::_ReqPickDropItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqPickDropItem::clear_item_guid() {
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPickDropItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqPickDropItem)
}
ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_guid()) {
    item_guid_ = new ::AFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqPickDropItem)
}

void ReqPickDropItem::SharedCtor() {
  item_guid_ = NULL;
  _cached_size_ = 0;
}

ReqPickDropItem::~ReqPickDropItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqPickDropItem)
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_guid_;
}

void ReqPickDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPickDropItem();
  return *internal_default_instance();
}


void ReqPickDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqPickDropItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqPickDropItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqPickDropItem)
  return false;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *item_guid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqPickDropItem)
}

::google::protobuf::uint8* ReqPickDropItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *item_guid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqPickDropItem)
  return target;
}

size_t ReqPickDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqPickDropItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPickDropItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPickDropItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqPickDropItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqPickDropItem)
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_guid()) {
    mutable_item_guid()->::AFMsg::Ident::MergeFrom(from.item_guid());
  }
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPickDropItem::InternalSwap(ReqPickDropItem* other) {
  using std::swap;
  swap(item_guid_, other->item_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAcceptTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAcceptTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAcceptTask)
}
ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAcceptTask)
}

void ReqAcceptTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqAcceptTask::~ReqAcceptTask() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAcceptTask)
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAcceptTask();
  return *internal_default_instance();
}


void ReqAcceptTask::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAcceptTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAcceptTask.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAcceptTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAcceptTask)
  return false;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAcceptTask.task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAcceptTask)
}

::google::protobuf::uint8* ReqAcceptTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAcceptTask.task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAcceptTask)
  return target;
}

size_t ReqAcceptTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAcceptTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAcceptTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAcceptTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAcceptTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAcceptTask)
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAcceptTask::InternalSwap(ReqAcceptTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCompeleteTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCompeleteTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCompeleteTask)
}
ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqCompeleteTask::~ReqCompeleteTask() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCompeleteTask)
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCompeleteTask();
  return *internal_default_instance();
}


void ReqCompeleteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCompeleteTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqCompeleteTask.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCompeleteTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCompeleteTask)
  return false;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCompeleteTask.task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCompeleteTask)
}

::google::protobuf::uint8* ReqCompeleteTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqCompeleteTask.task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCompeleteTask)
  return target;
}

size_t ReqCompeleteTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCompeleteTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCompeleteTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCompeleteTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCompeleteTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCompeleteTask)
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCompeleteTask::InternalSwap(ReqCompeleteTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinActivity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinActivity::kActivityTypeFieldNumber;
const int ReqAckJoinActivity::kSubActivityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinActivity::ReqAckJoinActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinActivity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinActivity)
}
ReqAckJoinActivity::ReqAckJoinActivity(const ReqAckJoinActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_type_, &from.activity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_activity_type_) -
    reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinActivity)
}

void ReqAckJoinActivity::SharedCtor() {
  ::memset(&activity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_activity_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
  _cached_size_ = 0;
}

ReqAckJoinActivity::~ReqAckJoinActivity() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinActivity)
  SharedDtor();
}

void ReqAckJoinActivity::SharedDtor() {
}

void ReqAckJoinActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinActivity::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinActivity& ReqAckJoinActivity::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinActivity();
  return *internal_default_instance();
}


void ReqAckJoinActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&activity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_activity_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
  _internal_metadata_.Clear();
}

bool ReqAckJoinActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_activity_type(static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sub_activity_type(static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinActivity)
  return false;
#undef DO_
}

void ReqAckJoinActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity_type(), output);
  }

  // .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (this->sub_activity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub_activity_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinActivity)
}

::google::protobuf::uint8* ReqAckJoinActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity_type(), target);
  }

  // .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (this->sub_activity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub_activity_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinActivity)
  return target;
}

size_t ReqAckJoinActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinActivity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (this->activity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());
  }

  // .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (this->sub_activity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinActivity)
    MergeFrom(*source);
  }
}

void ReqAckJoinActivity::MergeFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_type() != 0) {
    set_activity_type(from.activity_type());
  }
  if (from.sub_activity_type() != 0) {
    set_sub_activity_type(from.sub_activity_type());
  }
}

void ReqAckJoinActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinActivity::CopyFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinActivity::IsInitialized() const {
  return true;
}

void ReqAckJoinActivity::Swap(ReqAckJoinActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinActivity::InternalSwap(ReqAckJoinActivity* other) {
  using std::swap;
  swap(activity_type_, other->activity_type_);
  swap(sub_activity_type_, other->sub_activity_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinActivity::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSearchOppnent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSearchOppnent::kSearchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSearchOppnent::ReqAckSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSearchOppnent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSearchOppnent)
}
ReqAckSearchOppnent::ReqAckSearchOppnent(const ReqAckSearchOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_type_ = from.search_type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSearchOppnent)
}

void ReqAckSearchOppnent::SharedCtor() {
  search_type_ = 0;
  _cached_size_ = 0;
}

ReqAckSearchOppnent::~ReqAckSearchOppnent() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSearchOppnent)
  SharedDtor();
}

void ReqAckSearchOppnent::SharedDtor() {
}

void ReqAckSearchOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSearchOppnent::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSearchOppnent& ReqAckSearchOppnent::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckSearchOppnent();
  return *internal_default_instance();
}


void ReqAckSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSearchOppnent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.EBattleType search_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_search_type(static_cast< ::AFMsg::EBattleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSearchOppnent)
  return false;
#undef DO_
}

void ReqAckSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EBattleType search_type = 1;
  if (this->search_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->search_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSearchOppnent)
}

::google::protobuf::uint8* ReqAckSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EBattleType search_type = 1;
  if (this->search_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->search_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSearchOppnent)
  return target;
}

size_t ReqAckSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSearchOppnent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.EBattleType search_type = 1;
  if (this->search_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSearchOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSearchOppnent)
    MergeFrom(*source);
  }
}

void ReqAckSearchOppnent::MergeFrom(const ReqAckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_type() != 0) {
    set_search_type(from.search_type());
  }
}

void ReqAckSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSearchOppnent::CopyFrom(const ReqAckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSearchOppnent::IsInitialized() const {
  return true;
}

void ReqAckSearchOppnent::Swap(ReqAckSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSearchOppnent::InternalSwap(ReqAckSearchOppnent* other) {
  using std::swap;
  swap(search_type_, other->search_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSearchOppnent::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckBattleOppnent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckBattleOppnent::kBattleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckBattleOppnent::ReqAckBattleOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckBattleOppnent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckBattleOppnent)
}
ReqAckBattleOppnent::ReqAckBattleOppnent(const ReqAckBattleOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_type_ = from.battle_type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckBattleOppnent)
}

void ReqAckBattleOppnent::SharedCtor() {
  battle_type_ = 0;
  _cached_size_ = 0;
}

ReqAckBattleOppnent::~ReqAckBattleOppnent() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckBattleOppnent)
  SharedDtor();
}

void ReqAckBattleOppnent::SharedDtor() {
}

void ReqAckBattleOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckBattleOppnent::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckBattleOppnent& ReqAckBattleOppnent::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckBattleOppnent();
  return *internal_default_instance();
}


void ReqAckBattleOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckBattleOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckBattleOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckBattleOppnent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.EBattleType battle_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_battle_type(static_cast< ::AFMsg::EBattleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckBattleOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckBattleOppnent)
  return false;
#undef DO_
}

void ReqAckBattleOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckBattleOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EBattleType battle_type = 1;
  if (this->battle_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battle_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckBattleOppnent)
}

::google::protobuf::uint8* ReqAckBattleOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckBattleOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.EBattleType battle_type = 1;
  if (this->battle_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battle_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckBattleOppnent)
  return target;
}

size_t ReqAckBattleOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckBattleOppnent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.EBattleType battle_type = 1;
  if (this->battle_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckBattleOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckBattleOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckBattleOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckBattleOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckBattleOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckBattleOppnent)
    MergeFrom(*source);
  }
}

void ReqAckBattleOppnent::MergeFrom(const ReqAckBattleOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckBattleOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.battle_type() != 0) {
    set_battle_type(from.battle_type());
  }
}

void ReqAckBattleOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckBattleOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckBattleOppnent::CopyFrom(const ReqAckBattleOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckBattleOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckBattleOppnent::IsInitialized() const {
  return true;
}

void ReqAckBattleOppnent::Swap(ReqAckBattleOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckBattleOppnent::InternalSwap(ReqAckBattleOppnent* other) {
  using std::swap;
  swap(battle_type_, other->battle_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckBattleOppnent::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateGuild::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckCreateGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckCreateGuild::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateGuild::kGuildIdFieldNumber;
const int ReqAckCreateGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateGuild::ReqAckCreateGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateGuild)
}
ReqAckCreateGuild::ReqAckCreateGuild(const ReqAckCreateGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_name().size() > 0) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateGuild)
}

void ReqAckCreateGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
  _cached_size_ = 0;
}

ReqAckCreateGuild::~ReqAckCreateGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateGuild)
  SharedDtor();
}

void ReqAckCreateGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateGuild& ReqAckCreateGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateGuild();
  return *internal_default_instance();
}


void ReqAckCreateGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckCreateGuild.guild_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateGuild)
  return false;
#undef DO_
}

void ReqAckCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckCreateGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateGuild)
}

::google::protobuf::uint8* ReqAckCreateGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckCreateGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateGuild)
  return target;
}

size_t ReqAckCreateGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateGuild)
    MergeFrom(*source);
  }
}

void ReqAckCreateGuild::MergeFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqAckCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateGuild::CopyFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateGuild::IsInitialized() const {
  return true;
}

void ReqAckCreateGuild::Swap(ReqAckCreateGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateGuild::InternalSwap(ReqAckCreateGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_);
  swap(guild_id_, other->guild_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSearchGuild::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSearchGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchGuild::ReqSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSearchGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSearchGuild)
}
ReqSearchGuild::ReqSearchGuild(const ReqSearchGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_name().size() > 0) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSearchGuild)
}

void ReqSearchGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqSearchGuild::~ReqSearchGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSearchGuild)
  SharedDtor();
}

void ReqSearchGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSearchGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSearchGuild& ReqSearchGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSearchGuild();
  return *internal_default_instance();
}


void ReqSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSearchGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string guild_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqSearchGuild.guild_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSearchGuild)
  return false;
#undef DO_
}

void ReqSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string guild_name = 1;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqSearchGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guild_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSearchGuild)
}

::google::protobuf::uint8* ReqSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string guild_name = 1;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqSearchGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSearchGuild)
  return target;
}

size_t ReqSearchGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSearchGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guild_name = 1;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSearchGuild)
    MergeFrom(*source);
  }
}

void ReqSearchGuild::MergeFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
}

void ReqSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchGuild::CopyFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchGuild::IsInitialized() const {
  return true;
}

void ReqSearchGuild::Swap(ReqSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchGuild::InternalSwap(ReqSearchGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSearchGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchGuild_SearchGuildObject::InitAsDefaultInstance() {
  ::AFMsg::_AckSearchGuild_SearchGuildObject_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckSearchGuild_SearchGuildObject::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild_SearchGuildObject::kGuildIDFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildNameFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildIconFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberMaxCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildHonorFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild_SearchGuildObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSearchGuild.SearchGuildObject)
}
AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_name().size() > 0) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_icon().size() > 0) {
    guild_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_icon_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  ::memcpy(&guild_member_count_, &from.guild_member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_rank_) -
    reinterpret_cast<char*>(&guild_member_count_)) + sizeof(guild_rank_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSearchGuild.SearchGuildObject)
}

void AckSearchGuild_SearchGuildObject::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_rank_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_rank_));
  _cached_size_ = 0;
}

AckSearchGuild_SearchGuildObject::~AckSearchGuild_SearchGuildObject() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSearchGuild.SearchGuildObject)
  SharedDtor();
}

void AckSearchGuild_SearchGuildObject::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void AckSearchGuild_SearchGuildObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchGuild_SearchGuildObject& AckSearchGuild_SearchGuildObject::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild_SearchGuildObject();
  return *internal_default_instance();
}


void AckSearchGuild_SearchGuildObject::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  ::memset(&guild_member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_rank_) -
      reinterpret_cast<char*>(&guild_member_count_)) + sizeof(guild_rank_));
  _internal_metadata_.Clear();
}

bool AckSearchGuild_SearchGuildObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSearchGuild.SearchGuildObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.AckSearchGuild.SearchGuildObject.guild_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild_icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guild_member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guild_member_max_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guild_honor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_honor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guild_rank = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSearchGuild.SearchGuildObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSearchGuild.SearchGuildObject)
  return false;
#undef DO_
}

void AckSearchGuild_SearchGuildObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_ID = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  // string guild_icon = 3;
  if (this->guild_icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_icon(), output);
  }

  // int32 guild_member_count = 4;
  if (this->guild_member_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_member_count(), output);
  }

  // int32 guild_member_max_count = 5;
  if (this->guild_member_max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_member_max_count(), output);
  }

  // int32 guild_honor = 6;
  if (this->guild_honor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_honor(), output);
  }

  // int32 guild_rank = 7;
  if (this->guild_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSearchGuild.SearchGuildObject)
}

::google::protobuf::uint8* AckSearchGuild_SearchGuildObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_ID = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // string guild_icon = 3;
  if (this->guild_icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_icon(), target);
  }

  // int32 guild_member_count = 4;
  if (this->guild_member_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_member_count(), target);
  }

  // int32 guild_member_max_count = 5;
  if (this->guild_member_max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_member_max_count(), target);
  }

  // int32 guild_honor = 6;
  if (this->guild_honor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guild_honor(), target);
  }

  // int32 guild_rank = 7;
  if (this->guild_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSearchGuild.SearchGuildObject)
  return target;
}

size_t AckSearchGuild_SearchGuildObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSearchGuild.SearchGuildObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  // string guild_icon = 3;
  if (this->guild_icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_icon());
  }

  // .AFMsg.Ident guild_ID = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  // int32 guild_member_count = 4;
  if (this->guild_member_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_count());
  }

  // int32 guild_member_max_count = 5;
  if (this->guild_member_max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_max_count());
  }

  // int32 guild_honor = 6;
  if (this->guild_honor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_honor());
  }

  // int32 guild_rank = 7;
  if (this->guild_rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchGuild_SearchGuildObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild_SearchGuildObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSearchGuild.SearchGuildObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSearchGuild.SearchGuildObject)
    MergeFrom(*source);
  }
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.guild_icon().size() > 0) {

    guild_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_icon_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
  if (from.guild_member_count() != 0) {
    set_guild_member_count(from.guild_member_count());
  }
  if (from.guild_member_max_count() != 0) {
    set_guild_member_max_count(from.guild_member_max_count());
  }
  if (from.guild_honor() != 0) {
    set_guild_honor(from.guild_honor());
  }
  if (from.guild_rank() != 0) {
    set_guild_rank(from.guild_rank());
  }
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild_SearchGuildObject::IsInitialized() const {
  return true;
}

void AckSearchGuild_SearchGuildObject::Swap(AckSearchGuild_SearchGuildObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild_SearchGuildObject::InternalSwap(AckSearchGuild_SearchGuildObject* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_);
  guild_icon_.Swap(&other->guild_icon_);
  swap(guild_id_, other->guild_id_);
  swap(guild_member_count_, other->guild_member_count_);
  swap(guild_member_max_count_, other->guild_member_max_count_);
  swap(guild_honor_, other->guild_honor_);
  swap(guild_rank_, other->guild_rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSearchGuild_SearchGuildObject::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchGuild::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild::kGuildListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild::AckSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSearchGuild)
}
AckSearchGuild::AckSearchGuild(const AckSearchGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      guild_list_(from.guild_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSearchGuild)
}

void AckSearchGuild::SharedCtor() {
  _cached_size_ = 0;
}

AckSearchGuild::~AckSearchGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSearchGuild)
  SharedDtor();
}

void AckSearchGuild::SharedDtor() {
}

void AckSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchGuild& AckSearchGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSearchGuild();
  return *internal_default_instance();
}


void AckSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSearchGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_guild_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSearchGuild)
  return false;
#undef DO_
}

void AckSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->guild_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->guild_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSearchGuild)
}

::google::protobuf::uint8* AckSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->guild_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->guild_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSearchGuild)
  return target;
}

size_t AckSearchGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSearchGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->guild_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->guild_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSearchGuild)
    MergeFrom(*source);
  }
}

void AckSearchGuild::MergeFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guild_list_.MergeFrom(from.guild_list_);
}

void AckSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild::CopyFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild::IsInitialized() const {
  return true;
}

void AckSearchGuild::Swap(AckSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild::InternalSwap(AckSearchGuild* other) {
  using std::swap;
  CastToBase(&guild_list_)->InternalSwap(CastToBase(&other->guild_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSearchGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinGuild::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckJoinGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckJoinGuild::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinGuild::kGuildIdFieldNumber;
const int ReqAckJoinGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinGuild::ReqAckJoinGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinGuild)
}
ReqAckJoinGuild::ReqAckJoinGuild(const ReqAckJoinGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_name().size() > 0) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinGuild)
}

void ReqAckJoinGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
  _cached_size_ = 0;
}

ReqAckJoinGuild::~ReqAckJoinGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinGuild)
  SharedDtor();
}

void ReqAckJoinGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinGuild& ReqAckJoinGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinGuild();
  return *internal_default_instance();
}


void ReqAckJoinGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckJoinGuild.guild_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinGuild)
  return false;
#undef DO_
}

void ReqAckJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckJoinGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinGuild)
}

::google::protobuf::uint8* ReqAckJoinGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckJoinGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinGuild)
  return target;
}

size_t ReqAckJoinGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinGuild)
    MergeFrom(*source);
  }
}

void ReqAckJoinGuild::MergeFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqAckJoinGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinGuild::CopyFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinGuild::IsInitialized() const {
  return true;
}

void ReqAckJoinGuild::Swap(ReqAckJoinGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinGuild::InternalSwap(ReqAckJoinGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_);
  swap(guild_id_, other->guild_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveGuild::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckLeaveGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckLeaveGuild::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveGuild::kGuildIdFieldNumber;
const int ReqAckLeaveGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveGuild::ReqAckLeaveGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckLeaveGuild)
}
ReqAckLeaveGuild::ReqAckLeaveGuild(const ReqAckLeaveGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild_name().size() > 0) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckLeaveGuild)
}

void ReqAckLeaveGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
  _cached_size_ = 0;
}

ReqAckLeaveGuild::~ReqAckLeaveGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckLeaveGuild)
  SharedDtor();
}

void ReqAckLeaveGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveGuild& ReqAckLeaveGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveGuild();
  return *internal_default_instance();
}


void ReqAckLeaveGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckLeaveGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckLeaveGuild.guild_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckLeaveGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckLeaveGuild)
  return false;
#undef DO_
}

void ReqAckLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckLeaveGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckLeaveGuild)
}

::google::protobuf::uint8* ReqAckLeaveGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckLeaveGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckLeaveGuild)
  return target;
}

size_t ReqAckLeaveGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckLeaveGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guild_name = 2;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckLeaveGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckLeaveGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckLeaveGuild)
    MergeFrom(*source);
  }
}

void ReqAckLeaveGuild::MergeFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckLeaveGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqAckLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveGuild::CopyFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveGuild::IsInitialized() const {
  return true;
}

void ReqAckLeaveGuild::Swap(ReqAckLeaveGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveGuild::InternalSwap(ReqAckLeaveGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_);
  swap(guild_id_, other->guild_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckLeaveGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprGuildMember::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckOprGuildMember_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckOprGuildMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckOprGuildMember::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
void ReqAckOprGuildMember::clear_member_id() {
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprGuildMember::kGuildIdFieldNumber;
const int ReqAckOprGuildMember::kMemberIdFieldNumber;
const int ReqAckOprGuildMember::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprGuildMember::ReqAckOprGuildMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuildMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprGuildMember)
}
ReqAckOprGuildMember::ReqAckOprGuildMember(const ReqAckOprGuildMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::AFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprGuildMember)
}

void ReqAckOprGuildMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(type_));
  _cached_size_ = 0;
}

ReqAckOprGuildMember::~ReqAckOprGuildMember() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprGuildMember)
  SharedDtor();
}

void ReqAckOprGuildMember::SharedDtor() {
  if (this != internal_default_instance()) delete guild_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void ReqAckOprGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuildMember::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprGuildMember& ReqAckOprGuildMember::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuildMember();
  return *internal_default_instance();
}


void ReqAckOprGuildMember::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckOprGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprGuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprGuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprGuildMember)
  return false;
#undef DO_
}

void ReqAckOprGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *member_id_, output);
  }

  // .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprGuildMember)
}

::google::protobuf::uint8* ReqAckOprGuildMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *member_id_, deterministic, target);
  }

  // .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprGuildMember)
  return target;
}

size_t ReqAckOprGuildMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprGuildMember)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  // .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprGuildMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprGuildMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprGuildMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprGuildMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprGuildMember)
    MergeFrom(*source);
  }
}

void ReqAckOprGuildMember::MergeFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprGuildMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
  if (from.has_member_id()) {
    mutable_member_id()->::AFMsg::Ident::MergeFrom(from.member_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqAckOprGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuildMember::CopyFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuildMember::IsInitialized() const {
  return true;
}

void ReqAckOprGuildMember::Swap(ReqAckOprGuildMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprGuildMember::InternalSwap(ReqAckOprGuildMember* other) {
  using std::swap;
  swap(guild_id_, other->guild_id_);
  swap(member_id_, other->member_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprGuildMember::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprGuild::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckOprGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckOprGuild_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckOprGuild::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
void ReqAckOprGuild::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprGuild::kGuildIdFieldNumber;
const int ReqAckOprGuild::kPlayerIdFieldNumber;
const int ReqAckOprGuild::kTypeFieldNumber;
const int ReqAckOprGuild::kRecruitDataFieldNumber;
const int ReqAckOprGuild::kAdDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprGuild::ReqAckOprGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuild();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprGuild)
}
ReqAckOprGuild::ReqAckOprGuild(const ReqAckOprGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recruit_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recruit_data().size() > 0) {
    recruit_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recruit_data_);
  }
  ad_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ad_data().size() > 0) {
    ad_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ad_data_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  if (from.has_player_id()) {
    player_id_ = new ::AFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprGuild)
}

void ReqAckOprGuild::SharedCtor() {
  recruit_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(type_));
  _cached_size_ = 0;
}

ReqAckOprGuild::~ReqAckOprGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprGuild)
  SharedDtor();
}

void ReqAckOprGuild::SharedDtor() {
  recruit_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckOprGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuild::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprGuild& ReqAckOprGuild::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprGuild();
  return *internal_default_instance();
}


void ReqAckOprGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recruit_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckOprGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AFMsg::ReqAckOprGuild_EGGuildOprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Recruit_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruit_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recruit_data().data(), static_cast<int>(this->recruit_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckOprGuild.Recruit_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Ad_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ad_data().data(), static_cast<int>(this->ad_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckOprGuild.Ad_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprGuild)
  return false;
#undef DO_
}

void ReqAckOprGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // .AFMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *player_id_, output);
  }

  // .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string Recruit_data = 4;
  if (this->recruit_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recruit_data().data(), static_cast<int>(this->recruit_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Recruit_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recruit_data(), output);
  }

  // string Ad_data = 5;
  if (this->ad_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ad_data().data(), static_cast<int>(this->ad_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Ad_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ad_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprGuild)
}

::google::protobuf::uint8* ReqAckOprGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // .AFMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *player_id_, deterministic, target);
  }

  // .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string Recruit_data = 4;
  if (this->recruit_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recruit_data().data(), static_cast<int>(this->recruit_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Recruit_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recruit_data(), target);
  }

  // string Ad_data = 5;
  if (this->ad_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ad_data().data(), static_cast<int>(this->ad_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Ad_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ad_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprGuild)
  return target;
}

size_t ReqAckOprGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprGuild)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Recruit_data = 4;
  if (this->recruit_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recruit_data());
  }

  // string Ad_data = 5;
  if (this->ad_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ad_data());
  }

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  // .AFMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprGuild)
    MergeFrom(*source);
  }
}

void ReqAckOprGuild::MergeFrom(const ReqAckOprGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recruit_data().size() > 0) {

    recruit_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recruit_data_);
  }
  if (from.ad_data().size() > 0) {

    ad_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ad_data_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
  if (from.has_player_id()) {
    mutable_player_id()->::AFMsg::Ident::MergeFrom(from.player_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqAckOprGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuild::CopyFrom(const ReqAckOprGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuild::IsInitialized() const {
  return true;
}

void ReqAckOprGuild::Swap(ReqAckOprGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprGuild::InternalSwap(ReqAckOprGuild* other) {
  using std::swap;
  recruit_data_.Swap(&other->recruit_data_);
  ad_data_.Swap(&other->ad_data_);
  swap(guild_id_, other->guild_id_);
  swap(player_id_, other->player_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprGuild::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckDonateGuildItem::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckDonateGuildItem_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckDonateGuildItem_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckDonateGuildItem::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
void ReqAckDonateGuildItem::clear_target_id() {
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckDonateGuildItem::kGuildIdFieldNumber;
const int ReqAckDonateGuildItem::kTargetIdFieldNumber;
const int ReqAckDonateGuildItem::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckDonateGuildItem::ReqAckDonateGuildItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckDonateGuildItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckDonateGuildItem)
}
ReqAckDonateGuildItem::ReqAckDonateGuildItem(const ReqAckDonateGuildItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  if (from.has_target_id()) {
    target_id_ = new ::AFMsg::Ident(*from.target_id_);
  } else {
    target_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckDonateGuildItem)
}

void ReqAckDonateGuildItem::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(target_id_));
  _cached_size_ = 0;
}

ReqAckDonateGuildItem::~ReqAckDonateGuildItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckDonateGuildItem)
  SharedDtor();
}

void ReqAckDonateGuildItem::SharedDtor() {
  if (this != internal_default_instance()) delete guild_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAckDonateGuildItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckDonateGuildItem::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckDonateGuildItem& ReqAckDonateGuildItem::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckDonateGuildItem();
  return *internal_default_instance();
}


void ReqAckDonateGuildItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckDonateGuildItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckDonateGuildItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckDonateGuildItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident target_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckDonateGuildItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckDonateGuildItem)
  return false;
#undef DO_
}

void ReqAckDonateGuildItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckDonateGuildItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // .AFMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *target_id_, output);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->item_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckDonateGuildItem)
}

::google::protobuf::uint8* ReqAckDonateGuildItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckDonateGuildItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // .AFMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *target_id_, deterministic, target);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckDonateGuildItem)
  return target;
}

size_t ReqAckDonateGuildItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckDonateGuildItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ItemStruct item_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  // .AFMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckDonateGuildItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckDonateGuildItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckDonateGuildItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckDonateGuildItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckDonateGuildItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckDonateGuildItem)
    MergeFrom(*source);
  }
}

void ReqAckDonateGuildItem::MergeFrom(const ReqAckDonateGuildItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckDonateGuildItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
  if (from.has_target_id()) {
    mutable_target_id()->::AFMsg::Ident::MergeFrom(from.target_id());
  }
}

void ReqAckDonateGuildItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckDonateGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckDonateGuildItem::CopyFrom(const ReqAckDonateGuildItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckDonateGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckDonateGuildItem::IsInitialized() const {
  return true;
}

void ReqAckDonateGuildItem::Swap(ReqAckDonateGuildItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckDonateGuildItem::InternalSwap(ReqAckDonateGuildItem* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  swap(guild_id_, other->guild_id_);
  swap(target_id_, other->target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckDonateGuildItem::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqGuildEctypeInfo::InitAsDefaultInstance() {
  ::AFMsg::_ReqGuildEctypeInfo_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqGuildEctypeInfo_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqGuildEctypeInfo::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqGuildEctypeInfo::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGuildEctypeInfo::kSelfidFieldNumber;
const int ReqGuildEctypeInfo::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGuildEctypeInfo::ReqGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGuildEctypeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqGuildEctypeInfo)
}
ReqGuildEctypeInfo::ReqGuildEctypeInfo(const ReqGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqGuildEctypeInfo)
}

void ReqGuildEctypeInfo::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(guild_id_));
  _cached_size_ = 0;
}

ReqGuildEctypeInfo::~ReqGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqGuildEctypeInfo)
  SharedDtor();
}

void ReqGuildEctypeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGuildEctypeInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqGuildEctypeInfo& ReqGuildEctypeInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGuildEctypeInfo();
  return *internal_default_instance();
}


void ReqGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqGuildEctypeInfo)
  return false;
#undef DO_
}

void ReqGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *guild_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqGuildEctypeInfo)
}

::google::protobuf::uint8* ReqGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *guild_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqGuildEctypeInfo)
  return target;
}

size_t ReqGuildEctypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqGuildEctypeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGuildEctypeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void ReqGuildEctypeInfo::MergeFrom(const ReqGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGuildEctypeInfo::CopyFrom(const ReqGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGuildEctypeInfo::IsInitialized() const {
  return true;
}

void ReqGuildEctypeInfo::Swap(ReqGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGuildEctypeInfo::InternalSwap(ReqGuildEctypeInfo* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(guild_id_, other->guild_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGuildEctypeInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildEctypeInfo::InitAsDefaultInstance() {
  ::AFMsg::_GuildEctypeInfo_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void GuildEctypeInfo::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildEctypeInfo::kGuildIdFieldNumber;
const int GuildEctypeInfo::kServerIdFieldNumber;
const int GuildEctypeInfo::kEctypeIdFieldNumber;
const int GuildEctypeInfo::kEctypeGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildEctypeInfo::GuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsGuildEctypeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.GuildEctypeInfo)
}
GuildEctypeInfo::GuildEctypeInfo(const GuildEctypeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ectype_group_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(ectype_group_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.GuildEctypeInfo)
}

void GuildEctypeInfo::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ectype_group_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(ectype_group_));
  _cached_size_ = 0;
}

GuildEctypeInfo::~GuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.GuildEctypeInfo)
  SharedDtor();
}

void GuildEctypeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete guild_id_;
}

void GuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEctypeInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildEctypeInfo& GuildEctypeInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsGuildEctypeInfo();
  return *internal_default_instance();
}


void GuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.GuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ectype_group_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(ectype_group_));
  _internal_metadata_.Clear();
}

bool GuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.GuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Ectype_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Ectype_Group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.GuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.GuildEctypeInfo)
  return false;
#undef DO_
}

void GuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.GuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *guild_id_, output);
  }

  // int64 server_id = 2;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->server_id(), output);
  }

  // int64 Ectype_id = 3;
  if (this->ectype_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ectype_id(), output);
  }

  // int64 Ectype_Group = 4;
  if (this->ectype_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ectype_group(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.GuildEctypeInfo)
}

::google::protobuf::uint8* GuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.GuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *guild_id_, deterministic, target);
  }

  // int64 server_id = 2;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->server_id(), target);
  }

  // int64 Ectype_id = 3;
  if (this->ectype_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ectype_id(), target);
  }

  // int64 Ectype_Group = 4;
  if (this->ectype_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ectype_group(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.GuildEctypeInfo)
  return target;
}

size_t GuildEctypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.GuildEctypeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident guild_id = 1;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  // int64 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_id());
  }

  // int64 Ectype_id = 3;
  if (this->ectype_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_id());
  }

  // int64 Ectype_Group = 4;
  if (this->ectype_group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.GuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildEctypeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.GuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.GuildEctypeInfo)
    MergeFrom(*source);
  }
}

void GuildEctypeInfo::MergeFrom(const GuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.GuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.ectype_id() != 0) {
    set_ectype_id(from.ectype_id());
  }
  if (from.ectype_group() != 0) {
    set_ectype_group(from.ectype_group());
  }
}

void GuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.GuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEctypeInfo::CopyFrom(const GuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.GuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEctypeInfo::IsInitialized() const {
  return true;
}

void GuildEctypeInfo::Swap(GuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuildEctypeInfo::InternalSwap(GuildEctypeInfo* other) {
  using std::swap;
  swap(guild_id_, other->guild_id_);
  swap(server_id_, other->server_id_);
  swap(ectype_id_, other->ectype_id_);
  swap(ectype_group_, other->ectype_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GuildEctypeInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckGuildEctypeInfo::InitAsDefaultInstance() {
  ::AFMsg::_AckGuildEctypeInfo_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckGuildEctypeInfo_default_instance_._instance.get_mutable()->xectypeinfo_ = const_cast< ::AFMsg::GuildEctypeInfo*>(
      ::AFMsg::GuildEctypeInfo::internal_default_instance());
}
void AckGuildEctypeInfo::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckGuildEctypeInfo::kSelfidFieldNumber;
const int AckGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckGuildEctypeInfo::AckGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGuildEctypeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckGuildEctypeInfo)
}
AckGuildEctypeInfo::AckGuildEctypeInfo(const AckGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_xectypeinfo()) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo(*from.xectypeinfo_);
  } else {
    xectypeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckGuildEctypeInfo)
}

void AckGuildEctypeInfo::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xectypeinfo_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(xectypeinfo_));
  _cached_size_ = 0;
}

AckGuildEctypeInfo::~AckGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckGuildEctypeInfo)
  SharedDtor();
}

void AckGuildEctypeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete xectypeinfo_;
}

void AckGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGuildEctypeInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckGuildEctypeInfo& AckGuildEctypeInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGuildEctypeInfo();
  return *internal_default_instance();
}


void AckGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && xectypeinfo_ != NULL) {
    delete xectypeinfo_;
  }
  xectypeinfo_ = NULL;
  _internal_metadata_.Clear();
}

bool AckGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckGuildEctypeInfo)
  return false;
#undef DO_
}

void AckGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xectypeinfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckGuildEctypeInfo)
}

::google::protobuf::uint8* AckGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xectypeinfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckGuildEctypeInfo)
  return target;
}

size_t AckGuildEctypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckGuildEctypeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xectypeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGuildEctypeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void AckGuildEctypeInfo::MergeFrom(const AckGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_xectypeinfo()) {
    mutable_xectypeinfo()->::AFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
  }
}

void AckGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGuildEctypeInfo::CopyFrom(const AckGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGuildEctypeInfo::IsInitialized() const {
  return true;
}

void AckGuildEctypeInfo::Swap(AckGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckGuildEctypeInfo::InternalSwap(AckGuildEctypeInfo* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(xectypeinfo_, other->xectypeinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckGuildEctypeInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetGuildEctypeInfo::InitAsDefaultInstance() {
  ::AFMsg::_SetGuildEctypeInfo_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_SetGuildEctypeInfo_default_instance_._instance.get_mutable()->xectypeinfo_ = const_cast< ::AFMsg::GuildEctypeInfo*>(
      ::AFMsg::GuildEctypeInfo::internal_default_instance());
}
void SetGuildEctypeInfo::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetGuildEctypeInfo::kSelfidFieldNumber;
const int SetGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetGuildEctypeInfo::SetGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsSetGuildEctypeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.SetGuildEctypeInfo)
}
SetGuildEctypeInfo::SetGuildEctypeInfo(const SetGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_xectypeinfo()) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo(*from.xectypeinfo_);
  } else {
    xectypeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.SetGuildEctypeInfo)
}

void SetGuildEctypeInfo::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xectypeinfo_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(xectypeinfo_));
  _cached_size_ = 0;
}

SetGuildEctypeInfo::~SetGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.SetGuildEctypeInfo)
  SharedDtor();
}

void SetGuildEctypeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete xectypeinfo_;
}

void SetGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildEctypeInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetGuildEctypeInfo& SetGuildEctypeInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsSetGuildEctypeInfo();
  return *internal_default_instance();
}


void SetGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.SetGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && xectypeinfo_ != NULL) {
    delete xectypeinfo_;
  }
  xectypeinfo_ = NULL;
  _internal_metadata_.Clear();
}

bool SetGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.SetGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.SetGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.SetGuildEctypeInfo)
  return false;
#undef DO_
}

void SetGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.SetGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xectypeinfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.SetGuildEctypeInfo)
}

::google::protobuf::uint8* SetGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.SetGuildEctypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xectypeinfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.SetGuildEctypeInfo)
  return target;
}

size_t SetGuildEctypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.SetGuildEctypeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (this->has_xectypeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xectypeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.SetGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SetGuildEctypeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.SetGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.SetGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void SetGuildEctypeInfo::MergeFrom(const SetGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.SetGuildEctypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_xectypeinfo()) {
    mutable_xectypeinfo()->::AFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
  }
}

void SetGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.SetGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildEctypeInfo::CopyFrom(const SetGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.SetGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildEctypeInfo::IsInitialized() const {
  return true;
}

void SetGuildEctypeInfo::Swap(SetGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetGuildEctypeInfo::InternalSwap(SetGuildEctypeInfo* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(xectypeinfo_, other->xectypeinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetGuildEctypeInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqEnterGuildEctype::InitAsDefaultInstance() {
  ::AFMsg::_ReqEnterGuildEctype_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqEnterGuildEctype::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGuildEctype::kSelfidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGuildEctype::ReqEnterGuildEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGuildEctype();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqEnterGuildEctype)
}
ReqEnterGuildEctype::ReqEnterGuildEctype(const ReqEnterGuildEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqEnterGuildEctype)
}

void ReqEnterGuildEctype::SharedCtor() {
  selfid_ = NULL;
  _cached_size_ = 0;
}

ReqEnterGuildEctype::~ReqEnterGuildEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqEnterGuildEctype)
  SharedDtor();
}

void ReqEnterGuildEctype::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqEnterGuildEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGuildEctype::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGuildEctype& ReqEnterGuildEctype::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqEnterGuildEctype();
  return *internal_default_instance();
}


void ReqEnterGuildEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqEnterGuildEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqEnterGuildEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqEnterGuildEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqEnterGuildEctype)
  return false;
#undef DO_
}

void ReqEnterGuildEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqEnterGuildEctype)
}

::google::protobuf::uint8* ReqEnterGuildEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqEnterGuildEctype)
  return target;
}

size_t ReqEnterGuildEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqEnterGuildEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGuildEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqEnterGuildEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGuildEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGuildEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqEnterGuildEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqEnterGuildEctype)
    MergeFrom(*source);
  }
}

void ReqEnterGuildEctype::MergeFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqEnterGuildEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
}

void ReqEnterGuildEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGuildEctype::CopyFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGuildEctype::IsInitialized() const {
  return true;
}

void ReqEnterGuildEctype::Swap(ReqEnterGuildEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGuildEctype::InternalSwap(ReqEnterGuildEctype* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGuildEctype::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatInfo::InitAsDefaultInstance() {
  ::AFMsg::_ChatInfo_default_instance_._instance.get_mutable()->send_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ChatInfo::clear_send_id() {
  if (GetArenaNoVirtual() == NULL && send_id_ != NULL) {
    delete send_id_;
  }
  send_id_ = NULL;
}
void ChatInfo::clear_recvier_id() {
  recvier_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatInfo::kChatTypeFieldNumber;
const int ChatInfo::kChatInfoFieldNumber;
const int ChatInfo::kChatTimeFieldNumber;
const int ChatInfo::kAddtionalInfoFieldNumber;
const int ChatInfo::kSendIdFieldNumber;
const int ChatInfo::kSendNameFieldNumber;
const int ChatInfo::kSendLevelFieldNumber;
const int ChatInfo::kRecvierIdFieldNumber;
const int ChatInfo::kGuidNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatInfo::ChatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsChatInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ChatInfo)
}
ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      recvier_id_(from.recvier_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_info().size() > 0) {
    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  addtional_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addtional_info().size() > 0) {
    addtional_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addtional_info_);
  }
  send_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_name().size() > 0) {
    send_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_name_);
  }
  guid_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guid_name().size() > 0) {
    guid_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_name_);
  }
  if (from.has_send_id()) {
    send_id_ = new ::AFMsg::Ident(*from.send_id_);
  } else {
    send_id_ = NULL;
  }
  ::memcpy(&chat_time_, &from.chat_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_level_) -
    reinterpret_cast<char*>(&chat_time_)) + sizeof(send_level_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ChatInfo)
}

void ChatInfo::SharedCtor() {
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addtional_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_level_) -
      reinterpret_cast<char*>(&send_id_)) + sizeof(send_level_));
  _cached_size_ = 0;
}

ChatInfo::~ChatInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ChatInfo)
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addtional_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete send_id_;
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatInfo& ChatInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsChatInfo();
  return *internal_default_instance();
}


void ChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ChatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvier_id_.Clear();
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addtional_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && send_id_ != NULL) {
    delete send_id_;
  }
  send_id_ = NULL;
  ::memset(&chat_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_level_) -
      reinterpret_cast<char*>(&chat_time_)) + sizeof(send_level_));
  _internal_metadata_.Clear();
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ChatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.ChatInfo.EChatType chat_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chat_type(static_cast< ::AFMsg::ChatInfo_EChatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chat_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_info().data(), static_cast<int>(this->chat_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ChatInfo.chat_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chat_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addtional_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addtional_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addtional_info().data(), static_cast<int>(this->addtional_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ChatInfo.addtional_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident send_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string send_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_name().data(), static_cast<int>(this->send_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ChatInfo.send_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 send_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident recvier_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_recvier_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guid_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guid_name().data(), static_cast<int>(this->guid_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ChatInfo.guid_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ChatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ChatInfo)
  return false;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ChatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ChatInfo.EChatType chat_type = 1;
  if (this->chat_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }

  // string chat_info = 2;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_info().data(), static_cast<int>(this->chat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.chat_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_info(), output);
  }

  // int64 chat_time = 3;
  if (this->chat_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chat_time(), output);
  }

  // string addtional_info = 4;
  if (this->addtional_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addtional_info().data(), static_cast<int>(this->addtional_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.addtional_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addtional_info(), output);
  }

  // .AFMsg.Ident send_id = 5;
  if (this->has_send_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *send_id_, output);
  }

  // string send_name = 6;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), static_cast<int>(this->send_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.send_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->send_name(), output);
  }

  // int32 send_level = 7;
  if (this->send_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->send_level(), output);
  }

  // repeated .AFMsg.Ident recvier_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recvier_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->recvier_id(static_cast<int>(i)),
      output);
  }

  // string guid_name = 9;
  if (this->guid_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid_name().data(), static_cast<int>(this->guid_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.guid_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guid_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ChatInfo)
}

::google::protobuf::uint8* ChatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ChatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.ChatInfo.EChatType chat_type = 1;
  if (this->chat_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }

  // string chat_info = 2;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_info().data(), static_cast<int>(this->chat_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.chat_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_info(), target);
  }

  // int64 chat_time = 3;
  if (this->chat_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chat_time(), target);
  }

  // string addtional_info = 4;
  if (this->addtional_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addtional_info().data(), static_cast<int>(this->addtional_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.addtional_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addtional_info(), target);
  }

  // .AFMsg.Ident send_id = 5;
  if (this->has_send_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *send_id_, deterministic, target);
  }

  // string send_name = 6;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), static_cast<int>(this->send_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.send_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->send_name(), target);
  }

  // int32 send_level = 7;
  if (this->send_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->send_level(), target);
  }

  // repeated .AFMsg.Ident recvier_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recvier_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->recvier_id(static_cast<int>(i)), deterministic, target);
  }

  // string guid_name = 9;
  if (this->guid_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid_name().data(), static_cast<int>(this->guid_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ChatInfo.guid_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guid_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ChatInfo)
  return target;
}

size_t ChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ChatInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident recvier_id = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->recvier_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->recvier_id(static_cast<int>(i)));
    }
  }

  // string chat_info = 2;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_info());
  }

  // string addtional_info = 4;
  if (this->addtional_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addtional_info());
  }

  // string send_name = 6;
  if (this->send_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_name());
  }

  // string guid_name = 9;
  if (this->guid_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guid_name());
  }

  // .AFMsg.Ident send_id = 5;
  if (this->has_send_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *send_id_);
  }

  // int64 chat_time = 3;
  if (this->chat_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chat_time());
  }

  // .AFMsg.ChatInfo.EChatType chat_type = 1;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  // int32 send_level = 7;
  if (this->send_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->send_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ChatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ChatInfo)
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recvier_id_.MergeFrom(from.recvier_id_);
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.addtional_info().size() > 0) {

    addtional_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addtional_info_);
  }
  if (from.send_name().size() > 0) {

    send_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_name_);
  }
  if (from.guid_name().size() > 0) {

    guid_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_name_);
  }
  if (from.has_send_id()) {
    mutable_send_id()->::AFMsg::Ident::MergeFrom(from.send_id());
  }
  if (from.chat_time() != 0) {
    set_chat_time(from.chat_time());
  }
  if (from.chat_type() != 0) {
    set_chat_type(from.chat_type());
  }
  if (from.send_level() != 0) {
    set_send_level(from.send_level());
  }
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {
  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatInfo::InternalSwap(ChatInfo* other) {
  using std::swap;
  CastToBase(&recvier_id_)->InternalSwap(CastToBase(&other->recvier_id_));
  chat_info_.Swap(&other->chat_info_);
  addtional_info_.Swap(&other->addtional_info_);
  send_name_.Swap(&other->send_name_);
  guid_name_.Swap(&other->guid_name_);
  swap(send_id_, other->send_id_);
  swap(chat_time_, other->chat_time_);
  swap(chat_type_, other->chat_type_);
  swap(send_level_, other->send_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateChatGroup::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckCreateChatGroup_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckCreateChatGroup_default_instance_._instance.get_mutable()->xchatgroupid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckCreateChatGroup::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqAckCreateChatGroup::clear_xchatgroupid() {
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateChatGroup::kNameFieldNumber;
const int ReqAckCreateChatGroup::kSelfidFieldNumber;
const int ReqAckCreateChatGroup::kXChatGroupidFieldNumber;
const int ReqAckCreateChatGroup::kChatTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateChatGroup::ReqAckCreateChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateChatGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateChatGroup)
}
ReqAckCreateChatGroup::ReqAckCreateChatGroup(const ReqAckCreateChatGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_xchatgroupid()) {
    xchatgroupid_ = new ::AFMsg::Ident(*from.xchatgroupid_);
  } else {
    xchatgroupid_ = NULL;
  }
  chattype_ = from.chattype_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateChatGroup)
}

void ReqAckCreateChatGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chattype_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(chattype_));
  _cached_size_ = 0;
}

ReqAckCreateChatGroup::~ReqAckCreateChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateChatGroup)
  SharedDtor();
}

void ReqAckCreateChatGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete xchatgroupid_;
}

void ReqAckCreateChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateChatGroup::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateChatGroup& ReqAckCreateChatGroup::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateChatGroup();
  return *internal_default_instance();
}


void ReqAckCreateChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
  chattype_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckCreateChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqAckCreateChatGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident selfid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident xChatGroupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chatType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateChatGroup)
  return false;
#undef DO_
}

void ReqAckCreateChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckCreateChatGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .AFMsg.Ident selfid = 2;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *selfid_, output);
  }

  // .AFMsg.Ident xChatGroupid = 3;
  if (this->has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *xchatgroupid_, output);
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateChatGroup)
}

::google::protobuf::uint8* ReqAckCreateChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqAckCreateChatGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .AFMsg.Ident selfid = 2;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident xChatGroupid = 3;
  if (this->has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *xchatgroupid_, deterministic, target);
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateChatGroup)
  return target;
}

size_t ReqAckCreateChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateChatGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .AFMsg.Ident selfid = 2;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident xChatGroupid = 3;
  if (this->has_xchatgroupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xchatgroupid_);
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chattype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateChatGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckCreateChatGroup::MergeFrom(const ReqAckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_xchatgroupid()) {
    mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
  }
  if (from.chattype() != 0) {
    set_chattype(from.chattype());
  }
}

void ReqAckCreateChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateChatGroup::CopyFrom(const ReqAckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateChatGroup::IsInitialized() const {
  return true;
}

void ReqAckCreateChatGroup::Swap(ReqAckCreateChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateChatGroup::InternalSwap(ReqAckCreateChatGroup* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(selfid_, other->selfid_);
  swap(xchatgroupid_, other->xchatgroupid_);
  swap(chattype_, other->chattype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateChatGroup::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckjoinChatGroup::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckjoinChatGroup_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckjoinChatGroup_default_instance_._instance.get_mutable()->xchatgroupid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckjoinChatGroup::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqAckjoinChatGroup::clear_xchatgroupid() {
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckjoinChatGroup::kSelfidFieldNumber;
const int ReqAckjoinChatGroup::kXChatGroupidFieldNumber;
const int ReqAckjoinChatGroup::kResultFieldNumber;
const int ReqAckjoinChatGroup::kChatTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckjoinChatGroup::ReqAckjoinChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckjoinChatGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckjoinChatGroup)
}
ReqAckjoinChatGroup::ReqAckjoinChatGroup(const ReqAckjoinChatGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_xchatgroupid()) {
    xchatgroupid_ = new ::AFMsg::Ident(*from.xchatgroupid_);
  } else {
    xchatgroupid_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&chattype_) -
    reinterpret_cast<char*>(&result_)) + sizeof(chattype_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckjoinChatGroup)
}

void ReqAckjoinChatGroup::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chattype_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(chattype_));
  _cached_size_ = 0;
}

ReqAckjoinChatGroup::~ReqAckjoinChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckjoinChatGroup)
  SharedDtor();
}

void ReqAckjoinChatGroup::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete xchatgroupid_;
}

void ReqAckjoinChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckjoinChatGroup::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckjoinChatGroup& ReqAckjoinChatGroup::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckjoinChatGroup();
  return *internal_default_instance();
}


void ReqAckjoinChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckjoinChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chattype_) -
      reinterpret_cast<char*>(&result_)) + sizeof(chattype_));
  _internal_metadata_.Clear();
}

bool ReqAckjoinChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckjoinChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chatType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckjoinChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckjoinChatGroup)
  return false;
#undef DO_
}

void ReqAckjoinChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckjoinChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xchatgroupid_, output);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckjoinChatGroup)
}

::google::protobuf::uint8* ReqAckjoinChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckjoinChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xchatgroupid_, deterministic, target);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckjoinChatGroup)
  return target;
}

size_t ReqAckjoinChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckjoinChatGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xchatgroupid_);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result());
  }

  // int32 chatType = 4;
  if (this->chattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chattype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckjoinChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckjoinChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckjoinChatGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckjoinChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckjoinChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckjoinChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckjoinChatGroup::MergeFrom(const ReqAckjoinChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckjoinChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_xchatgroupid()) {
    mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.chattype() != 0) {
    set_chattype(from.chattype());
  }
}

void ReqAckjoinChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckjoinChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckjoinChatGroup::CopyFrom(const ReqAckjoinChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckjoinChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckjoinChatGroup::IsInitialized() const {
  return true;
}

void ReqAckjoinChatGroup::Swap(ReqAckjoinChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckjoinChatGroup::InternalSwap(ReqAckjoinChatGroup* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(xchatgroupid_, other->xchatgroupid_);
  swap(result_, other->result_);
  swap(chattype_, other->chattype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckjoinChatGroup::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckQuitChatGroup::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckQuitChatGroup_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckQuitChatGroup_default_instance_._instance.get_mutable()->xchatgroupid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckQuitChatGroup::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqAckQuitChatGroup::clear_xchatgroupid() {
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckQuitChatGroup::kSelfidFieldNumber;
const int ReqAckQuitChatGroup::kXChatGroupidFieldNumber;
const int ReqAckQuitChatGroup::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckQuitChatGroup::ReqAckQuitChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckQuitChatGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckQuitChatGroup)
}
ReqAckQuitChatGroup::ReqAckQuitChatGroup(const ReqAckQuitChatGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_xchatgroupid()) {
    xchatgroupid_ = new ::AFMsg::Ident(*from.xchatgroupid_);
  } else {
    xchatgroupid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckQuitChatGroup)
}

void ReqAckQuitChatGroup::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(result_));
  _cached_size_ = 0;
}

ReqAckQuitChatGroup::~ReqAckQuitChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckQuitChatGroup)
  SharedDtor();
}

void ReqAckQuitChatGroup::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete xchatgroupid_;
}

void ReqAckQuitChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckQuitChatGroup::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckQuitChatGroup& ReqAckQuitChatGroup::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckQuitChatGroup();
  return *internal_default_instance();
}


void ReqAckQuitChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckQuitChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && xchatgroupid_ != NULL) {
    delete xchatgroupid_;
  }
  xchatgroupid_ = NULL;
  result_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReqAckQuitChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckQuitChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckQuitChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckQuitChatGroup)
  return false;
#undef DO_
}

void ReqAckQuitChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckQuitChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xchatgroupid_, output);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckQuitChatGroup)
}

::google::protobuf::uint8* ReqAckQuitChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckQuitChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xchatgroupid_, deterministic, target);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckQuitChatGroup)
  return target;
}

size_t ReqAckQuitChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckQuitChatGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident xChatGroupid = 2;
  if (this->has_xchatgroupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xchatgroupid_);
  }

  // int64 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckQuitChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckQuitChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckQuitChatGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckQuitChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckQuitChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckQuitChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckQuitChatGroup::MergeFrom(const ReqAckQuitChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckQuitChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_xchatgroupid()) {
    mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ReqAckQuitChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckQuitChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckQuitChatGroup::CopyFrom(const ReqAckQuitChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckQuitChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckQuitChatGroup::IsInitialized() const {
  return true;
}

void ReqAckQuitChatGroup::Swap(ReqAckQuitChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckQuitChatGroup::InternalSwap(ReqAckQuitChatGroup* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(xchatgroupid_, other->xchatgroupid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckQuitChatGroup::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSubscriptionChatGroup::InitAsDefaultInstance() {
  ::AFMsg::_ReqSubscriptionChatGroup_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqSubscriptionChatGroup::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSubscriptionChatGroup::ReqSubscriptionChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSubscriptionChatGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSubscriptionChatGroup)
}
ReqSubscriptionChatGroup::ReqSubscriptionChatGroup(const ReqSubscriptionChatGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      xchatgroupid_(from.xchatgroupid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSubscriptionChatGroup)
}

void ReqSubscriptionChatGroup::SharedCtor() {
  selfid_ = NULL;
  _cached_size_ = 0;
}

ReqSubscriptionChatGroup::~ReqSubscriptionChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSubscriptionChatGroup)
  SharedDtor();
}

void ReqSubscriptionChatGroup::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubscriptionChatGroup::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSubscriptionChatGroup& ReqSubscriptionChatGroup::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSubscriptionChatGroup();
  return *internal_default_instance();
}


void ReqSubscriptionChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xchatgroupid_.Clear();
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSubscriptionChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSubscriptionChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSubscriptionChatGroup)
  return false;
#undef DO_
}

void ReqSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xchatgroupid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->xchatgroupid(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSubscriptionChatGroup)
}

::google::protobuf::uint8* ReqSubscriptionChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xchatgroupid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->xchatgroupid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSubscriptionChatGroup)
  return target;
}

size_t ReqSubscriptionChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSubscriptionChatGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident xChatGroupid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->xchatgroupid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xchatgroupid(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSubscriptionChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSubscriptionChatGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSubscriptionChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSubscriptionChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSubscriptionChatGroup)
    MergeFrom(*source);
  }
}

void ReqSubscriptionChatGroup::MergeFrom(const ReqSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSubscriptionChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
}

void ReqSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscriptionChatGroup::CopyFrom(const ReqSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscriptionChatGroup::IsInitialized() const {
  return true;
}

void ReqSubscriptionChatGroup::Swap(ReqSubscriptionChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSubscriptionChatGroup::InternalSwap(ReqSubscriptionChatGroup* other) {
  using std::swap;
  CastToBase(&xchatgroupid_)->InternalSwap(CastToBase(&other->xchatgroupid_));
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSubscriptionChatGroup::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCancelSubscriptionChatGroup::InitAsDefaultInstance() {
  ::AFMsg::_ReqCancelSubscriptionChatGroup_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqCancelSubscriptionChatGroup::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqCancelSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCancelSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqCancelSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCancelSubscriptionChatGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCancelSubscriptionChatGroup)
}
ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup(const ReqCancelSubscriptionChatGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      xchatgroupid_(from.xchatgroupid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCancelSubscriptionChatGroup)
}

void ReqCancelSubscriptionChatGroup::SharedCtor() {
  selfid_ = NULL;
  _cached_size_ = 0;
}

ReqCancelSubscriptionChatGroup::~ReqCancelSubscriptionChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCancelSubscriptionChatGroup)
  SharedDtor();
}

void ReqCancelSubscriptionChatGroup::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqCancelSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCancelSubscriptionChatGroup::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCancelSubscriptionChatGroup& ReqCancelSubscriptionChatGroup::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCancelSubscriptionChatGroup();
  return *internal_default_instance();
}


void ReqCancelSubscriptionChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCancelSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xchatgroupid_.Clear();
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqCancelSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCancelSubscriptionChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCancelSubscriptionChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCancelSubscriptionChatGroup)
  return false;
#undef DO_
}

void ReqCancelSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCancelSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xchatgroupid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->xchatgroupid(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCancelSubscriptionChatGroup)
}

::google::protobuf::uint8* ReqCancelSubscriptionChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCancelSubscriptionChatGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xchatgroupid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->xchatgroupid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCancelSubscriptionChatGroup)
  return target;
}

size_t ReqCancelSubscriptionChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCancelSubscriptionChatGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident xChatGroupid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->xchatgroupid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xchatgroupid(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCancelSubscriptionChatGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCancelSubscriptionChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCancelSubscriptionChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCancelSubscriptionChatGroup)
    MergeFrom(*source);
  }
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ReqCancelSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ReqCancelSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelSubscriptionChatGroup::IsInitialized() const {
  return true;
}

void ReqCancelSubscriptionChatGroup::Swap(ReqCancelSubscriptionChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCancelSubscriptionChatGroup::InternalSwap(ReqCancelSubscriptionChatGroup* other) {
  using std::swap;
  CastToBase(&xchatgroupid_)->InternalSwap(CastToBase(&other->xchatgroupid_));
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCancelSubscriptionChatGroup::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqIntensifylevelToEquip::InitAsDefaultInstance() {
  ::AFMsg::_ReqIntensifylevelToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqIntensifylevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqIntensifylevelToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqIntensifylevelToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqIntensifylevelToEquip::kSelfidFieldNumber;
const int ReqIntensifylevelToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqIntensifylevelToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqIntensifylevelToEquip)
}
ReqIntensifylevelToEquip::ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqIntensifylevelToEquip)
}

void ReqIntensifylevelToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equipid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(equipid_));
  _cached_size_ = 0;
}

ReqIntensifylevelToEquip::~ReqIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqIntensifylevelToEquip)
  SharedDtor();
}

void ReqIntensifylevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void ReqIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqIntensifylevelToEquip& ReqIntensifylevelToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqIntensifylevelToEquip();
  return *internal_default_instance();
}


void ReqIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqIntensifylevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqIntensifylevelToEquip)
  return false;
#undef DO_
}

void ReqIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqIntensifylevelToEquip)
}

::google::protobuf::uint8* ReqIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqIntensifylevelToEquip)
  return target;
}

size_t ReqIntensifylevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqIntensifylevelToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqIntensifylevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void ReqIntensifylevelToEquip::MergeFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
}

void ReqIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIntensifylevelToEquip::CopyFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIntensifylevelToEquip::IsInitialized() const {
  return true;
}

void ReqIntensifylevelToEquip::Swap(ReqIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqIntensifylevelToEquip::InternalSwap(ReqIntensifylevelToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqIntensifylevelToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckIntensifylevelToEquip::InitAsDefaultInstance() {
  ::AFMsg::_AckIntensifylevelToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckIntensifylevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckIntensifylevelToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void AckIntensifylevelToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckIntensifylevelToEquip::kSelfidFieldNumber;
const int AckIntensifylevelToEquip::kEquipidFieldNumber;
const int AckIntensifylevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckIntensifylevelToEquip::AckIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckIntensifylevelToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckIntensifylevelToEquip)
}
AckIntensifylevelToEquip::AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckIntensifylevelToEquip)
}

void AckIntensifylevelToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(result_));
  _cached_size_ = 0;
}

AckIntensifylevelToEquip::~AckIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckIntensifylevelToEquip)
  SharedDtor();
}

void AckIntensifylevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void AckIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckIntensifylevelToEquip& AckIntensifylevelToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckIntensifylevelToEquip();
  return *internal_default_instance();
}


void AckIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  result_ = 0;
  _internal_metadata_.Clear();
}

bool AckIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckIntensifylevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckIntensifylevelToEquip)
  return false;
#undef DO_
}

void AckIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckIntensifylevelToEquip)
}

::google::protobuf::uint8* AckIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckIntensifylevelToEquip)
  return target;
}

size_t AckIntensifylevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckIntensifylevelToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckIntensifylevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void AckIntensifylevelToEquip::MergeFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AckIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIntensifylevelToEquip::CopyFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIntensifylevelToEquip::IsInitialized() const {
  return true;
}

void AckIntensifylevelToEquip::Swap(AckIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckIntensifylevelToEquip::InternalSwap(AckIntensifylevelToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckIntensifylevelToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHoleToEquip::InitAsDefaultInstance() {
  ::AFMsg::_ReqHoleToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqHoleToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqHoleToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqHoleToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoleToEquip::kSelfidFieldNumber;
const int ReqHoleToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoleToEquip::ReqHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoleToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHoleToEquip)
}
ReqHoleToEquip::ReqHoleToEquip(const ReqHoleToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHoleToEquip)
}

void ReqHoleToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equipid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(equipid_));
  _cached_size_ = 0;
}

ReqHoleToEquip::~ReqHoleToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHoleToEquip)
  SharedDtor();
}

void ReqHoleToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void ReqHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoleToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHoleToEquip& ReqHoleToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoleToEquip();
  return *internal_default_instance();
}


void ReqHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHoleToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHoleToEquip)
  return false;
#undef DO_
}

void ReqHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHoleToEquip)
}

::google::protobuf::uint8* ReqHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHoleToEquip)
  return target;
}

size_t ReqHoleToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHoleToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHoleToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHoleToEquip)
    MergeFrom(*source);
  }
}

void ReqHoleToEquip::MergeFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
}

void ReqHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoleToEquip::CopyFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoleToEquip::IsInitialized() const {
  return true;
}

void ReqHoleToEquip::Swap(ReqHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoleToEquip::InternalSwap(ReqHoleToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHoleToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckHoleToEquip::InitAsDefaultInstance() {
  ::AFMsg::_AckHoleToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckHoleToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckHoleToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void AckHoleToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckHoleToEquip::kSelfidFieldNumber;
const int AckHoleToEquip::kEquipidFieldNumber;
const int AckHoleToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoleToEquip::AckHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoleToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckHoleToEquip)
}
AckHoleToEquip::AckHoleToEquip(const AckHoleToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckHoleToEquip)
}

void AckHoleToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(result_));
  _cached_size_ = 0;
}

AckHoleToEquip::~AckHoleToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckHoleToEquip)
  SharedDtor();
}

void AckHoleToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void AckHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoleToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckHoleToEquip& AckHoleToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoleToEquip();
  return *internal_default_instance();
}


void AckHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  result_ = 0;
  _internal_metadata_.Clear();
}

bool AckHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckHoleToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckHoleToEquip)
  return false;
#undef DO_
}

void AckHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckHoleToEquip)
}

::google::protobuf::uint8* AckHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckHoleToEquip)
  return target;
}

size_t AckHoleToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckHoleToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHoleToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckHoleToEquip)
    MergeFrom(*source);
  }
}

void AckHoleToEquip::MergeFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AckHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoleToEquip::CopyFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoleToEquip::IsInitialized() const {
  return true;
}

void AckHoleToEquip::Swap(AckHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoleToEquip::InternalSwap(AckHoleToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckHoleToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqInlaystoneToEquip::InitAsDefaultInstance() {
  ::AFMsg::_ReqInlaystoneToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqInlaystoneToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqInlaystoneToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqInlaystoneToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqInlaystoneToEquip::kSelfidFieldNumber;
const int ReqInlaystoneToEquip::kEquipidFieldNumber;
const int ReqInlaystoneToEquip::kStoneidFieldNumber;
const int ReqInlaystoneToEquip::kHoleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqInlaystoneToEquip::ReqInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqInlaystoneToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqInlaystoneToEquip)
}
ReqInlaystoneToEquip::ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stoneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stoneid().size() > 0) {
    stoneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoneid_);
  }
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  hole_index_ = from.hole_index_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqInlaystoneToEquip)
}

void ReqInlaystoneToEquip::SharedCtor() {
  stoneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hole_index_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(hole_index_));
  _cached_size_ = 0;
}

ReqInlaystoneToEquip::~ReqInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqInlaystoneToEquip)
  SharedDtor();
}

void ReqInlaystoneToEquip::SharedDtor() {
  stoneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void ReqInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqInlaystoneToEquip& ReqInlaystoneToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqInlaystoneToEquip();
  return *internal_default_instance();
}


void ReqInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  hole_index_ = 0;
  _internal_metadata_.Clear();
}

bool ReqInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqInlaystoneToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stoneid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoneid().data(), static_cast<int>(this->stoneid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqInlaystoneToEquip.stoneid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hole_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqInlaystoneToEquip)
  return false;
#undef DO_
}

void ReqInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // string stoneid = 3;
  if (this->stoneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoneid().data(), static_cast<int>(this->stoneid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqInlaystoneToEquip.stoneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stoneid(), output);
  }

  // int32 hole_index = 4;
  if (this->hole_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hole_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqInlaystoneToEquip)
}

::google::protobuf::uint8* ReqInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // string stoneid = 3;
  if (this->stoneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoneid().data(), static_cast<int>(this->stoneid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqInlaystoneToEquip.stoneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stoneid(), target);
  }

  // int32 hole_index = 4;
  if (this->hole_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hole_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqInlaystoneToEquip)
  return target;
}

size_t ReqInlaystoneToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqInlaystoneToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string stoneid = 3;
  if (this->stoneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoneid());
  }

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // int32 hole_index = 4;
  if (this->hole_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqInlaystoneToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void ReqInlaystoneToEquip::MergeFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stoneid().size() > 0) {

    stoneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoneid_);
  }
  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.hole_index() != 0) {
    set_hole_index(from.hole_index());
  }
}

void ReqInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInlaystoneToEquip::CopyFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInlaystoneToEquip::IsInitialized() const {
  return true;
}

void ReqInlaystoneToEquip::Swap(ReqInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqInlaystoneToEquip::InternalSwap(ReqInlaystoneToEquip* other) {
  using std::swap;
  stoneid_.Swap(&other->stoneid_);
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(hole_index_, other->hole_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqInlaystoneToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckInlaystoneToEquip::InitAsDefaultInstance() {
  ::AFMsg::_AckInlaystoneToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckInlaystoneToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckInlaystoneToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void AckInlaystoneToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckInlaystoneToEquip::kSelfidFieldNumber;
const int AckInlaystoneToEquip::kEquipidFieldNumber;
const int AckInlaystoneToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckInlaystoneToEquip::AckInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckInlaystoneToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckInlaystoneToEquip)
}
AckInlaystoneToEquip::AckInlaystoneToEquip(const AckInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckInlaystoneToEquip)
}

void AckInlaystoneToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(result_));
  _cached_size_ = 0;
}

AckInlaystoneToEquip::~AckInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckInlaystoneToEquip)
  SharedDtor();
}

void AckInlaystoneToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void AckInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckInlaystoneToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckInlaystoneToEquip& AckInlaystoneToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckInlaystoneToEquip();
  return *internal_default_instance();
}


void AckInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  result_ = 0;
  _internal_metadata_.Clear();
}

bool AckInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckInlaystoneToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckInlaystoneToEquip)
  return false;
#undef DO_
}

void AckInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckInlaystoneToEquip)
}

::google::protobuf::uint8* AckInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckInlaystoneToEquip)
  return target;
}

size_t AckInlaystoneToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckInlaystoneToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckInlaystoneToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void AckInlaystoneToEquip::MergeFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AckInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInlaystoneToEquip::CopyFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInlaystoneToEquip::IsInitialized() const {
  return true;
}

void AckInlaystoneToEquip::Swap(AckInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckInlaystoneToEquip::InternalSwap(AckInlaystoneToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckInlaystoneToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqElementlevelToEquip::InitAsDefaultInstance() {
  ::AFMsg::_ReqElementlevelToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqElementlevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqElementlevelToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqElementlevelToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqElementlevelToEquip::kSelfidFieldNumber;
const int ReqElementlevelToEquip::kEquipidFieldNumber;
const int ReqElementlevelToEquip::kEElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqElementlevelToEquip::ReqElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqElementlevelToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqElementlevelToEquip)
}
ReqElementlevelToEquip::ReqElementlevelToEquip(const ReqElementlevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  eelementtype_ = from.eelementtype_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqElementlevelToEquip)
}

void ReqElementlevelToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eelementtype_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(eelementtype_));
  _cached_size_ = 0;
}

ReqElementlevelToEquip::~ReqElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqElementlevelToEquip)
  SharedDtor();
}

void ReqElementlevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void ReqElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqElementlevelToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqElementlevelToEquip& ReqElementlevelToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqElementlevelToEquip();
  return *internal_default_instance();
}


void ReqElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  eelementtype_ = 0;
  _internal_metadata_.Clear();
}

bool ReqElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqElementlevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.EGameElementType eElementType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eelementtype(static_cast< ::AFMsg::EGameElementType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqElementlevelToEquip)
  return false;
#undef DO_
}

void ReqElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // .AFMsg.EGameElementType eElementType = 3;
  if (this->eelementtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eelementtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqElementlevelToEquip)
}

::google::protobuf::uint8* ReqElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // .AFMsg.EGameElementType eElementType = 3;
  if (this->eelementtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eelementtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqElementlevelToEquip)
  return target;
}

size_t ReqElementlevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqElementlevelToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // .AFMsg.EGameElementType eElementType = 3;
  if (this->eelementtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqElementlevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqElementlevelToEquip)
    MergeFrom(*source);
  }
}

void ReqElementlevelToEquip::MergeFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.eelementtype() != 0) {
    set_eelementtype(from.eelementtype());
  }
}

void ReqElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqElementlevelToEquip::CopyFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqElementlevelToEquip::IsInitialized() const {
  return true;
}

void ReqElementlevelToEquip::Swap(ReqElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqElementlevelToEquip::InternalSwap(ReqElementlevelToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(eelementtype_, other->eelementtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqElementlevelToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckElementlevelToEquip::InitAsDefaultInstance() {
  ::AFMsg::_AckElementlevelToEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckElementlevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckElementlevelToEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void AckElementlevelToEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckElementlevelToEquip::kSelfidFieldNumber;
const int AckElementlevelToEquip::kEquipidFieldNumber;
const int AckElementlevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckElementlevelToEquip::AckElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckElementlevelToEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckElementlevelToEquip)
}
AckElementlevelToEquip::AckElementlevelToEquip(const AckElementlevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckElementlevelToEquip)
}

void AckElementlevelToEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(result_));
  _cached_size_ = 0;
}

AckElementlevelToEquip::~AckElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckElementlevelToEquip)
  SharedDtor();
}

void AckElementlevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
}

void AckElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckElementlevelToEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckElementlevelToEquip& AckElementlevelToEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckElementlevelToEquip();
  return *internal_default_instance();
}


void AckElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  result_ = 0;
  _internal_metadata_.Clear();
}

bool AckElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckElementlevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckElementlevelToEquip)
  return false;
#undef DO_
}

void AckElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckElementlevelToEquip)
}

::google::protobuf::uint8* AckElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckElementlevelToEquip)
  return target;
}

size_t AckElementlevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckElementlevelToEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckElementlevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckElementlevelToEquip)
    MergeFrom(*source);
  }
}

void AckElementlevelToEquip::MergeFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AckElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckElementlevelToEquip::CopyFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckElementlevelToEquip::IsInitialized() const {
  return true;
}

void AckElementlevelToEquip::Swap(AckElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckElementlevelToEquip::InternalSwap(AckElementlevelToEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckElementlevelToEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSetFightHero::InitAsDefaultInstance() {
  ::AFMsg::_ReqSetFightHero_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqSetFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqSetFightHero::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqSetFightHero::clear_heroid() {
  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetFightHero::kSelfidFieldNumber;
const int ReqSetFightHero::kHeroidFieldNumber;
const int ReqSetFightHero::kFightPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetFightHero::ReqSetFightHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSetFightHero();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSetFightHero)
}
ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_heroid()) {
    heroid_ = new ::AFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = NULL;
  }
  fightpos_ = from.fightpos_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSetFightHero)
}

void ReqSetFightHero::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightpos_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(fightpos_));
  _cached_size_ = 0;
}

ReqSetFightHero::~ReqSetFightHero() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSetFightHero)
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSetFightHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetFightHero::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSetFightHero& ReqSetFightHero::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSetFightHero();
  return *internal_default_instance();
}


void ReqSetFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
  fightpos_ = 0;
  _internal_metadata_.Clear();
}

bool ReqSetFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSetFightHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident Heroid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FightPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSetFightHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSetFightHero)
  return false;
#undef DO_
}

void ReqSetFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident Heroid = 2;
  if (this->has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *heroid_, output);
  }

  // int32 FightPos = 3;
  if (this->fightpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightpos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSetFightHero)
}

::google::protobuf::uint8* ReqSetFightHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident Heroid = 2;
  if (this->has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *heroid_, deterministic, target);
  }

  // int32 FightPos = 3;
  if (this->fightpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightpos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSetFightHero)
  return target;
}

size_t ReqSetFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSetFightHero)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident Heroid = 2;
  if (this->has_heroid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  // int32 FightPos = 3;
  if (this->fightpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fightpos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetFightHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetFightHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSetFightHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSetFightHero)
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_heroid()) {
    mutable_heroid()->::AFMsg::Ident::MergeFrom(from.heroid());
  }
  if (from.fightpos() != 0) {
    set_fightpos(from.fightpos());
  }
}

void ReqSetFightHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  return true;
}

void ReqSetFightHero::Swap(ReqSetFightHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetFightHero::InternalSwap(ReqSetFightHero* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(heroid_, other->heroid_);
  swap(fightpos_, other->fightpos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSetFightHero::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqWearEquip::InitAsDefaultInstance() {
  ::AFMsg::_ReqWearEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqWearEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqWearEquip_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqWearEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqWearEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
void ReqWearEquip::clear_targetid() {
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWearEquip::kSelfidFieldNumber;
const int ReqWearEquip::kEquipidFieldNumber;
const int ReqWearEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWearEquip::ReqWearEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqWearEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqWearEquip)
}
ReqWearEquip::ReqWearEquip(const ReqWearEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::AFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqWearEquip)
}

void ReqWearEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(targetid_));
  _cached_size_ = 0;
}

ReqWearEquip::~ReqWearEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqWearEquip)
  SharedDtor();
}

void ReqWearEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
  if (this != internal_default_instance()) delete targetid_;
}

void ReqWearEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWearEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqWearEquip& ReqWearEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqWearEquip();
  return *internal_default_instance();
}


void ReqWearEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqWearEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqWearEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident Targetid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqWearEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqWearEquip)
  return false;
#undef DO_
}

void ReqWearEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *targetid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqWearEquip)
}

::google::protobuf::uint8* ReqWearEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *targetid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqWearEquip)
  return target;
}

size_t ReqWearEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqWearEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWearEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqWearEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWearEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWearEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqWearEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqWearEquip)
    MergeFrom(*source);
  }
}

void ReqWearEquip::MergeFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqWearEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.has_targetid()) {
    mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
  }
}

void ReqWearEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWearEquip::CopyFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWearEquip::IsInitialized() const {
  return true;
}

void ReqWearEquip::Swap(ReqWearEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWearEquip::InternalSwap(ReqWearEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(targetid_, other->targetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWearEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TakeOffEquip::InitAsDefaultInstance() {
  ::AFMsg::_TakeOffEquip_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_TakeOffEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_TakeOffEquip_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void TakeOffEquip::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void TakeOffEquip::clear_equipid() {
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
}
void TakeOffEquip::clear_targetid() {
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeOffEquip::kSelfidFieldNumber;
const int TakeOffEquip::kEquipidFieldNumber;
const int TakeOffEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeOffEquip::TakeOffEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsTakeOffEquip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TakeOffEquip)
}
TakeOffEquip::TakeOffEquip(const TakeOffEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_equipid()) {
    equipid_ = new ::AFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::AFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.TakeOffEquip)
}

void TakeOffEquip::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(targetid_));
  _cached_size_ = 0;
}

TakeOffEquip::~TakeOffEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.TakeOffEquip)
  SharedDtor();
}

void TakeOffEquip::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete equipid_;
  if (this != internal_default_instance()) delete targetid_;
}

void TakeOffEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeOffEquip::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeOffEquip& TakeOffEquip::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsTakeOffEquip();
  return *internal_default_instance();
}


void TakeOffEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && equipid_ != NULL) {
    delete equipid_;
  }
  equipid_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
  _internal_metadata_.Clear();
}

bool TakeOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TakeOffEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident equipid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident Targetid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TakeOffEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TakeOffEquip)
  return false;
#undef DO_
}

void TakeOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *equipid_, output);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *targetid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TakeOffEquip)
}

::google::protobuf::uint8* TakeOffEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *equipid_, deterministic, target);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *targetid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TakeOffEquip)
  return target;
}

size_t TakeOffEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TakeOffEquip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident equipid = 2;
  if (this->has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  // .AFMsg.Ident Targetid = 3;
  if (this->has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TakeOffEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeOffEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeOffEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TakeOffEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TakeOffEquip)
    MergeFrom(*source);
  }
}

void TakeOffEquip::MergeFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TakeOffEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_equipid()) {
    mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
  }
  if (from.has_targetid()) {
    mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
  }
}

void TakeOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeOffEquip::CopyFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeOffEquip::IsInitialized() const {
  return true;
}

void TakeOffEquip::Swap(TakeOffEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeOffEquip::InternalSwap(TakeOffEquip* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(equipid_, other->equipid_);
  swap(targetid_, other->targetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeOffEquip::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMiningTitle::InitAsDefaultInstance() {
  ::AFMsg::_ReqMiningTitle_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqMiningTitle::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMiningTitle::kSelfidFieldNumber;
const int ReqMiningTitle::kXFieldNumber;
const int ReqMiningTitle::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMiningTitle::ReqMiningTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMiningTitle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMiningTitle)
}
ReqMiningTitle::ReqMiningTitle(const ReqMiningTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMiningTitle)
}

void ReqMiningTitle::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(y_));
  _cached_size_ = 0;
}

ReqMiningTitle::~ReqMiningTitle() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMiningTitle)
  SharedDtor();
}

void ReqMiningTitle::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqMiningTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMiningTitle::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMiningTitle& ReqMiningTitle::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMiningTitle();
  return *internal_default_instance();
}


void ReqMiningTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool ReqMiningTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMiningTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMiningTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMiningTitle)
  return false;
#undef DO_
}

void ReqMiningTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMiningTitle)
}

::google::protobuf::uint8* ReqMiningTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMiningTitle)
  return target;
}

size_t ReqMiningTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMiningTitle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMiningTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMiningTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMiningTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMiningTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMiningTitle)
    MergeFrom(*source);
  }
}

void ReqMiningTitle::MergeFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ReqMiningTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMiningTitle::CopyFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMiningTitle::IsInitialized() const {
  return true;
}

void ReqMiningTitle::Swap(ReqMiningTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMiningTitle::InternalSwap(ReqMiningTitle* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMiningTitle::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSendMail::InitAsDefaultInstance() {
  ::AFMsg::_ReqSendMail_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqSendMail_default_instance_._instance.get_mutable()->reciever_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqSendMail::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqSendMail::clear_reciever() {
  if (GetArenaNoVirtual() == NULL && reciever_ != NULL) {
    delete reciever_;
  }
  reciever_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSendMail::kSelfidFieldNumber;
const int ReqSendMail::kRecieverFieldNumber;
const int ReqSendMail::kItemListFieldNumber;
const int ReqSendMail::kCurrencyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSendMail::ReqSendMail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSendMail();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSendMail)
}
ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      currency_list_(from.currency_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_reciever()) {
    reciever_ = new ::AFMsg::Ident(*from.reciever_);
  } else {
    reciever_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSendMail)
}

void ReqSendMail::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reciever_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(reciever_));
  _cached_size_ = 0;
}

ReqSendMail::~ReqSendMail() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSendMail)
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete reciever_;
}

void ReqSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendMail::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSendMail& ReqSendMail::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSendMail();
  return *internal_default_instance();
}


void ReqSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  currency_list_.Clear();
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && reciever_ != NULL) {
    delete reciever_;
  }
  reciever_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSendMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident reciever = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reciever()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.CurrencyStruct currency_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_currency_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSendMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSendMail)
  return false;
#undef DO_
}

void ReqSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // .AFMsg.Ident reciever = 2;
  if (this->has_reciever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *reciever_, output);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->item_list(static_cast<int>(i)),
      output);
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->currency_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSendMail)
}

::google::protobuf::uint8* ReqSendMail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // .AFMsg.Ident reciever = 2;
  if (this->has_reciever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *reciever_, deterministic, target);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->currency_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSendMail)
  return target;
}

size_t ReqSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSendMail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.ItemStruct item_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->currency_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->currency_list(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident reciever = 2;
  if (this->has_reciever()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reciever_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendMail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendMail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSendMail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSendMail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSendMail)
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_reciever()) {
    mutable_reciever()->::AFMsg::Ident::MergeFrom(from.reciever());
  }
}

void ReqSendMail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  return true;
}

void ReqSendMail::Swap(ReqSendMail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSendMail::InternalSwap(ReqSendMail* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  CastToBase(&currency_list_)->InternalSwap(CastToBase(&other->currency_list_));
  swap(selfid_, other->selfid_);
  swap(reciever_, other->reciever_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSendMail::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSwitchServer::InitAsDefaultInstance() {
  ::AFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqSwitchServer::clear_client_id() {
  if (GetArenaNoVirtual() == NULL && client_id_ != NULL) {
    delete client_id_;
  }
  client_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSwitchServer::kSelfidFieldNumber;
const int ReqSwitchServer::kSelfServeridFieldNumber;
const int ReqSwitchServer::kTargetServeridFieldNumber;
const int ReqSwitchServer::kGateServeridFieldNumber;
const int ReqSwitchServer::kSceneIDFieldNumber;
const int ReqSwitchServer::kClientIdFieldNumber;
const int ReqSwitchServer::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSwitchServer::ReqSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSwitchServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSwitchServer)
}
ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_client_id()) {
    client_id_ = new ::AFMsg::Ident(*from.client_id_);
  } else {
    client_id_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSwitchServer)
}

void ReqSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(groupid_));
  _cached_size_ = 0;
}

ReqSwitchServer::~ReqSwitchServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSwitchServer)
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSwitchServer::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSwitchServer& ReqSwitchServer::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqSwitchServer();
  return *internal_default_instance();
}


void ReqSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_id_ != NULL) {
    delete client_id_;
  }
  client_id_ = NULL;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  _internal_metadata_.Clear();
}

bool ReqSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSwitchServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SceneID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 groupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSwitchServer)
  return false;
#undef DO_
}

void ReqSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sceneid(), output);
  }

  // .AFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *client_id_, output);
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSwitchServer)
}

::google::protobuf::uint8* ReqSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sceneid(), target);
  }

  // .AFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *client_id_, deterministic, target);
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSwitchServer)
  return target;
}

size_t ReqSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSwitchServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .AFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSwitchServer)
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_client_id()) {
    mutable_client_id()->::AFMsg::Ident::MergeFrom(from.client_id());
  }
  if (from.self_serverid() != 0) {
    set_self_serverid(from.self_serverid());
  }
  if (from.target_serverid() != 0) {
    set_target_serverid(from.target_serverid());
  }
  if (from.gate_serverid() != 0) {
    set_gate_serverid(from.gate_serverid());
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void ReqSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  return true;
}

void ReqSwitchServer::Swap(ReqSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSwitchServer::InternalSwap(ReqSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(client_id_, other->client_id_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSwitchServer::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSwitchServer::InitAsDefaultInstance() {
  ::AFMsg::_AckSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSwitchServer::kSelfidFieldNumber;
const int AckSwitchServer::kSelfServeridFieldNumber;
const int AckSwitchServer::kTargetServeridFieldNumber;
const int AckSwitchServer::kGateServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSwitchServer::AckSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSwitchServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSwitchServer)
}
AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::AFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_serverid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSwitchServer)
}

void AckSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(gate_serverid_));
  _cached_size_ = 0;
}

AckSwitchServer::~AckSwitchServer() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSwitchServer)
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void AckSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSwitchServer::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSwitchServer& AckSwitchServer::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckSwitchServer();
  return *internal_default_instance();
}


void AckSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  _internal_metadata_.Clear();
}

bool AckSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSwitchServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSwitchServer)
  return false;
#undef DO_
}

void AckSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *selfid_, output);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSwitchServer)
}

::google::protobuf::uint8* AckSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *selfid_, deterministic, target);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSwitchServer)
  return target;
}

size_t AckSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSwitchServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSwitchServer)
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.self_serverid() != 0) {
    set_self_serverid(from.self_serverid());
  }
  if (from.target_serverid() != 0) {
    set_target_serverid(from.target_serverid());
  }
  if (from.gate_serverid() != 0) {
    set_gate_serverid(from.gate_serverid());
  }
}

void AckSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  return true;
}

void AckSwitchServer::Swap(AckSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSwitchServer::InternalSwap(AckSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSwitchServer::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
  ::AFMsg::_TeamInfo_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_TeamInfo_default_instance_._instance.get_mutable()->captain_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void TeamInfo::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void TeamInfo::clear_captain_id() {
  if (GetArenaNoVirtual() == NULL && captain_id_ != NULL) {
    delete captain_id_;
  }
  captain_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      teammemberinfo_(from.teammemberinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_captain_id()) {
    captain_id_ = new ::AFMsg::Ident(*from.captain_id_);
  } else {
    captain_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captain_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(captain_id_));
  _cached_size_ = 0;
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete captain_id_;
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamInfo& TeamInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsTeamInfo();
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teammemberinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && captain_id_ != NULL) {
    delete captain_id_;
  }
  captain_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident captain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_captain_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teammemberinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *captain_id_, output);
  }

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->teammemberinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *captain_id_, deterministic, target);
  }

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->teammemberinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TeamInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->teammemberinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teammemberinfo(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *captain_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_captain_id()) {
    mutable_captain_id()->::AFMsg::Ident::MergeFrom(from.captain_id());
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  CastToBase(&teammemberinfo_)->InternalSwap(CastToBase(&other->teammemberinfo_));
  swap(team_id_, other->team_id_);
  swap(captain_id_, other->captain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeammemberInfo::InitAsDefaultInstance() {
  ::AFMsg::_TeammemberInfo_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void TeammemberInfo::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsTeammemberInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TeammemberInfo)
}
TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.headicon().size() > 0) {
    headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::AFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  ::memcpy(&nlevel_, &from.nlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.TeammemberInfo)
}

void TeammemberInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(job_));
  _cached_size_ = 0;
}

TeammemberInfo::~TeammemberInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.TeammemberInfo)
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void TeammemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsTeammemberInfo();
  return *internal_default_instance();
}


void TeammemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
  ::memset(&nlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  _internal_metadata_.Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TeammemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.TeammemberInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nLevel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HeadIcon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headicon().data(), static_cast<int>(this->headicon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.TeammemberInfo.HeadIcon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TeammemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TeammemberInfo)
  return false;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *player_id_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.TeammemberInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // int32 job = 4;
  if (this->job() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.TeammemberInfo.HeadIcon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headicon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TeammemberInfo)
}

::google::protobuf::uint8* TeammemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *player_id_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.TeammemberInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // int32 job = 4;
  if (this->job() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.TeammemberInfo.HeadIcon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TeammemberInfo)
  return target;
}

size_t TeammemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TeammemberInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());
  }

  // .AFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());
  }

  // int32 job = 4;
  if (this->job() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeammemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeammemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TeammemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TeammemberInfo)
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.headicon().size() > 0) {

    headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  if (from.has_player_id()) {
    mutable_player_id()->::AFMsg::Ident::MergeFrom(from.player_id());
  }
  if (from.nlevel() != 0) {
    set_nlevel(from.nlevel());
  }
  if (from.job() != 0) {
    set_job(from.job());
  }
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeammemberInfo::InternalSwap(TeammemberInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  headicon_.Swap(&other->headicon_);
  swap(player_id_, other->player_id_);
  swap(nlevel_, other->nlevel_);
  swap(job_, other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateTeam::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(
      ::AFMsg::TeamInfo::internal_default_instance());
}
void ReqAckCreateTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateTeam)
}
ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::AFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateTeam)
}

void ReqAckCreateTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
  _cached_size_ = 0;
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateTeam)
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckCreateTeam();
  return *internal_default_instance();
}


void ReqAckCreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateTeam)
  return false;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xteaminfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateTeam)
}

::google::protobuf::uint8* ReqAckCreateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xteaminfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateTeam)
  return target;
}

size_t ReqAckCreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateTeam)
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateTeam::InternalSwap(ReqAckCreateTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinTeam::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(
      ::AFMsg::TeamInfo::internal_default_instance());
}
void ReqAckJoinTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinTeam)
}
ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::AFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinTeam)
}

void ReqAckJoinTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
  _cached_size_ = 0;
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinTeam)
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckJoinTeam();
  return *internal_default_instance();
}


void ReqAckJoinTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinTeam)
  return false;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xteaminfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinTeam)
}

::google::protobuf::uint8* ReqAckJoinTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xteaminfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinTeam)
  return target;
}

size_t ReqAckJoinTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinTeam)
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinTeam::InternalSwap(ReqAckJoinTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(
      ::AFMsg::TeamInfo::internal_default_instance());
}
void ReqAckLeaveTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckLeaveTeam)
}
ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::AFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckLeaveTeam)
}

void ReqAckLeaveTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
  _cached_size_ = 0;
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckLeaveTeam)
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckLeaveTeam();
  return *internal_default_instance();
}


void ReqAckLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckLeaveTeam)
  return false;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xteaminfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckLeaveTeam)
}

::google::protobuf::uint8* ReqAckLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xteaminfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckLeaveTeam)
  return target;
}

size_t ReqAckLeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckLeaveTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckLeaveTeam)
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveTeam::InternalSwap(ReqAckLeaveTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(
      ::AFMsg::TeamInfo::internal_default_instance());
}
void ReqAckOprTeamMember::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqAckOprTeamMember::clear_member_id() {
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprTeamMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprTeamMember)
}
ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::AFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::AFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprTeamMember)
}

void ReqAckOprTeamMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(type_));
  _cached_size_ = 0;
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprTeamMember)
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckOprTeamMember();
  return *internal_default_instance();
}


void ReqAckOprTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprTeamMember)
  return false;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *member_id_, output);
  }

  // .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .AFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *xteaminfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprTeamMember)
}

::google::protobuf::uint8* ReqAckOprTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *member_id_, deterministic, target);
  }

  // .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .AFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *xteaminfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprTeamMember)
  return target;
}

size_t ReqAckOprTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprTeamMember)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  // .AFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  // .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprTeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprTeamMember)
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_member_id()) {
    mutable_member_id()->::AFMsg::Ident::MergeFrom(from.member_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprTeamMember::InternalSwap(ReqAckOprTeamMember* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(member_id_, other->member_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckInviteTeam::InitAsDefaultInstance() {
  ::AFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->invite_target_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqAckInviteTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqAckInviteTeam::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
void ReqAckInviteTeam::clear_invite_target_id() {
  if (GetArenaNoVirtual() == NULL && invite_target_id_ != NULL) {
    delete invite_target_id_;
  }
  invite_target_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckInviteTeam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckInviteTeam)
}
ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_invite_target_id()) {
    invite_target_id_ = new ::AFMsg::Ident(*from.invite_target_id_);
  } else {
    invite_target_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckInviteTeam)
}

void ReqAckInviteTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_target_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(invite_target_id_));
  _cached_size_ = 0;
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckInviteTeam)
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete invite_target_id_;
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqAckInviteTeam();
  return *internal_default_instance();
}


void ReqAckInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && invite_target_id_ != NULL) {
    delete invite_target_id_;
  }
  invite_target_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident invite_target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invite_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckInviteTeam)
  return false;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *self_id_, output);
  }

  // .AFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *invite_target_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckInviteTeam)
}

::google::protobuf::uint8* ReqAckInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *self_id_, deterministic, target);
  }

  // .AFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *invite_target_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckInviteTeam)
  return target;
}

size_t ReqAckInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .AFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *invite_target_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckInviteTeam)
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_invite_target_id()) {
    mutable_invite_target_id()->::AFMsg::Ident::MergeFrom(from.invite_target_id());
  }
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckInviteTeam::InternalSwap(ReqAckInviteTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(invite_target_id_, other->invite_target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  ::AFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqTeamEnterEctype::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqTeamEnterEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqTeamEnterEctype();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqTeamEnterEctype)
}
ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nserverid_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqTeamEnterEctype)
}

void ReqTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nserverid_));
  _cached_size_ = 0;
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqTeamEnterEctype)
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqTeamEnterEctype();
  return *internal_default_instance();
}


void ReqTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  ::memset(&nectypeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  _internal_metadata_.Clear();
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqTeamEnterEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nServerID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqTeamEnterEctype)
  return false;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *self_id_, output);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqTeamEnterEctype)
}

::google::protobuf::uint8* ReqTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *self_id_, deterministic, target);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqTeamEnterEctype)
  return target;
}

size_t ReqTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqTeamEnterEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nectypeid());
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngroupid());
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqTeamEnterEctype)
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.nectypeid() != 0) {
    set_nectypeid(from.nectypeid());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.nresult() != 0) {
    set_nresult(from.nresult());
  }
  if (from.nserverid() != 0) {
    set_nserverid(from.nserverid());
  }
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamEnterEctype::InternalSwap(ReqTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  swap(nserverid_, other->nserverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckTeamEnterEctype::InitAsDefaultInstance() {
  ::AFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void AckTeamEnterEctype::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void AckTeamEnterEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckTeamEnterEctype();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckTeamEnterEctype)
}
AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nresult_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckTeamEnterEctype)
}

void AckTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nresult_));
  _cached_size_ = 0;
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.AckTeamEnterEctype)
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckTeamEnterEctype();
  return *internal_default_instance();
}


void AckTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  ::memset(&nectypeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  _internal_metadata_.Clear();
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckTeamEnterEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckTeamEnterEctype)
  return false;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *team_id_, output);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *self_id_, output);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckTeamEnterEctype)
}

::google::protobuf::uint8* AckTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *team_id_, deterministic, target);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *self_id_, deterministic, target);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckTeamEnterEctype)
  return target;
}

size_t AckTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckTeamEnterEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .AFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nectypeid());
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngroupid());
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckTeamEnterEctype)
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.nectypeid() != 0) {
    set_nectypeid(from.nectypeid());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.nresult() != 0) {
    set_nresult(from.nresult());
  }
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckTeamEnterEctype::InternalSwap(AckTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GridGuildBaseInfo::InitAsDefaultInstance() {
  ::AFMsg::_GridGuildBaseInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void GridGuildBaseInfo::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridGuildBaseInfo::kIdFieldNumber;
const int GridGuildBaseInfo::kLevelFieldNumber;
const int GridGuildBaseInfo::kCountFieldNumber;
const int GridGuildBaseInfo::kResourceFieldNumber;
const int GridGuildBaseInfo::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridGuildBaseInfo::GridGuildBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.GridGuildBaseInfo)
}
GridGuildBaseInfo::GridGuildBaseInfo(const GridGuildBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.icon().size() > 0) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.has_id()) {
    id_ = new ::AFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.GridGuildBaseInfo)
}

void GridGuildBaseInfo::SharedCtor() {
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_));
  _cached_size_ = 0;
}

GridGuildBaseInfo::~GridGuildBaseInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.GridGuildBaseInfo)
  SharedDtor();
}

void GridGuildBaseInfo::SharedDtor() {
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void GridGuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridGuildBaseInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GridGuildBaseInfo& GridGuildBaseInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsGridGuildBaseInfo();
  return *internal_default_instance();
}


void GridGuildBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  _internal_metadata_.Clear();
}

bool GridGuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.GridGuildBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 resource = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.GridGuildBaseInfo.icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.GridGuildBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.GridGuildBaseInfo)
  return false;
#undef DO_
}

void GridGuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_, output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 resource = 4;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource(), output);
  }

  // string icon = 5;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.GridGuildBaseInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->icon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.GridGuildBaseInfo)
}

::google::protobuf::uint8* GridGuildBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *id_, deterministic, target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 resource = 4;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource(), target);
  }

  // string icon = 5;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.GridGuildBaseInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.GridGuildBaseInfo)
  return target;
}

size_t GridGuildBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.GridGuildBaseInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string icon = 5;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // .AFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 resource = 4;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridGuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.GridGuildBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GridGuildBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GridGuildBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.GridGuildBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.GridGuildBaseInfo)
    MergeFrom(*source);
  }
}

void GridGuildBaseInfo::MergeFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.GridGuildBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.has_id()) {
    mutable_id()->::AFMsg::Ident::MergeFrom(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
}

void GridGuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGuildBaseInfo::CopyFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGuildBaseInfo::IsInitialized() const {
  return true;
}

void GridGuildBaseInfo::Swap(GridGuildBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridGuildBaseInfo::InternalSwap(GridGuildBaseInfo* other) {
  using std::swap;
  icon_.Swap(&other->icon_);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(count_, other->count_);
  swap(resource_, other->resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridGuildBaseInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBigMapGridInfo::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapGridInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqBigMapGridInfo)
}
ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_title_id_(from.map_title_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqBigMapGridInfo)
}

void ReqBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqBigMapGridInfo)
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapGridInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapGridInfo();
  return *internal_default_instance();
}


void ReqBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.Clear();
  _internal_metadata_.Clear();
}

bool ReqBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqBigMapGridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id(this->map_title_id_size() - 1).data(),
            static_cast<int>(this->map_title_id(this->map_title_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqBigMapGridInfo.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqBigMapGridInfo)
  return false;
#undef DO_
}

void ReqBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string map_title_id = 1;
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id(i).data(), static_cast<int>(this->map_title_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqBigMapGridInfo.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->map_title_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqBigMapGridInfo)
}

::google::protobuf::uint8* ReqBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string map_title_id = 1;
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id(i).data(), static_cast<int>(this->map_title_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqBigMapGridInfo.map_title_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->map_title_id(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqBigMapGridInfo)
  return target;
}

size_t ReqBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqBigMapGridInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string map_title_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_title_id_size());
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->map_title_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapGridInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqBigMapGridInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_title_id_.MergeFrom(from.map_title_id_);
}

void ReqBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {
  return true;
}

void ReqBigMapGridInfo::Swap(ReqBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapGridInfo::InternalSwap(ReqBigMapGridInfo* other) {
  using std::swap;
  map_title_id_.InternalSwap(CastToBase(&other->map_title_id_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBigMapGridInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  ::AFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->guild_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(
      ::AFMsg::GridGuildBaseInfo::internal_default_instance());
  ::AFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->kingwarrer_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->hurter_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void BigMapGridBaseInfo::clear_kingwarrer() {
  if (GetArenaNoVirtual() == NULL && kingwarrer_ != NULL) {
    delete kingwarrer_;
  }
  kingwarrer_ = NULL;
}
void BigMapGridBaseInfo::clear_hurter() {
  if (GetArenaNoVirtual() == NULL && hurter_ != NULL) {
    delete hurter_;
  }
  hurter_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridBaseInfo::kIdFieldNumber;
const int BigMapGridBaseInfo::kGuildInfoFieldNumber;
const int BigMapGridBaseInfo::kKingwarTimeFieldNumber;
const int BigMapGridBaseInfo::kKingwarrerFieldNumber;
const int BigMapGridBaseInfo::kHurtingTimeFieldNumber;
const int BigMapGridBaseInfo::kHurterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridBaseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapGridBaseInfo)
}
BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_guild_info()) {
    guild_info_ = new ::AFMsg::GridGuildBaseInfo(*from.guild_info_);
  } else {
    guild_info_ = NULL;
  }
  if (from.has_kingwarrer()) {
    kingwarrer_ = new ::AFMsg::Ident(*from.kingwarrer_);
  } else {
    kingwarrer_ = NULL;
  }
  if (from.has_hurter()) {
    hurter_ = new ::AFMsg::Ident(*from.hurter_);
  } else {
    hurter_ = NULL;
  }
  ::memcpy(&kingwar_time_, &from.kingwar_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hurting_time_) -
    reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapGridBaseInfo)
}

void BigMapGridBaseInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurting_time_) -
      reinterpret_cast<char*>(&guild_info_)) + sizeof(hurting_time_));
  _cached_size_ = 0;
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapGridBaseInfo)
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_info_;
  if (this != internal_default_instance()) delete kingwarrer_;
  if (this != internal_default_instance()) delete hurter_;
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridBaseInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridBaseInfo();
  return *internal_default_instance();
}


void BigMapGridBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_info_ != NULL) {
    delete guild_info_;
  }
  guild_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && kingwarrer_ != NULL) {
    delete kingwarrer_;
  }
  kingwarrer_ = NULL;
  if (GetArenaNoVirtual() == NULL && hurter_ != NULL) {
    delete hurter_;
  }
  hurter_ = NULL;
  ::memset(&kingwar_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurting_time_) -
      reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  _internal_metadata_.Clear();
}

bool BigMapGridBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapGridBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.BigMapGridBaseInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.GridGuildBaseInfo guild_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kingwar_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingwar_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident kingwarrer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kingwarrer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hurting_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident hurter = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hurter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapGridBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapGridBaseInfo)
  return false;
#undef DO_
}

void BigMapGridBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapGridBaseInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .AFMsg.GridGuildBaseInfo guild_info = 2;
  if (this->has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *guild_info_, output);
  }

  // int32 kingwar_time = 10;
  if (this->kingwar_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->kingwar_time(), output);
  }

  // .AFMsg.Ident kingwarrer = 11;
  if (this->has_kingwarrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *kingwarrer_, output);
  }

  // int32 hurting_time = 20;
  if (this->hurting_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hurting_time(), output);
  }

  // .AFMsg.Ident hurter = 21;
  if (this->has_hurter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *hurter_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapGridBaseInfo)
}

::google::protobuf::uint8* BigMapGridBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapGridBaseInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .AFMsg.GridGuildBaseInfo guild_info = 2;
  if (this->has_guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *guild_info_, deterministic, target);
  }

  // int32 kingwar_time = 10;
  if (this->kingwar_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->kingwar_time(), target);
  }

  // .AFMsg.Ident kingwarrer = 11;
  if (this->has_kingwarrer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *kingwarrer_, deterministic, target);
  }

  // int32 hurting_time = 20;
  if (this->hurting_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hurting_time(), target);
  }

  // .AFMsg.Ident hurter = 21;
  if (this->has_hurter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *hurter_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapGridBaseInfo)
  return target;
}

size_t BigMapGridBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapGridBaseInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .AFMsg.GridGuildBaseInfo guild_info = 2;
  if (this->has_guild_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_info_);
  }

  // .AFMsg.Ident kingwarrer = 11;
  if (this->has_kingwarrer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kingwarrer_);
  }

  // .AFMsg.Ident hurter = 21;
  if (this->has_hurter()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hurter_);
  }

  // int32 kingwar_time = 10;
  if (this->kingwar_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kingwar_time());
  }

  // int32 hurting_time = 20;
  if (this->hurting_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hurting_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapGridBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapGridBaseInfo)
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_guild_info()) {
    mutable_guild_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.guild_info());
  }
  if (from.has_kingwarrer()) {
    mutable_kingwarrer()->::AFMsg::Ident::MergeFrom(from.kingwarrer());
  }
  if (from.has_hurter()) {
    mutable_hurter()->::AFMsg::Ident::MergeFrom(from.hurter());
  }
  if (from.kingwar_time() != 0) {
    set_kingwar_time(from.kingwar_time());
  }
  if (from.hurting_time() != 0) {
    set_hurting_time(from.hurting_time());
  }
}

void BigMapGridBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  return true;
}

void BigMapGridBaseInfo::Swap(BigMapGridBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridBaseInfo::InternalSwap(BigMapGridBaseInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(guild_info_, other->guild_info_);
  swap(kingwarrer_, other->kingwarrer_);
  swap(hurter_, other->hurter_);
  swap(kingwar_time_, other->kingwar_time_);
  swap(hurting_time_, other->hurting_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapGridBaseInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapLeaveMsg::InitAsDefaultInstance() {
  ::AFMsg::_BigMapLeaveMsg_default_instance_._instance.get_mutable()->owner_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void BigMapLeaveMsg::clear_owner() {
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) {
    delete owner_;
  }
  owner_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapLeaveMsg::kOwnerFieldNumber;
const int BigMapLeaveMsg::kOwnerNameFieldNumber;
const int BigMapLeaveMsg::kMsgDataFieldNumber;
const int BigMapLeaveMsg::kMsgTimeFieldNumber;
const int BigMapLeaveMsg::kOwnerLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapLeaveMsg::BigMapLeaveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapLeaveMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapLeaveMsg)
}
BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_name().size() > 0) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_data().size() > 0) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_owner()) {
    owner_ = new ::AFMsg::Ident(*from.owner_);
  } else {
    owner_ = NULL;
  }
  ::memcpy(&msg_time_, &from.msg_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_level_) -
    reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapLeaveMsg)
}

void BigMapLeaveMsg::SharedCtor() {
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_level_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(owner_level_));
  _cached_size_ = 0;
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapLeaveMsg)
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapLeaveMsg::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapLeaveMsg();
  return *internal_default_instance();
}


void BigMapLeaveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) {
    delete owner_;
  }
  owner_ = NULL;
  ::memset(&msg_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_level_) -
      reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  _internal_metadata_.Clear();
}

bool BigMapLeaveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapLeaveMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_name().data(), static_cast<int>(this->owner_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.BigMapLeaveMsg.owner_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_data().data(), static_cast<int>(this->msg_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.BigMapLeaveMsg.msg_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 owner_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapLeaveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapLeaveMsg)
  return false;
#undef DO_
}

void BigMapLeaveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident owner = 1;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *owner_, output);
  }

  // string owner_name = 2;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapLeaveMsg.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_name(), output);
  }

  // string msg_data = 3;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), static_cast<int>(this->msg_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapLeaveMsg.msg_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_data(), output);
  }

  // int32 msg_time = 4;
  if (this->msg_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // int32 owner_level = 5;
  if (this->owner_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapLeaveMsg)
}

::google::protobuf::uint8* BigMapLeaveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident owner = 1;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *owner_, deterministic, target);
  }

  // string owner_name = 2;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapLeaveMsg.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_name(), target);
  }

  // string msg_data = 3;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), static_cast<int>(this->msg_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.BigMapLeaveMsg.msg_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_data(), target);
  }

  // int32 msg_time = 4;
  if (this->msg_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_time(), target);
  }

  // int32 owner_level = 5;
  if (this->owner_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapLeaveMsg)
  return target;
}

size_t BigMapLeaveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapLeaveMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string owner_name = 2;
  if (this->owner_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_name());
  }

  // string msg_data = 3;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_data());
  }

  // .AFMsg.Ident owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // int32 msg_time = 4;
  if (this->msg_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_time());
  }

  // int32 owner_level = 5;
  if (this->owner_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapLeaveMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapLeaveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapLeaveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapLeaveMsg)
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_name().size() > 0) {

    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_owner()) {
    mutable_owner()->::AFMsg::Ident::MergeFrom(from.owner());
  }
  if (from.msg_time() != 0) {
    set_msg_time(from.msg_time());
  }
  if (from.owner_level() != 0) {
    set_owner_level(from.owner_level());
  }
}

void BigMapLeaveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  return true;
}

void BigMapLeaveMsg::Swap(BigMapLeaveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapLeaveMsg::InternalSwap(BigMapLeaveMsg* other) {
  using std::swap;
  owner_name_.Swap(&other->owner_name_);
  msg_data_.Swap(&other->msg_data_);
  swap(owner_, other->owner_);
  swap(msg_time_, other->msg_time_);
  swap(owner_level_, other->owner_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapLeaveMsg::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapWarHistory::InitAsDefaultInstance() {
  ::AFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->red_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(
      ::AFMsg::GridGuildBaseInfo::internal_default_instance());
  ::AFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->blue_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(
      ::AFMsg::GridGuildBaseInfo::internal_default_instance());
  ::AFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->winner_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void BigMapWarHistory::clear_winner_id() {
  if (GetArenaNoVirtual() == NULL && winner_id_ != NULL) {
    delete winner_id_;
  }
  winner_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapWarHistory::kRedInfoFieldNumber;
const int BigMapWarHistory::kBlueInfoFieldNumber;
const int BigMapWarHistory::kWinnerIdFieldNumber;
const int BigMapWarHistory::kWarTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapWarHistory::BigMapWarHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapWarHistory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapWarHistory)
}
BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_red_info()) {
    red_info_ = new ::AFMsg::GridGuildBaseInfo(*from.red_info_);
  } else {
    red_info_ = NULL;
  }
  if (from.has_blue_info()) {
    blue_info_ = new ::AFMsg::GridGuildBaseInfo(*from.blue_info_);
  } else {
    blue_info_ = NULL;
  }
  if (from.has_winner_id()) {
    winner_id_ = new ::AFMsg::Ident(*from.winner_id_);
  } else {
    winner_id_ = NULL;
  }
  war_time_ = from.war_time_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapWarHistory)
}

void BigMapWarHistory::SharedCtor() {
  ::memset(&red_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&war_time_) -
      reinterpret_cast<char*>(&red_info_)) + sizeof(war_time_));
  _cached_size_ = 0;
}

BigMapWarHistory::~BigMapWarHistory() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapWarHistory)
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != internal_default_instance()) delete red_info_;
  if (this != internal_default_instance()) delete blue_info_;
  if (this != internal_default_instance()) delete winner_id_;
}

void BigMapWarHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapWarHistory::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapWarHistory& BigMapWarHistory::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapWarHistory();
  return *internal_default_instance();
}


void BigMapWarHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && red_info_ != NULL) {
    delete red_info_;
  }
  red_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && blue_info_ != NULL) {
    delete blue_info_;
  }
  blue_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && winner_id_ != NULL) {
    delete winner_id_;
  }
  winner_id_ = NULL;
  war_time_ = 0;
  _internal_metadata_.Clear();
}

bool BigMapWarHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapWarHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.GridGuildBaseInfo red_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.GridGuildBaseInfo blue_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blue_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident winner_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_winner_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 war_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapWarHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapWarHistory)
  return false;
#undef DO_
}

void BigMapWarHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.GridGuildBaseInfo red_info = 1;
  if (this->has_red_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *red_info_, output);
  }

  // .AFMsg.GridGuildBaseInfo blue_info = 2;
  if (this->has_blue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *blue_info_, output);
  }

  // .AFMsg.Ident winner_id = 10;
  if (this->has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *winner_id_, output);
  }

  // int32 war_time = 11;
  if (this->war_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->war_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapWarHistory)
}

::google::protobuf::uint8* BigMapWarHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.GridGuildBaseInfo red_info = 1;
  if (this->has_red_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *red_info_, deterministic, target);
  }

  // .AFMsg.GridGuildBaseInfo blue_info = 2;
  if (this->has_blue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *blue_info_, deterministic, target);
  }

  // .AFMsg.Ident winner_id = 10;
  if (this->has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *winner_id_, deterministic, target);
  }

  // int32 war_time = 11;
  if (this->war_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->war_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapWarHistory)
  return target;
}

size_t BigMapWarHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapWarHistory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.GridGuildBaseInfo red_info = 1;
  if (this->has_red_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *red_info_);
  }

  // .AFMsg.GridGuildBaseInfo blue_info = 2;
  if (this->has_blue_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_info_);
  }

  // .AFMsg.Ident winner_id = 10;
  if (this->has_winner_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *winner_id_);
  }

  // int32 war_time = 11;
  if (this->war_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->war_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapWarHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapWarHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapWarHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapWarHistory)
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_red_info()) {
    mutable_red_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.red_info());
  }
  if (from.has_blue_info()) {
    mutable_blue_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.blue_info());
  }
  if (from.has_winner_id()) {
    mutable_winner_id()->::AFMsg::Ident::MergeFrom(from.winner_id());
  }
  if (from.war_time() != 0) {
    set_war_time(from.war_time());
  }
}

void BigMapWarHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  return true;
}

void BigMapWarHistory::Swap(BigMapWarHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapWarHistory::InternalSwap(BigMapWarHistory* other) {
  using std::swap;
  swap(red_info_, other->red_info_);
  swap(blue_info_, other->blue_info_);
  swap(winner_id_, other->winner_id_);
  swap(war_time_, other->war_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapWarHistory::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  ::AFMsg::_BigMapGridDetailInfo_default_instance_._instance.get_mutable()->grid_base_info_ = const_cast< ::AFMsg::BigMapGridBaseInfo*>(
      ::AFMsg::BigMapGridBaseInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridDetailInfo::kGridBaseInfoFieldNumber;
const int BigMapGridDetailInfo::kStayGuidListFieldNumber;
const int BigMapGridDetailInfo::kLeaveMsgFieldNumber;
const int BigMapGridDetailInfo::kWarHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridDetailInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapGridDetailInfo)
}
BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stay_guid_list_(from.stay_guid_list_),
      leave_msg_(from.leave_msg_),
      war_history_(from.war_history_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_grid_base_info()) {
    grid_base_info_ = new ::AFMsg::BigMapGridBaseInfo(*from.grid_base_info_);
  } else {
    grid_base_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapGridDetailInfo)
}

void BigMapGridDetailInfo::SharedCtor() {
  grid_base_info_ = NULL;
  _cached_size_ = 0;
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapGridDetailInfo)
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != internal_default_instance()) delete grid_base_info_;
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridDetailInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsBigMapGridDetailInfo();
  return *internal_default_instance();
}


void BigMapGridDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  if (GetArenaNoVirtual() == NULL && grid_base_info_ != NULL) {
    delete grid_base_info_;
  }
  grid_base_info_ = NULL;
  _internal_metadata_.Clear();
}

bool BigMapGridDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapGridDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stay_guid_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_leave_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.BigMapWarHistory war_history = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_war_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapGridDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapGridDetailInfo)
  return false;
#undef DO_
}

void BigMapGridDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (this->has_grid_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *grid_base_info_, output);
  }

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stay_guid_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stay_guid_list(static_cast<int>(i)),
      output);
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leave_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->leave_msg(static_cast<int>(i)),
      output);
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->war_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->war_history(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapGridDetailInfo)
}

::google::protobuf::uint8* BigMapGridDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (this->has_grid_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *grid_base_info_, deterministic, target);
  }

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stay_guid_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stay_guid_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leave_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->leave_msg(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->war_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->war_history(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapGridDetailInfo)
  return target;
}

size_t BigMapGridDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapGridDetailInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stay_guid_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stay_guid_list(static_cast<int>(i)));
    }
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->leave_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->leave_msg(static_cast<int>(i)));
    }
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->war_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->war_history(static_cast<int>(i)));
    }
  }

  // .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (this->has_grid_base_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *grid_base_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapGridDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapGridDetailInfo)
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from.has_grid_base_info()) {
    mutable_grid_base_info()->::AFMsg::BigMapGridBaseInfo::MergeFrom(from.grid_base_info());
  }
}

void BigMapGridDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  return true;
}

void BigMapGridDetailInfo::Swap(BigMapGridDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridDetailInfo::InternalSwap(BigMapGridDetailInfo* other) {
  using std::swap;
  CastToBase(&stay_guid_list_)->InternalSwap(CastToBase(&other->stay_guid_list_));
  CastToBase(&leave_msg_)->InternalSwap(CastToBase(&other->leave_msg_));
  CastToBase(&war_history_)->InternalSwap(CastToBase(&other->war_history_));
  swap(grid_base_info_, other->grid_base_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapGridDetailInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckBigMapGridInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapGridInfo::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapGridInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckBigMapGridInfo)
}
AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_data_(from.map_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckBigMapGridInfo)
}

void AckBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckBigMapGridInfo)
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapGridInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapGridInfo();
  return *internal_default_instance();
}


void AckBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  _internal_metadata_.Clear();
}

bool AckBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckBigMapGridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckBigMapGridInfo)
  return false;
#undef DO_
}

void AckBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckBigMapGridInfo)
}

::google::protobuf::uint8* AckBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckBigMapGridInfo)
  return target;
}

size_t AckBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckBigMapGridInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapGridInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckBigMapGridInfo)
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
}

void AckBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {
  return true;
}

void AckBigMapGridInfo::Swap(AckBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapGridInfo::InternalSwap(AckBigMapGridInfo* other) {
  using std::swap;
  CastToBase(&map_data_)->InternalSwap(CastToBase(&other->map_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckBigMapGridInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqBigMapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapInfo::ReqBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqBigMapInfo)
}
ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqBigMapInfo)
}

void ReqBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
}

ReqBigMapInfo::~ReqBigMapInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqBigMapInfo)
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqBigMapInfo();
  return *internal_default_instance();
}


void ReqBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReqBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqBigMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqBigMapInfo)
  return false;
#undef DO_
}

void ReqBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqBigMapInfo)
}

::google::protobuf::uint8* ReqBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqBigMapInfo)
  return target;
}

size_t ReqBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqBigMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqBigMapInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {
  return true;
}

void ReqBigMapInfo::Swap(ReqBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapInfo::InternalSwap(ReqBigMapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBigMapInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckBigMapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapInfo::kGridBaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapInfo::AckBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckBigMapInfo)
}
AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      grid_base_info_(from.grid_base_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckBigMapInfo)
}

void AckBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
}

AckBigMapInfo::~AckBigMapInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckBigMapInfo)
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
}

void AckBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckBigMapInfo& AckBigMapInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckBigMapInfo();
  return *internal_default_instance();
}


void AckBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_base_info_.Clear();
  _internal_metadata_.Clear();
}

bool AckBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckBigMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckBigMapInfo)
  return false;
#undef DO_
}

void AckBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_base_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->grid_base_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckBigMapInfo)
}

::google::protobuf::uint8* AckBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_base_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->grid_base_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckBigMapInfo)
  return target;
}

size_t AckBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckBigMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->grid_base_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->grid_base_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckBigMapInfo)
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grid_base_info_.MergeFrom(from.grid_base_info_);
}

void AckBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {
  return true;
}

void AckBigMapInfo::Swap(AckBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapInfo::InternalSwap(AckBigMapInfo* other) {
  using std::swap;
  CastToBase(&grid_base_info_)->InternalSwap(CastToBase(&other->grid_base_info_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckBigMapInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHoldMapGrid::InitAsDefaultInstance() {
  ::AFMsg::_ReqHoldMapGrid_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqHoldMapGrid::clear_guild_id() {
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoldMapGrid::kMapTitleIdFieldNumber;
const int ReqHoldMapGrid::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoldMapGrid::ReqHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoldMapGrid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHoldMapGrid)
}
ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_title_id().size() > 0) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::AFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHoldMapGrid)
}

void ReqHoldMapGrid::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
  _cached_size_ = 0;
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHoldMapGrid)
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoldMapGrid::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqHoldMapGrid();
  return *internal_default_instance();
}


void ReqHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && guild_id_ != NULL) {
    delete guild_id_;
  }
  guild_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHoldMapGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqHoldMapGrid.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHoldMapGrid)
  return false;
#undef DO_
}

void ReqHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqHoldMapGrid.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_title_id(), output);
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *guild_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHoldMapGrid)
}

::google::protobuf::uint8* ReqHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqHoldMapGrid.map_title_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_title_id(), target);
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *guild_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHoldMapGrid)
  return target;
}

size_t ReqHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHoldMapGrid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_title_id());
  }

  // .AFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHoldMapGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHoldMapGrid)
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_guild_id()) {
    mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  return true;
}

void ReqHoldMapGrid::Swap(ReqHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoldMapGrid::InternalSwap(ReqHoldMapGrid* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_);
  swap(guild_id_, other->guild_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHoldMapGrid::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckHoldMapGrid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoldMapGrid::AckHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoldMapGrid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckHoldMapGrid)
}
AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckHoldMapGrid)
}

void AckHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
}

AckHoldMapGrid::~AckHoldMapGrid() {
  // @@protoc_insertion_point(destructor:AFMsg.AckHoldMapGrid)
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoldMapGrid::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckHoldMapGrid();
  return *internal_default_instance();
}


void AckHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AckHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckHoldMapGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckHoldMapGrid)
  return false;
#undef DO_
}

void AckHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckHoldMapGrid)
}

::google::protobuf::uint8* AckHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckHoldMapGrid)
  return target;
}

size_t AckHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckHoldMapGrid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHoldMapGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckHoldMapGrid)
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {
  return true;
}

void AckHoldMapGrid::Swap(AckHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoldMapGrid::InternalSwap(AckHoldMapGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckHoldMapGrid::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  ::AFMsg::_ReqLeaveMapMsg_default_instance_._instance.get_mutable()->leave_msg_ = const_cast< ::AFMsg::BigMapLeaveMsg*>(
      ::AFMsg::BigMapLeaveMsg::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveMapMsg::kMapTitleIdFieldNumber;
const int ReqLeaveMapMsg::kLeaveMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveMapMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqLeaveMapMsg)
}
ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_title_id().size() > 0) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_leave_msg()) {
    leave_msg_ = new ::AFMsg::BigMapLeaveMsg(*from.leave_msg_);
  } else {
    leave_msg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqLeaveMapMsg)
}

void ReqLeaveMapMsg::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leave_msg_ = NULL;
  _cached_size_ = 0;
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqLeaveMapMsg)
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leave_msg_;
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveMapMsg::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqLeaveMapMsg();
  return *internal_default_instance();
}


void ReqLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && leave_msg_ != NULL) {
    delete leave_msg_;
  }
  leave_msg_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqLeaveMapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqLeaveMapMsg.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leave_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqLeaveMapMsg)
  return false;
#undef DO_
}

void ReqLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqLeaveMapMsg.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_title_id(), output);
  }

  // .AFMsg.BigMapLeaveMsg leave_msg = 2;
  if (this->has_leave_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *leave_msg_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqLeaveMapMsg)
}

::google::protobuf::uint8* ReqLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqLeaveMapMsg.map_title_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_title_id(), target);
  }

  // .AFMsg.BigMapLeaveMsg leave_msg = 2;
  if (this->has_leave_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *leave_msg_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqLeaveMapMsg)
  return target;
}

size_t ReqLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqLeaveMapMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_title_id());
  }

  // .AFMsg.BigMapLeaveMsg leave_msg = 2;
  if (this->has_leave_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leave_msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveMapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqLeaveMapMsg)
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_leave_msg()) {
    mutable_leave_msg()->::AFMsg::BigMapLeaveMsg::MergeFrom(from.leave_msg());
  }
}

void ReqLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  return true;
}

void ReqLeaveMapMsg::Swap(ReqLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveMapMsg::InternalSwap(ReqLeaveMapMsg* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_);
  swap(leave_msg_, other->leave_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveMapMsg::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLeaveMapMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckLeaveMapMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckLeaveMapMsg)
}
AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckLeaveMapMsg)
}

void AckLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.AckLeaveMapMsg)
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLeaveMapMsg::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckLeaveMapMsg();
  return *internal_default_instance();
}


void AckLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AckLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckLeaveMapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckLeaveMapMsg)
  return false;
#undef DO_
}

void AckLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckLeaveMapMsg)
}

::google::protobuf::uint8* AckLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckLeaveMapMsg)
  return target;
}

size_t AckLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckLeaveMapMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLeaveMapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckLeaveMapMsg)
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {
  return true;
}

void AckLeaveMapMsg::Swap(AckLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLeaveMapMsg::InternalSwap(AckLeaveMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLeaveMapMsg::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqGetMapAward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetMapAward::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetMapAward::ReqGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGetMapAward();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqGetMapAward)
}
ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_title_id().size() > 0) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqGetMapAward)
}

void ReqGetMapAward::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqGetMapAward::~ReqGetMapAward() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqGetMapAward)
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMapAward::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqGetMapAward& ReqGetMapAward::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqGetMapAward();
  return *internal_default_instance();
}


void ReqGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqGetMapAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqGetMapAward.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqGetMapAward)
  return false;
#undef DO_
}

void ReqGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqGetMapAward.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_title_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqGetMapAward)
}

::google::protobuf::uint8* ReqGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqGetMapAward.map_title_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_title_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqGetMapAward)
  return target;
}

size_t ReqGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqGetMapAward)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_title_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetMapAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqGetMapAward)
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  return true;
}

void ReqGetMapAward::Swap(ReqGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetMapAward::InternalSwap(ReqGetMapAward* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGetMapAward::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckGetMapAward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckGetMapAward::AckGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGetMapAward();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckGetMapAward)
}
AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckGetMapAward)
}

void AckGetMapAward::SharedCtor() {
  _cached_size_ = 0;
}

AckGetMapAward::~AckGetMapAward() {
  // @@protoc_insertion_point(destructor:AFMsg.AckGetMapAward)
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
}

void AckGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetMapAward::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckGetMapAward& AckGetMapAward::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckGetMapAward();
  return *internal_default_instance();
}


void AckGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AckGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckGetMapAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckGetMapAward)
  return false;
#undef DO_
}

void AckGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckGetMapAward)
}

::google::protobuf::uint8* AckGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckGetMapAward)
  return target;
}

size_t AckGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckGetMapAward)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetMapAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckGetMapAward)
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {
  return true;
}

void AckGetMapAward::Swap(AckGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckGetMapAward::InternalSwap(AckGetMapAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckGetMapAward::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMapHunting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapHunting::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapHunting::ReqMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapHunting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMapHunting)
}
ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_title_id().size() > 0) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMapHunting)
}

void ReqMapHunting::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqMapHunting::~ReqMapHunting() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMapHunting)
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapHunting::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMapHunting& ReqMapHunting::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapHunting();
  return *internal_default_instance();
}


void ReqMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMapHunting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqMapHunting.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMapHunting)
  return false;
#undef DO_
}

void ReqMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqMapHunting.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_title_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMapHunting)
}

::google::protobuf::uint8* ReqMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqMapHunting.map_title_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_title_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMapHunting)
  return target;
}

size_t ReqMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMapHunting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_title_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapHunting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMapHunting)
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  return true;
}

void ReqMapHunting::Swap(ReqMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapHunting::InternalSwap(ReqMapHunting* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMapHunting::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckMapHunting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapHunting::AckMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapHunting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckMapHunting)
}
AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckMapHunting)
}

void AckMapHunting::SharedCtor() {
  _cached_size_ = 0;
}

AckMapHunting::~AckMapHunting() {
  // @@protoc_insertion_point(destructor:AFMsg.AckMapHunting)
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
}

void AckMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapHunting::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckMapHunting& AckMapHunting::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapHunting();
  return *internal_default_instance();
}


void AckMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AckMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckMapHunting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckMapHunting)
  return false;
#undef DO_
}

void AckMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckMapHunting)
}

::google::protobuf::uint8* AckMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckMapHunting)
  return target;
}

size_t AckMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckMapHunting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapHunting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckMapHunting)
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {
  return true;
}

void AckMapHunting::Swap(AckMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapHunting::InternalSwap(AckMapHunting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckMapHunting::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMapKingWar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapKingWar::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapKingWar::ReqMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapKingWar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMapKingWar)
}
ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_title_id().size() > 0) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMapKingWar)
}

void ReqMapKingWar::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqMapKingWar::~ReqMapKingWar() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMapKingWar)
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapKingWar::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMapKingWar& ReqMapKingWar::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqMapKingWar();
  return *internal_default_instance();
}


void ReqMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMapKingWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_title_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AFMsg.ReqMapKingWar.map_title_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMapKingWar)
  return false;
#undef DO_
}

void ReqMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqMapKingWar.map_title_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_title_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMapKingWar)
}

::google::protobuf::uint8* ReqMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_title_id().data(), static_cast<int>(this->map_title_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AFMsg.ReqMapKingWar.map_title_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_title_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMapKingWar)
  return target;
}

size_t ReqMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMapKingWar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_title_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapKingWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMapKingWar)
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  return true;
}

void ReqMapKingWar::Swap(ReqMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapKingWar::InternalSwap(ReqMapKingWar* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMapKingWar::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckMapKingWar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapKingWar::AckMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapKingWar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckMapKingWar)
}
AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckMapKingWar)
}

void AckMapKingWar::SharedCtor() {
  _cached_size_ = 0;
}

AckMapKingWar::~AckMapKingWar() {
  // @@protoc_insertion_point(destructor:AFMsg.AckMapKingWar)
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
}

void AckMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapKingWar::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckMapKingWar& AckMapKingWar::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckMapKingWar();
  return *internal_default_instance();
}


void AckMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AckMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckMapKingWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckMapKingWar)
  return false;
#undef DO_
}

void AckMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckMapKingWar)
}

::google::protobuf::uint8* AckMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckMapKingWar)
  return target;
}

size_t AckMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckMapKingWar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapKingWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckMapKingWar)
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {
  return true;
}

void AckMapKingWar::Swap(AckMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapKingWar::InternalSwap(AckMapKingWar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckMapKingWar::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPRoomInfo::InitAsDefaultInstance() {
  ::AFMsg::_PVPRoomInfo_default_instance_._instance.get_mutable()->roomid_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void PVPRoomInfo::clear_roomid() {
  if (GetArenaNoVirtual() == NULL && roomid_ != NULL) {
    delete roomid_;
  }
  roomid_ = NULL;
}
void PVPRoomInfo::clear_xredplayer() {
  xredplayer_.Clear();
}
void PVPRoomInfo::clear_xblueplayer() {
  xblueplayer_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRoomInfo::kNCellStatusFieldNumber;
const int PVPRoomInfo::kRoomIDFieldNumber;
const int PVPRoomInfo::kNPVPModeFieldNumber;
const int PVPRoomInfo::kNPVPGradeFieldNumber;
const int PVPRoomInfo::kMaxPalyerFieldNumber;
const int PVPRoomInfo::kXRedPlayerFieldNumber;
const int PVPRoomInfo::kXBluePlayerFieldNumber;
const int PVPRoomInfo::kServeridFieldNumber;
const int PVPRoomInfo::kSceneIDFieldNumber;
const int PVPRoomInfo::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRoomInfo::PVPRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.PVPRoomInfo)
}
PVPRoomInfo::PVPRoomInfo(const PVPRoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      xredplayer_(from.xredplayer_),
      xblueplayer_(from.xblueplayer_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roomid()) {
    roomid_ = new ::AFMsg::Ident(*from.roomid_);
  } else {
    roomid_ = NULL;
  }
  ::memcpy(&ncellstatus_, &from.ncellstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&ncellstatus_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.PVPRoomInfo)
}

void PVPRoomInfo::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(groupid_));
  _cached_size_ = 0;
}

PVPRoomInfo::~PVPRoomInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.PVPRoomInfo)
  SharedDtor();
}

void PVPRoomInfo::SharedDtor() {
  if (this != internal_default_instance()) delete roomid_;
}

void PVPRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPRoomInfo::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRoomInfo& PVPRoomInfo::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsPVPRoomInfo();
  return *internal_default_instance();
}


void PVPRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xredplayer_.Clear();
  xblueplayer_.Clear();
  if (GetArenaNoVirtual() == NULL && roomid_ != NULL) {
    delete roomid_;
  }
  roomid_ = NULL;
  ::memset(&ncellstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&ncellstatus_)) + sizeof(groupid_));
  _internal_metadata_.Clear();
}

bool PVPRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.PVPRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nCellStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncellstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident RoomID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nPVPMode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nPVPGrade = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxPalyer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpalyer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident xRedPlayer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xredplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AFMsg.Ident xBluePlayer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xblueplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 serverid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SceneID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 groupID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.PVPRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.PVPRoomInfo)
  return false;
#undef DO_
}

void PVPRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCellStatus = 1;
  if (this->ncellstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncellstatus(), output);
  }

  // .AFMsg.Ident RoomID = 2;
  if (this->has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *roomid_, output);
  }

  // int32 nPVPMode = 3;
  if (this->npvpmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npvpmode(), output);
  }

  // int32 nPVPGrade = 4;
  if (this->npvpgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npvpgrade(), output);
  }

  // int32 MaxPalyer = 5;
  if (this->maxpalyer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpalyer(), output);
  }

  // repeated .AFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xredplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->xredplayer(static_cast<int>(i)),
      output);
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xblueplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->xblueplayer(static_cast<int>(i)),
      output);
  }

  // int64 serverid = 8;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serverid(), output);
  }

  // int64 SceneID = 9;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sceneid(), output);
  }

  // int64 groupID = 10;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->groupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.PVPRoomInfo)
}

::google::protobuf::uint8* PVPRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCellStatus = 1;
  if (this->ncellstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncellstatus(), target);
  }

  // .AFMsg.Ident RoomID = 2;
  if (this->has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *roomid_, deterministic, target);
  }

  // int32 nPVPMode = 3;
  if (this->npvpmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npvpmode(), target);
  }

  // int32 nPVPGrade = 4;
  if (this->npvpgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npvpgrade(), target);
  }

  // int32 MaxPalyer = 5;
  if (this->maxpalyer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpalyer(), target);
  }

  // repeated .AFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xredplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->xredplayer(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xblueplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->xblueplayer(static_cast<int>(i)), deterministic, target);
  }

  // int64 serverid = 8;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serverid(), target);
  }

  // int64 SceneID = 9;
  if (this->sceneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sceneid(), target);
  }

  // int64 groupID = 10;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->groupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.PVPRoomInfo)
  return target;
}

size_t PVPRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.PVPRoomInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .AFMsg.Ident xRedPlayer = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->xredplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xredplayer(static_cast<int>(i)));
    }
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->xblueplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xblueplayer(static_cast<int>(i)));
    }
  }

  // .AFMsg.Ident RoomID = 2;
  if (this->has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roomid_);
  }

  // int32 nCellStatus = 1;
  if (this->ncellstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncellstatus());
  }

  // int32 nPVPMode = 3;
  if (this->npvpmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  // int32 nPVPGrade = 4;
  if (this->npvpgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpgrade());
  }

  // int32 MaxPalyer = 5;
  if (this->maxpalyer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxpalyer());
  }

  // int64 serverid = 8;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serverid());
  }

  // int64 SceneID = 9;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());
  }

  // int64 groupID = 10;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.PVPRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.PVPRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.PVPRoomInfo)
    MergeFrom(*source);
  }
}

void PVPRoomInfo::MergeFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.PVPRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xredplayer_.MergeFrom(from.xredplayer_);
  xblueplayer_.MergeFrom(from.xblueplayer_);
  if (from.has_roomid()) {
    mutable_roomid()->::AFMsg::Ident::MergeFrom(from.roomid());
  }
  if (from.ncellstatus() != 0) {
    set_ncellstatus(from.ncellstatus());
  }
  if (from.npvpmode() != 0) {
    set_npvpmode(from.npvpmode());
  }
  if (from.npvpgrade() != 0) {
    set_npvpgrade(from.npvpgrade());
  }
  if (from.maxpalyer() != 0) {
    set_maxpalyer(from.maxpalyer());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void PVPRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRoomInfo::CopyFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRoomInfo::IsInitialized() const {
  return true;
}

void PVPRoomInfo::Swap(PVPRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVPRoomInfo::InternalSwap(PVPRoomInfo* other) {
  using std::swap;
  CastToBase(&xredplayer_)->InternalSwap(CastToBase(&other->xredplayer_));
  CastToBase(&xblueplayer_)->InternalSwap(CastToBase(&other->xblueplayer_));
  swap(roomid_, other->roomid_);
  swap(ncellstatus_, other->ncellstatus_);
  swap(npvpmode_, other->npvpmode_);
  swap(npvpgrade_, other->npvpgrade_);
  swap(maxpalyer_, other->maxpalyer_);
  swap(serverid_, other->serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PVPRoomInfo::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPVPApplyMatch::InitAsDefaultInstance() {
  ::AFMsg::_ReqPVPApplyMatch_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqPVPApplyMatch_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
}
void ReqPVPApplyMatch::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
void ReqPVPApplyMatch::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPVPApplyMatch::kSelfIdFieldNumber;
const int ReqPVPApplyMatch::kNPVPModeFieldNumber;
const int ReqPVPApplyMatch::kScoreFieldNumber;
const int ReqPVPApplyMatch::kApplyTypeFieldNumber;
const int ReqPVPApplyMatch::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPVPApplyMatch::ReqPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPVPApplyMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqPVPApplyMatch)
}
ReqPVPApplyMatch::ReqPVPApplyMatch(const ReqPVPApplyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_team_id()) {
    team_id_ = new ::AFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&applytype_) -
    reinterpret_cast<char*>(&score_)) + sizeof(applytype_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqPVPApplyMatch)
}

void ReqPVPApplyMatch::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytype_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(applytype_));
  _cached_size_ = 0;
}

ReqPVPApplyMatch::~ReqPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqPVPApplyMatch)
  SharedDtor();
}

void ReqPVPApplyMatch::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete team_id_;
}

void ReqPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPVPApplyMatch::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPVPApplyMatch& ReqPVPApplyMatch::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqPVPApplyMatch();
  return *internal_default_instance();
}


void ReqPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytype_) -
      reinterpret_cast<char*>(&score_)) + sizeof(applytype_));
  _internal_metadata_.Clear();
}

bool ReqPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqPVPApplyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nPVPMode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ApplyType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.Ident team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqPVPApplyMatch)
  return false;
#undef DO_
}

void ReqPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *self_id_, output);
  }

  // int32 nPVPMode = 2;
  if (this->npvpmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npvpmode(), output);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // int32 ApplyType = 4;
  if (this->applytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->applytype(), output);
  }

  // .AFMsg.Ident team_id = 5;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *team_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqPVPApplyMatch)
}

::google::protobuf::uint8* ReqPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *self_id_, deterministic, target);
  }

  // int32 nPVPMode = 2;
  if (this->npvpmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npvpmode(), target);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // int32 ApplyType = 4;
  if (this->applytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->applytype(), target);
  }

  // .AFMsg.Ident team_id = 5;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *team_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqPVPApplyMatch)
  return target;
}

size_t ReqPVPApplyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqPVPApplyMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .AFMsg.Ident team_id = 5;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // int32 nPVPMode = 2;
  if (this->npvpmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  // int32 ApplyType = 4;
  if (this->applytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPVPApplyMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqPVPApplyMatch)
    MergeFrom(*source);
  }
}

void ReqPVPApplyMatch::MergeFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_team_id()) {
    mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.npvpmode() != 0) {
    set_npvpmode(from.npvpmode());
  }
  if (from.applytype() != 0) {
    set_applytype(from.applytype());
  }
}

void ReqPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPVPApplyMatch::CopyFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPVPApplyMatch::IsInitialized() const {
  return true;
}

void ReqPVPApplyMatch::Swap(ReqPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPVPApplyMatch::InternalSwap(ReqPVPApplyMatch* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(team_id_, other->team_id_);
  swap(score_, other->score_);
  swap(npvpmode_, other->npvpmode_);
  swap(applytype_, other->applytype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPVPApplyMatch::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPVPApplyMatch::InitAsDefaultInstance() {
  ::AFMsg::_AckPVPApplyMatch_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckPVPApplyMatch_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(
      ::AFMsg::PVPRoomInfo::internal_default_instance());
}
void AckPVPApplyMatch::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPVPApplyMatch::kSelfIdFieldNumber;
const int AckPVPApplyMatch::kXRoomInfoFieldNumber;
const int AckPVPApplyMatch::kApplyTypeFieldNumber;
const int AckPVPApplyMatch::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPVPApplyMatch::AckPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPVPApplyMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPVPApplyMatch)
}
AckPVPApplyMatch::AckPVPApplyMatch(const AckPVPApplyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  ::memcpy(&applytype_, &from.applytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&nresult_) -
    reinterpret_cast<char*>(&applytype_)) + sizeof(nresult_));
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPVPApplyMatch)
}

void AckPVPApplyMatch::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(nresult_));
  _cached_size_ = 0;
}

AckPVPApplyMatch::~AckPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPVPApplyMatch)
  SharedDtor();
}

void AckPVPApplyMatch::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void AckPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPVPApplyMatch::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPVPApplyMatch& AckPVPApplyMatch::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckPVPApplyMatch();
  return *internal_default_instance();
}


void AckPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
  ::memset(&applytype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&applytype_)) + sizeof(nresult_));
  _internal_metadata_.Clear();
}

bool AckPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPVPApplyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ApplyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nResult = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPVPApplyMatch)
  return false;
#undef DO_
}

void AckPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *self_id_, output);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xroominfo_, output);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  // int32 nResult = 4;
  if (this->nresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nresult(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPVPApplyMatch)
}

::google::protobuf::uint8* AckPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *self_id_, deterministic, target);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xroominfo_, deterministic, target);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  // int32 nResult = 4;
  if (this->nresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nresult(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPVPApplyMatch)
  return target;
}

size_t AckPVPApplyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPVPApplyMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  // int32 nResult = 4;
  if (this->nresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPVPApplyMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPVPApplyMatch)
    MergeFrom(*source);
  }
}

void AckPVPApplyMatch::MergeFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_xroominfo()) {
    mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
  }
  if (from.applytype() != 0) {
    set_applytype(from.applytype());
  }
  if (from.nresult() != 0) {
    set_nresult(from.nresult());
  }
}

void AckPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPVPApplyMatch::CopyFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPVPApplyMatch::IsInitialized() const {
  return true;
}

void AckPVPApplyMatch::Swap(AckPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPVPApplyMatch::InternalSwap(AckPVPApplyMatch* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  swap(applytype_, other->applytype_);
  swap(nresult_, other->nresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPVPApplyMatch::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCreatePVPEctype::InitAsDefaultInstance() {
  ::AFMsg::_ReqCreatePVPEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_ReqCreatePVPEctype_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(
      ::AFMsg::PVPRoomInfo::internal_default_instance());
}
void ReqCreatePVPEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreatePVPEctype::kSelfIdFieldNumber;
const int ReqCreatePVPEctype::kXRoomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreatePVPEctype::ReqCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCreatePVPEctype();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCreatePVPEctype)
}
ReqCreatePVPEctype::ReqCreatePVPEctype(const ReqCreatePVPEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCreatePVPEctype)
}

void ReqCreatePVPEctype::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xroominfo_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(xroominfo_));
  _cached_size_ = 0;
}

ReqCreatePVPEctype::~ReqCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCreatePVPEctype)
  SharedDtor();
}

void ReqCreatePVPEctype::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void ReqCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreatePVPEctype::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCreatePVPEctype& ReqCreatePVPEctype::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsReqCreatePVPEctype();
  return *internal_default_instance();
}


void ReqCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCreatePVPEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCreatePVPEctype)
  return false;
#undef DO_
}

void ReqCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *self_id_, output);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xroominfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCreatePVPEctype)
}

::google::protobuf::uint8* ReqCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *self_id_, deterministic, target);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xroominfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCreatePVPEctype)
  return target;
}

size_t ReqCreatePVPEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCreatePVPEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreatePVPEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCreatePVPEctype)
    MergeFrom(*source);
  }
}

void ReqCreatePVPEctype::MergeFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_xroominfo()) {
    mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
  }
}

void ReqCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreatePVPEctype::CopyFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreatePVPEctype::IsInitialized() const {
  return true;
}

void ReqCreatePVPEctype::Swap(ReqCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreatePVPEctype::InternalSwap(ReqCreatePVPEctype* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreatePVPEctype::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckCreatePVPEctype::InitAsDefaultInstance() {
  ::AFMsg::_AckCreatePVPEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::AFMsg::Ident*>(
      ::AFMsg::Ident::internal_default_instance());
  ::AFMsg::_AckCreatePVPEctype_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(
      ::AFMsg::PVPRoomInfo::internal_default_instance());
}
void AckCreatePVPEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckCreatePVPEctype::kSelfIdFieldNumber;
const int AckCreatePVPEctype::kXRoomInfoFieldNumber;
const int AckCreatePVPEctype::kApplyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckCreatePVPEctype::AckCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AFMsgShare_2eproto::InitDefaultsAckCreatePVPEctype();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckCreatePVPEctype)
}
AckCreatePVPEctype::AckCreatePVPEctype(const AckCreatePVPEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::AFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  applytype_ = from.applytype_;
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckCreatePVPEctype)
}

void AckCreatePVPEctype::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytype_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(applytype_));
  _cached_size_ = 0;
}

AckCreatePVPEctype::~AckCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.AckCreatePVPEctype)
  SharedDtor();
}

void AckCreatePVPEctype::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void AckCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCreatePVPEctype::descriptor() {
  ::protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckCreatePVPEctype& AckCreatePVPEctype::default_instance() {
  ::protobuf_AFMsgShare_2eproto::InitDefaultsAckCreatePVPEctype();
  return *internal_default_instance();
}


void AckCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xroominfo_ != NULL) {
    delete xroominfo_;
  }
  xroominfo_ = NULL;
  applytype_ = 0;
  _internal_metadata_.Clear();
}

bool AckCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckCreatePVPEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ApplyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckCreatePVPEctype)
  return false;
#undef DO_
}

void AckCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *self_id_, output);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *xroominfo_, output);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckCreatePVPEctype)
}

::google::protobuf::uint8* AckCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *self_id_, deterministic, target);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *xroominfo_, deterministic, target);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckCreatePVPEctype)
  return target;
}

size_t AckCreatePVPEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckCreatePVPEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .AFMsg.Ident self_id = 1;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (this->has_xroominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  // int32 ApplyType = 3;
  if (this->applytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreatePVPEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckCreatePVPEctype)
    MergeFrom(*source);
  }
}

void AckCreatePVPEctype::MergeFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_self_id()) {
    mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_xroominfo()) {
    mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
  }
  if (from.applytype() != 0) {
    set_applytype(from.applytype());
  }
}

void AckCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreatePVPEctype::CopyFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreatePVPEctype::IsInitialized() const {
  return true;
}

void AckCreatePVPEctype::Swap(AckCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckCreatePVPEctype::InternalSwap(AckCreatePVPEctype* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  swap(applytype_, other->applytype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckCreatePVPEctype::GetMetadata() const {
  protobuf_AFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqEnterGameServer* Arena::Create< ::AFMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqEnterGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqHeartBeat* Arena::Create< ::AFMsg::ReqHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqHeartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqLeaveGameServer* Arena::Create< ::AFMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqLeaveGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::PlayerEntryInfo* Arena::Create< ::AFMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::PlayerEntryInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckPlayerEntryList* Arena::Create< ::AFMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckPlayerEntryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckPlayerLeaveList* Arena::Create< ::AFMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckPlayerLeaveList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckSynData* Arena::Create< ::AFMsg::ReqAckSynData >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckSynData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckPlayerMove* Arena::Create< ::AFMsg::ReqAckPlayerMove >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckPlayerMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ChatContainer* Arena::Create< ::AFMsg::ChatContainer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ChatContainer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckPlayerChat* Arena::Create< ::AFMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckPlayerChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::EffectData* Arena::Create< ::AFMsg::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::EffectData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckUseSkill* Arena::Create< ::AFMsg::ReqAckUseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckUseSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckUseItem* Arena::Create< ::AFMsg::ReqAckUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckUseItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckSwapScene* Arena::Create< ::AFMsg::ReqAckSwapScene >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckSwapScene >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ItemStruct* Arena::Create< ::AFMsg::ItemStruct >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ItemStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::CurrencyStruct* Arena::Create< ::AFMsg::CurrencyStruct >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::CurrencyStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckEndBattle* Arena::Create< ::AFMsg::ReqAckEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckEndBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqPickDropItem* Arena::Create< ::AFMsg::ReqPickDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqPickDropItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAcceptTask* Arena::Create< ::AFMsg::ReqAcceptTask >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAcceptTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqCompeleteTask* Arena::Create< ::AFMsg::ReqCompeleteTask >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqCompeleteTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckJoinActivity* Arena::Create< ::AFMsg::ReqAckJoinActivity >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckJoinActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckSearchOppnent* Arena::Create< ::AFMsg::ReqAckSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckSearchOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckBattleOppnent* Arena::Create< ::AFMsg::ReqAckBattleOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckBattleOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckCreateGuild* Arena::Create< ::AFMsg::ReqAckCreateGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckCreateGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSearchGuild* Arena::Create< ::AFMsg::ReqSearchGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSearchGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckSearchGuild_SearchGuildObject* Arena::Create< ::AFMsg::AckSearchGuild_SearchGuildObject >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckSearchGuild_SearchGuildObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckSearchGuild* Arena::Create< ::AFMsg::AckSearchGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckSearchGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckJoinGuild* Arena::Create< ::AFMsg::ReqAckJoinGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckJoinGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckLeaveGuild* Arena::Create< ::AFMsg::ReqAckLeaveGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckLeaveGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckOprGuildMember* Arena::Create< ::AFMsg::ReqAckOprGuildMember >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckOprGuildMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckOprGuild* Arena::Create< ::AFMsg::ReqAckOprGuild >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckOprGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckDonateGuildItem* Arena::Create< ::AFMsg::ReqAckDonateGuildItem >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckDonateGuildItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqGuildEctypeInfo* Arena::Create< ::AFMsg::ReqGuildEctypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqGuildEctypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::GuildEctypeInfo* Arena::Create< ::AFMsg::GuildEctypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::GuildEctypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckGuildEctypeInfo* Arena::Create< ::AFMsg::AckGuildEctypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckGuildEctypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::SetGuildEctypeInfo* Arena::Create< ::AFMsg::SetGuildEctypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::SetGuildEctypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqEnterGuildEctype* Arena::Create< ::AFMsg::ReqEnterGuildEctype >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqEnterGuildEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ChatInfo* Arena::Create< ::AFMsg::ChatInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ChatInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckCreateChatGroup* Arena::Create< ::AFMsg::ReqAckCreateChatGroup >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckCreateChatGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckjoinChatGroup* Arena::Create< ::AFMsg::ReqAckjoinChatGroup >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckjoinChatGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckQuitChatGroup* Arena::Create< ::AFMsg::ReqAckQuitChatGroup >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckQuitChatGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSubscriptionChatGroup* Arena::Create< ::AFMsg::ReqSubscriptionChatGroup >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSubscriptionChatGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqCancelSubscriptionChatGroup* Arena::Create< ::AFMsg::ReqCancelSubscriptionChatGroup >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqCancelSubscriptionChatGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqIntensifylevelToEquip* Arena::Create< ::AFMsg::ReqIntensifylevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqIntensifylevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckIntensifylevelToEquip* Arena::Create< ::AFMsg::AckIntensifylevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckIntensifylevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqHoleToEquip* Arena::Create< ::AFMsg::ReqHoleToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqHoleToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckHoleToEquip* Arena::Create< ::AFMsg::AckHoleToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckHoleToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqInlaystoneToEquip* Arena::Create< ::AFMsg::ReqInlaystoneToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqInlaystoneToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckInlaystoneToEquip* Arena::Create< ::AFMsg::AckInlaystoneToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckInlaystoneToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqElementlevelToEquip* Arena::Create< ::AFMsg::ReqElementlevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqElementlevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckElementlevelToEquip* Arena::Create< ::AFMsg::AckElementlevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckElementlevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSetFightHero* Arena::Create< ::AFMsg::ReqSetFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSetFightHero >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqWearEquip* Arena::Create< ::AFMsg::ReqWearEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqWearEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::TakeOffEquip* Arena::Create< ::AFMsg::TakeOffEquip >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::TakeOffEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqMiningTitle* Arena::Create< ::AFMsg::ReqMiningTitle >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqMiningTitle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSendMail* Arena::Create< ::AFMsg::ReqSendMail >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSendMail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqSwitchServer* Arena::Create< ::AFMsg::ReqSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqSwitchServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckSwitchServer* Arena::Create< ::AFMsg::AckSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckSwitchServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::TeamInfo* Arena::Create< ::AFMsg::TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::TeammemberInfo* Arena::Create< ::AFMsg::TeammemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::TeammemberInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckCreateTeam* Arena::Create< ::AFMsg::ReqAckCreateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckCreateTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckJoinTeam* Arena::Create< ::AFMsg::ReqAckJoinTeam >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckJoinTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckLeaveTeam* Arena::Create< ::AFMsg::ReqAckLeaveTeam >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckLeaveTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckOprTeamMember* Arena::Create< ::AFMsg::ReqAckOprTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckOprTeamMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqAckInviteTeam* Arena::Create< ::AFMsg::ReqAckInviteTeam >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqAckInviteTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqTeamEnterEctype* Arena::Create< ::AFMsg::ReqTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqTeamEnterEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckTeamEnterEctype* Arena::Create< ::AFMsg::AckTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckTeamEnterEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::GridGuildBaseInfo* Arena::Create< ::AFMsg::GridGuildBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::GridGuildBaseInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqBigMapGridInfo* Arena::Create< ::AFMsg::ReqBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqBigMapGridInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::BigMapGridBaseInfo* Arena::Create< ::AFMsg::BigMapGridBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::BigMapGridBaseInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::BigMapLeaveMsg* Arena::Create< ::AFMsg::BigMapLeaveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::BigMapLeaveMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::BigMapWarHistory* Arena::Create< ::AFMsg::BigMapWarHistory >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::BigMapWarHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::BigMapGridDetailInfo* Arena::Create< ::AFMsg::BigMapGridDetailInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::BigMapGridDetailInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckBigMapGridInfo* Arena::Create< ::AFMsg::AckBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckBigMapGridInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqBigMapInfo* Arena::Create< ::AFMsg::ReqBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqBigMapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckBigMapInfo* Arena::Create< ::AFMsg::AckBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckBigMapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqHoldMapGrid* Arena::Create< ::AFMsg::ReqHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqHoldMapGrid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckHoldMapGrid* Arena::Create< ::AFMsg::AckHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckHoldMapGrid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqLeaveMapMsg* Arena::Create< ::AFMsg::ReqLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqLeaveMapMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckLeaveMapMsg* Arena::Create< ::AFMsg::AckLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckLeaveMapMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqGetMapAward* Arena::Create< ::AFMsg::ReqGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqGetMapAward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckGetMapAward* Arena::Create< ::AFMsg::AckGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckGetMapAward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqMapHunting* Arena::Create< ::AFMsg::ReqMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqMapHunting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckMapHunting* Arena::Create< ::AFMsg::AckMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckMapHunting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqMapKingWar* Arena::Create< ::AFMsg::ReqMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqMapKingWar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckMapKingWar* Arena::Create< ::AFMsg::AckMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckMapKingWar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::PVPRoomInfo* Arena::Create< ::AFMsg::PVPRoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::PVPRoomInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqPVPApplyMatch* Arena::Create< ::AFMsg::ReqPVPApplyMatch >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqPVPApplyMatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckPVPApplyMatch* Arena::Create< ::AFMsg::AckPVPApplyMatch >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckPVPApplyMatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::ReqCreatePVPEctype* Arena::Create< ::AFMsg::ReqCreatePVPEctype >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::ReqCreatePVPEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AFMsg::AckCreatePVPEctype* Arena::Create< ::AFMsg::AckCreatePVPEctype >(Arena* arena) {
  return Arena::CreateInternal< ::AFMsg::AckCreatePVPEctype >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
