// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgPreGame.proto

#ifndef PROTOBUF_AFMsgPreGame_2eproto__INCLUDED
#define PROTOBUF_AFMsgPreGame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AFDefine.pb.h"
#include "AFMsgBase.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_AFMsgPreGame_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
void LIBPROTOC_EXPORT InitDefaultsServerInfoReportImpl();
void LIBPROTOC_EXPORT InitDefaultsServerInfoReport();
void LIBPROTOC_EXPORT InitDefaultsServerInfoReportListImpl();
void LIBPROTOC_EXPORT InitDefaultsServerInfoReportList();
void LIBPROTOC_EXPORT InitDefaultsAckEventResultImpl();
void LIBPROTOC_EXPORT InitDefaultsAckEventResult();
void LIBPROTOC_EXPORT InitDefaultsReqAccountLoginImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAccountLogin();
void LIBPROTOC_EXPORT InitDefaultsReqAccountLogoutImpl();
void LIBPROTOC_EXPORT InitDefaultsReqAccountLogout();
void LIBPROTOC_EXPORT InitDefaultsServerInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsServerInfo();
void LIBPROTOC_EXPORT InitDefaultsReqServerListImpl();
void LIBPROTOC_EXPORT InitDefaultsReqServerList();
void LIBPROTOC_EXPORT InitDefaultsAckServerListImpl();
void LIBPROTOC_EXPORT InitDefaultsAckServerList();
void LIBPROTOC_EXPORT InitDefaultsReqConnectWorldImpl();
void LIBPROTOC_EXPORT InitDefaultsReqConnectWorld();
void LIBPROTOC_EXPORT InitDefaultsAckConnectWorldResultImpl();
void LIBPROTOC_EXPORT InitDefaultsAckConnectWorldResult();
void LIBPROTOC_EXPORT InitDefaultsReqSelectServerImpl();
void LIBPROTOC_EXPORT InitDefaultsReqSelectServer();
void LIBPROTOC_EXPORT InitDefaultsReqKickFromWorldImpl();
void LIBPROTOC_EXPORT InitDefaultsReqKickFromWorld();
void LIBPROTOC_EXPORT InitDefaultsReqRoleListImpl();
void LIBPROTOC_EXPORT InitDefaultsReqRoleList();
void LIBPROTOC_EXPORT InitDefaultsRoleLiteInfoImpl();
void LIBPROTOC_EXPORT InitDefaultsRoleLiteInfo();
void LIBPROTOC_EXPORT InitDefaultsAckRoleLiteInfoListImpl();
void LIBPROTOC_EXPORT InitDefaultsAckRoleLiteInfoList();
void LIBPROTOC_EXPORT InitDefaultsReqCreateRoleImpl();
void LIBPROTOC_EXPORT InitDefaultsReqCreateRole();
void LIBPROTOC_EXPORT InitDefaultsReqDeleteRoleImpl();
void LIBPROTOC_EXPORT InitDefaultsReqDeleteRole();
void LIBPROTOC_EXPORT InitDefaultsReqRecoverRoleImpl();
void LIBPROTOC_EXPORT InitDefaultsReqRecoverRole();
void LIBPROTOC_EXPORT InitDefaultsServerHeartBeatImpl();
void LIBPROTOC_EXPORT InitDefaultsServerHeartBeat();
void LIBPROTOC_EXPORT InitDefaultsRoleOnlineNotifyImpl();
void LIBPROTOC_EXPORT InitDefaultsRoleOnlineNotify();
void LIBPROTOC_EXPORT InitDefaultsRoleOfflineNotifyImpl();
void LIBPROTOC_EXPORT InitDefaultsRoleOfflineNotify();
inline void LIBPROTOC_EXPORT InitDefaults() {
  InitDefaultsServerInfoReport();
  InitDefaultsServerInfoReportList();
  InitDefaultsAckEventResult();
  InitDefaultsReqAccountLogin();
  InitDefaultsReqAccountLogout();
  InitDefaultsServerInfo();
  InitDefaultsReqServerList();
  InitDefaultsAckServerList();
  InitDefaultsReqConnectWorld();
  InitDefaultsAckConnectWorldResult();
  InitDefaultsReqSelectServer();
  InitDefaultsReqKickFromWorld();
  InitDefaultsReqRoleList();
  InitDefaultsRoleLiteInfo();
  InitDefaultsAckRoleLiteInfoList();
  InitDefaultsReqCreateRole();
  InitDefaultsReqDeleteRole();
  InitDefaultsReqRecoverRole();
  InitDefaultsServerHeartBeat();
  InitDefaultsRoleOnlineNotify();
  InitDefaultsRoleOfflineNotify();
}
}  // namespace protobuf_AFMsgPreGame_2eproto
namespace AFMsg {
class AckConnectWorldResult;
class AckConnectWorldResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckConnectWorldResultDefaultTypeInternal _AckConnectWorldResult_default_instance_;
class AckEventResult;
class AckEventResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckEventResultDefaultTypeInternal _AckEventResult_default_instance_;
class AckRoleLiteInfoList;
class AckRoleLiteInfoListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckRoleLiteInfoListDefaultTypeInternal _AckRoleLiteInfoList_default_instance_;
class AckServerList;
class AckServerListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckServerListDefaultTypeInternal _AckServerList_default_instance_;
class ReqAccountLogin;
class ReqAccountLoginDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAccountLoginDefaultTypeInternal _ReqAccountLogin_default_instance_;
class ReqAccountLogout;
class ReqAccountLogoutDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAccountLogoutDefaultTypeInternal _ReqAccountLogout_default_instance_;
class ReqConnectWorld;
class ReqConnectWorldDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqConnectWorldDefaultTypeInternal _ReqConnectWorld_default_instance_;
class ReqCreateRole;
class ReqCreateRoleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCreateRoleDefaultTypeInternal _ReqCreateRole_default_instance_;
class ReqDeleteRole;
class ReqDeleteRoleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqDeleteRoleDefaultTypeInternal _ReqDeleteRole_default_instance_;
class ReqKickFromWorld;
class ReqKickFromWorldDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqKickFromWorldDefaultTypeInternal _ReqKickFromWorld_default_instance_;
class ReqRecoverRole;
class ReqRecoverRoleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqRecoverRoleDefaultTypeInternal _ReqRecoverRole_default_instance_;
class ReqRoleList;
class ReqRoleListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqRoleListDefaultTypeInternal _ReqRoleList_default_instance_;
class ReqSelectServer;
class ReqSelectServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSelectServerDefaultTypeInternal _ReqSelectServer_default_instance_;
class ReqServerList;
class ReqServerListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqServerListDefaultTypeInternal _ReqServerList_default_instance_;
class RoleLiteInfo;
class RoleLiteInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleLiteInfoDefaultTypeInternal _RoleLiteInfo_default_instance_;
class RoleOfflineNotify;
class RoleOfflineNotifyDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleOfflineNotifyDefaultTypeInternal _RoleOfflineNotify_default_instance_;
class RoleOnlineNotify;
class RoleOnlineNotifyDefaultTypeInternal;
LIBPROTOC_EXPORT extern RoleOnlineNotifyDefaultTypeInternal _RoleOnlineNotify_default_instance_;
class ServerHeartBeat;
class ServerHeartBeatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerHeartBeatDefaultTypeInternal _ServerHeartBeat_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfoReport;
class ServerInfoReportDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
class ServerInfoReportListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
}  // namespace AFMsg
namespace AFMsg {

enum EServerState {
  EST_CRASH = 0,
  EST_NARMAL = 1,
  EST_BUSY = 2,
  EST_FIRE = 3,
  EST_MAINTEN = 4,
  EServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EServerState_IsValid(int value);
const EServerState EServerState_MIN = EST_CRASH;
const EServerState EServerState_MAX = EST_MAINTEN;
const int EServerState_ARRAYSIZE = EServerState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EServerState_descriptor();
inline const ::std::string& EServerState_Name(EServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerState_descriptor(), value);
}
inline bool EServerState_Parse(
    const ::std::string& name, EServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
enum ReqServerListType {
  RSLT_WORLD_SERVER = 0,
  RSLT_GAMES_ERVER = 1,
  ReqServerListType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqServerListType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqServerListType_IsValid(int value);
const ReqServerListType ReqServerListType_MIN = RSLT_WORLD_SERVER;
const ReqServerListType ReqServerListType_MAX = RSLT_GAMES_ERVER;
const int ReqServerListType_ARRAYSIZE = ReqServerListType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqServerListType_descriptor();
inline const ::std::string& ReqServerListType_Name(ReqServerListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqServerListType_descriptor(), value);
}
inline bool ReqServerListType_Parse(
    const ::std::string& name, ReqServerListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqServerListType>(
    ReqServerListType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ServerInfoReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ServerInfoReport) */ {
 public:
  ServerInfoReport();
  virtual ~ServerInfoReport();

  ServerInfoReport(const ServerInfoReport& from);

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerInfoReport* other);
  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfoReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfoReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_ip = 3;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // int32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 server_port = 4;
  void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::int32 server_port() const;
  void set_server_port(::google::protobuf::int32 value);

  // int32 server_max_online = 5;
  void clear_server_max_online();
  static const int kServerMaxOnlineFieldNumber = 5;
  ::google::protobuf::int32 server_max_online() const;
  void set_server_max_online(::google::protobuf::int32 value);

  // int32 server_cur_count = 6;
  void clear_server_cur_count();
  static const int kServerCurCountFieldNumber = 6;
  ::google::protobuf::int32 server_cur_count() const;
  void set_server_cur_count(::google::protobuf::int32 value);

  // .AFMsg.EServerState server_state = 7;
  void clear_server_state();
  static const int kServerStateFieldNumber = 7;
  ::AFMsg::EServerState server_state() const;
  void set_server_state(::AFMsg::EServerState value);

  // int32 server_type = 8;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 8;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ServerInfoReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_port_;
  ::google::protobuf::int32 server_max_online_;
  ::google::protobuf::int32 server_cur_count_;
  int server_state_;
  ::google::protobuf::int32 server_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReportImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerInfoReportList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ServerInfoReportList) */ {
 public:
  ServerInfoReportList();
  virtual ~ServerInfoReportList();

  ServerInfoReportList(const ServerInfoReportList& from);

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerInfoReportList* other);
  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfoReportList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfoReportList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ServerInfoReport server_list = 1;
  int server_list_size() const;
  void clear_server_list();
  static const int kServerListFieldNumber = 1;
  const ::AFMsg::ServerInfoReport& server_list(int index) const;
  ::AFMsg::ServerInfoReport* mutable_server_list(int index);
  ::AFMsg::ServerInfoReport* add_server_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfoReport >*
      mutable_server_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfoReport >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ServerInfoReportList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfoReport > server_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoReportListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckEventResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckEventResult) */ {
 public:
  AckEventResult();
  virtual ~AckEventResult();

  AckEventResult(const AckEventResult& from);

  inline AckEventResult& operator=(const AckEventResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckEventResult(AckEventResult&& from) noexcept
    : AckEventResult() {
    *this = ::std::move(from);
  }

  inline AckEventResult& operator=(AckEventResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckEventResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckEventResult* internal_default_instance() {
    return reinterpret_cast<const AckEventResult*>(
               &_AckEventResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AckEventResult* other);
  friend void swap(AckEventResult& a, AckEventResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckEventResult* New() const PROTOBUF_FINAL { return New(NULL); }

  AckEventResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckEventResult& from);
  void MergeFrom(const AckEventResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckEventResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Parame1 = 4;
  void clear_parame1();
  static const int kParame1FieldNumber = 4;
  const ::std::string& parame1() const;
  void set_parame1(const ::std::string& value);
  #if LANG_CXX11
  void set_parame1(::std::string&& value);
  #endif
  void set_parame1(const char* value);
  void set_parame1(const char* value, size_t size);
  ::std::string* mutable_parame1();
  ::std::string* release_parame1();
  void set_allocated_parame1(::std::string* parame1);

  // string Parame2 = 5;
  void clear_parame2();
  static const int kParame2FieldNumber = 5;
  const ::std::string& parame2() const;
  void set_parame2(const ::std::string& value);
  #if LANG_CXX11
  void set_parame2(::std::string&& value);
  #endif
  void set_parame2(const char* value);
  void set_parame2(const char* value, size_t size);
  ::std::string* mutable_parame2();
  ::std::string* release_parame2();
  void set_allocated_parame2(::std::string* parame2);

  // string Parame3 = 6;
  void clear_parame3();
  static const int kParame3FieldNumber = 6;
  const ::std::string& parame3() const;
  void set_parame3(const ::std::string& value);
  #if LANG_CXX11
  void set_parame3(::std::string&& value);
  #endif
  void set_parame3(const char* value);
  void set_parame3(const char* value, size_t size);
  ::std::string* mutable_parame3();
  ::std::string* release_parame3();
  void set_allocated_parame3(::std::string* parame3);

  // .AFMsg.Ident event_object = 2;
  bool has_event_object() const;
  void clear_event_object();
  static const int kEventObjectFieldNumber = 2;
  const ::AFMsg::Ident& event_object() const;
  ::AFMsg::Ident* release_event_object();
  ::AFMsg::Ident* mutable_event_object();
  void set_allocated_event_object(::AFMsg::Ident* event_object);

  // .AFMsg.Ident event_client = 3;
  bool has_event_client() const;
  void clear_event_client();
  static const int kEventClientFieldNumber = 3;
  const ::AFMsg::Ident& event_client() const;
  ::AFMsg::Ident* release_event_client();
  ::AFMsg::Ident* mutable_event_client();
  void set_allocated_event_client(::AFMsg::Ident* event_client);

  // .AFMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  static const int kEventCodeFieldNumber = 1;
  ::AFMsg::EGameEventCode event_code() const;
  void set_event_code(::AFMsg::EGameEventCode value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckEventResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parame1_;
  ::google::protobuf::internal::ArenaStringPtr parame2_;
  ::google::protobuf::internal::ArenaStringPtr parame3_;
  ::AFMsg::Ident* event_object_;
  ::AFMsg::Ident* event_client_;
  int event_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckEventResultImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAccountLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAccountLogin) */ {
 public:
  ReqAccountLogin();
  virtual ~ReqAccountLogin();

  ReqAccountLogin(const ReqAccountLogin& from);

  inline ReqAccountLogin& operator=(const ReqAccountLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAccountLogin(ReqAccountLogin&& from) noexcept
    : ReqAccountLogin() {
    *this = ::std::move(from);
  }

  inline ReqAccountLogin& operator=(ReqAccountLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAccountLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAccountLogin* internal_default_instance() {
    return reinterpret_cast<const ReqAccountLogin*>(
               &_ReqAccountLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ReqAccountLogin* other);
  friend void swap(ReqAccountLogin& a, ReqAccountLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAccountLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqAccountLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAccountLogin& from);
  void MergeFrom(const ReqAccountLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAccountLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string security_code = 4;
  void clear_security_code();
  static const int kSecurityCodeFieldNumber = 4;
  const ::std::string& security_code() const;
  void set_security_code(const ::std::string& value);
  #if LANG_CXX11
  void set_security_code(::std::string&& value);
  #endif
  void set_security_code(const char* value);
  void set_security_code(const char* value, size_t size);
  ::std::string* mutable_security_code();
  ::std::string* release_security_code();
  void set_allocated_security_code(::std::string* security_code);

  // string signBuff = 5;
  void clear_signbuff();
  static const int kSignBuffFieldNumber = 5;
  const ::std::string& signbuff() const;
  void set_signbuff(const ::std::string& value);
  #if LANG_CXX11
  void set_signbuff(::std::string&& value);
  #endif
  void set_signbuff(const char* value);
  void set_signbuff(const char* value, size_t size);
  ::std::string* mutable_signbuff();
  ::std::string* release_signbuff();
  void set_allocated_signbuff(::std::string* signbuff);

  // string device_info = 10;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 10;
  const ::std::string& device_info() const;
  void set_device_info(const ::std::string& value);
  #if LANG_CXX11
  void set_device_info(::std::string&& value);
  #endif
  void set_device_info(const char* value);
  void set_device_info(const char* value, size_t size);
  ::std::string* mutable_device_info();
  ::std::string* release_device_info();
  void set_allocated_device_info(::std::string* device_info);

  // string extra_info = 11;
  void clear_extra_info();
  static const int kExtraInfoFieldNumber = 11;
  const ::std::string& extra_info() const;
  void set_extra_info(const ::std::string& value);
  #if LANG_CXX11
  void set_extra_info(::std::string&& value);
  #endif
  void set_extra_info(const char* value);
  void set_extra_info(const char* value, size_t size);
  ::std::string* mutable_extra_info();
  ::std::string* release_extra_info();
  void set_allocated_extra_info(::std::string* extra_info);

  // int32 clientVersion = 6;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 6;
  ::google::protobuf::int32 clientversion() const;
  void set_clientversion(::google::protobuf::int32 value);

  // int32 loginMode = 7;
  void clear_loginmode();
  static const int kLoginModeFieldNumber = 7;
  ::google::protobuf::int32 loginmode() const;
  void set_loginmode(::google::protobuf::int32 value);

  // int64 clientMAC = 9;
  void clear_clientmac();
  static const int kClientMACFieldNumber = 9;
  ::google::protobuf::int64 clientmac() const;
  void set_clientmac(::google::protobuf::int64 value);

  // int32 clientIP = 8;
  void clear_clientip();
  static const int kClientIPFieldNumber = 8;
  ::google::protobuf::int32 clientip() const;
  void set_clientip(::google::protobuf::int32 value);

  // int32 platform_type = 12;
  void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 12;
  ::google::protobuf::int32 platform_type() const;
  void set_platform_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAccountLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr security_code_;
  ::google::protobuf::internal::ArenaStringPtr signbuff_;
  ::google::protobuf::internal::ArenaStringPtr device_info_;
  ::google::protobuf::internal::ArenaStringPtr extra_info_;
  ::google::protobuf::int32 clientversion_;
  ::google::protobuf::int32 loginmode_;
  ::google::protobuf::int64 clientmac_;
  ::google::protobuf::int32 clientip_;
  ::google::protobuf::int32 platform_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLoginImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAccountLogout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAccountLogout) */ {
 public:
  ReqAccountLogout();
  virtual ~ReqAccountLogout();

  ReqAccountLogout(const ReqAccountLogout& from);

  inline ReqAccountLogout& operator=(const ReqAccountLogout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAccountLogout(ReqAccountLogout&& from) noexcept
    : ReqAccountLogout() {
    *this = ::std::move(from);
  }

  inline ReqAccountLogout& operator=(ReqAccountLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAccountLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAccountLogout* internal_default_instance() {
    return reinterpret_cast<const ReqAccountLogout*>(
               &_ReqAccountLogout_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ReqAccountLogout* other);
  friend void swap(ReqAccountLogout& a, ReqAccountLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAccountLogout* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqAccountLogout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqAccountLogout& from);
  void MergeFrom(const ReqAccountLogout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqAccountLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string extra_info = 3;
  void clear_extra_info();
  static const int kExtraInfoFieldNumber = 3;
  const ::std::string& extra_info() const;
  void set_extra_info(const ::std::string& value);
  #if LANG_CXX11
  void set_extra_info(::std::string&& value);
  #endif
  void set_extra_info(const char* value);
  void set_extra_info(const char* value, size_t size);
  ::std::string* mutable_extra_info();
  ::std::string* release_extra_info();
  void set_allocated_extra_info(::std::string* extra_info);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAccountLogout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr extra_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqAccountLogoutImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 wait_count = 3;
  void clear_wait_count();
  static const int kWaitCountFieldNumber = 3;
  ::google::protobuf::int32 wait_count() const;
  void set_wait_count(::google::protobuf::int32 value);

  // .AFMsg.EServerState status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::AFMsg::EServerState status() const;
  void set_status(::AFMsg::EServerState value);

  // @@protoc_insertion_point(class_scope:AFMsg.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 wait_count_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqServerList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqServerList) */ {
 public:
  ReqServerList();
  virtual ~ReqServerList();

  ReqServerList(const ReqServerList& from);

  inline ReqServerList& operator=(const ReqServerList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqServerList(ReqServerList&& from) noexcept
    : ReqServerList() {
    *this = ::std::move(from);
  }

  inline ReqServerList& operator=(ReqServerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqServerList* internal_default_instance() {
    return reinterpret_cast<const ReqServerList*>(
               &_ReqServerList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ReqServerList* other);
  friend void swap(ReqServerList& a, ReqServerList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqServerList* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqServerList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqServerList& from);
  void MergeFrom(const ReqServerList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqServerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.ReqServerListType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::AFMsg::ReqServerListType type() const;
  void set_type(::AFMsg::ReqServerListType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqServerList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqServerListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckServerList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckServerList) */ {
 public:
  AckServerList();
  virtual ~AckServerList();

  AckServerList(const AckServerList& from);

  inline AckServerList& operator=(const AckServerList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckServerList(AckServerList&& from) noexcept
    : AckServerList() {
    *this = ::std::move(from);
  }

  inline AckServerList& operator=(AckServerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckServerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckServerList* internal_default_instance() {
    return reinterpret_cast<const AckServerList*>(
               &_AckServerList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AckServerList* other);
  friend void swap(AckServerList& a, AckServerList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckServerList* New() const PROTOBUF_FINAL { return New(NULL); }

  AckServerList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckServerList& from);
  void MergeFrom(const AckServerList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckServerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.ServerInfo info = 2;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::AFMsg::ServerInfo& info(int index) const;
  ::AFMsg::ServerInfo* mutable_info(int index);
  ::AFMsg::ServerInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfo >&
      info() const;

  // .AFMsg.ReqServerListType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::AFMsg::ReqServerListType type() const;
  void set_type(::AFMsg::ReqServerListType value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckServerList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfo > info_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckServerListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqConnectWorld : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqConnectWorld) */ {
 public:
  ReqConnectWorld();
  virtual ~ReqConnectWorld();

  ReqConnectWorld(const ReqConnectWorld& from);

  inline ReqConnectWorld& operator=(const ReqConnectWorld& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqConnectWorld(ReqConnectWorld&& from) noexcept
    : ReqConnectWorld() {
    *this = ::std::move(from);
  }

  inline ReqConnectWorld& operator=(ReqConnectWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConnectWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqConnectWorld* internal_default_instance() {
    return reinterpret_cast<const ReqConnectWorld*>(
               &_ReqConnectWorld_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ReqConnectWorld* other);
  friend void swap(ReqConnectWorld& a, ReqConnectWorld& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqConnectWorld* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqConnectWorld* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqConnectWorld& from);
  void MergeFrom(const ReqConnectWorld& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqConnectWorld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // .AFMsg.Ident sender = 3;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 3;
  const ::AFMsg::Ident& sender() const;
  ::AFMsg::Ident* release_sender();
  ::AFMsg::Ident* mutable_sender();
  void set_allocated_sender(::AFMsg::Ident* sender);

  // int32 world_id = 1;
  void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  ::google::protobuf::int32 world_id() const;
  void set_world_id(::google::protobuf::int32 value);

  // int32 login_id = 4;
  void clear_login_id();
  static const int kLoginIdFieldNumber = 4;
  ::google::protobuf::int32 login_id() const;
  void set_login_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqConnectWorld)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::AFMsg::Ident* sender_;
  ::google::protobuf::int32 world_id_;
  ::google::protobuf::int32 login_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqConnectWorldImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckConnectWorldResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckConnectWorldResult) */ {
 public:
  AckConnectWorldResult();
  virtual ~AckConnectWorldResult();

  AckConnectWorldResult(const AckConnectWorldResult& from);

  inline AckConnectWorldResult& operator=(const AckConnectWorldResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckConnectWorldResult(AckConnectWorldResult&& from) noexcept
    : AckConnectWorldResult() {
    *this = ::std::move(from);
  }

  inline AckConnectWorldResult& operator=(AckConnectWorldResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckConnectWorldResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckConnectWorldResult* internal_default_instance() {
    return reinterpret_cast<const AckConnectWorldResult*>(
               &_AckConnectWorldResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AckConnectWorldResult* other);
  friend void swap(AckConnectWorldResult& a, AckConnectWorldResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckConnectWorldResult* New() const PROTOBUF_FINAL { return New(NULL); }

  AckConnectWorldResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckConnectWorldResult& from);
  void MergeFrom(const AckConnectWorldResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckConnectWorldResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 4;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string world_ip = 5;
  void clear_world_ip();
  static const int kWorldIpFieldNumber = 5;
  const ::std::string& world_ip() const;
  void set_world_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_world_ip(::std::string&& value);
  #endif
  void set_world_ip(const char* value);
  void set_world_ip(const char* value, size_t size);
  ::std::string* mutable_world_ip();
  ::std::string* release_world_ip();
  void set_allocated_world_ip(::std::string* world_ip);

  // string world_key = 7;
  void clear_world_key();
  static const int kWorldKeyFieldNumber = 7;
  const ::std::string& world_key() const;
  void set_world_key(const ::std::string& value);
  #if LANG_CXX11
  void set_world_key(::std::string&& value);
  #endif
  void set_world_key(const char* value);
  void set_world_key(const char* value, size_t size);
  ::std::string* mutable_world_key();
  ::std::string* release_world_key();
  void set_allocated_world_key(::std::string* world_key);

  // .AFMsg.Ident sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::AFMsg::Ident& sender() const;
  ::AFMsg::Ident* release_sender();
  ::AFMsg::Ident* mutable_sender();
  void set_allocated_sender(::AFMsg::Ident* sender);

  // int32 world_id = 1;
  void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  ::google::protobuf::int32 world_id() const;
  void set_world_id(::google::protobuf::int32 value);

  // int32 login_id = 3;
  void clear_login_id();
  static const int kLoginIdFieldNumber = 3;
  ::google::protobuf::int32 login_id() const;
  void set_login_id(::google::protobuf::int32 value);

  // int32 world_port = 6;
  void clear_world_port();
  static const int kWorldPortFieldNumber = 6;
  ::google::protobuf::int32 world_port() const;
  void set_world_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckConnectWorldResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr world_ip_;
  ::google::protobuf::internal::ArenaStringPtr world_key_;
  ::AFMsg::Ident* sender_;
  ::google::protobuf::int32 world_id_;
  ::google::protobuf::int32 login_id_;
  ::google::protobuf::int32 world_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckConnectWorldResultImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSelectServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSelectServer) */ {
 public:
  ReqSelectServer();
  virtual ~ReqSelectServer();

  ReqSelectServer(const ReqSelectServer& from);

  inline ReqSelectServer& operator=(const ReqSelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSelectServer(ReqSelectServer&& from) noexcept
    : ReqSelectServer() {
    *this = ::std::move(from);
  }

  inline ReqSelectServer& operator=(ReqSelectServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSelectServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSelectServer* internal_default_instance() {
    return reinterpret_cast<const ReqSelectServer*>(
               &_ReqSelectServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ReqSelectServer* other);
  friend void swap(ReqSelectServer& a, ReqSelectServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSelectServer* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqSelectServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqSelectServer& from);
  void MergeFrom(const ReqSelectServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqSelectServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 world_id = 1;
  void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  ::google::protobuf::int32 world_id() const;
  void set_world_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSelectServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 world_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqSelectServerImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqKickFromWorld : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqKickFromWorld) */ {
 public:
  ReqKickFromWorld();
  virtual ~ReqKickFromWorld();

  ReqKickFromWorld(const ReqKickFromWorld& from);

  inline ReqKickFromWorld& operator=(const ReqKickFromWorld& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqKickFromWorld(ReqKickFromWorld&& from) noexcept
    : ReqKickFromWorld() {
    *this = ::std::move(from);
  }

  inline ReqKickFromWorld& operator=(ReqKickFromWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqKickFromWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqKickFromWorld* internal_default_instance() {
    return reinterpret_cast<const ReqKickFromWorld*>(
               &_ReqKickFromWorld_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ReqKickFromWorld* other);
  friend void swap(ReqKickFromWorld& a, ReqKickFromWorld& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqKickFromWorld* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqKickFromWorld* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqKickFromWorld& from);
  void MergeFrom(const ReqKickFromWorld& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqKickFromWorld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // int32 world_id = 1;
  void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  ::google::protobuf::int32 world_id() const;
  void set_world_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqKickFromWorld)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::int32 world_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqKickFromWorldImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqRoleList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqRoleList) */ {
 public:
  ReqRoleList();
  virtual ~ReqRoleList();

  ReqRoleList(const ReqRoleList& from);

  inline ReqRoleList& operator=(const ReqRoleList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRoleList(ReqRoleList&& from) noexcept
    : ReqRoleList() {
    *this = ::std::move(from);
  }

  inline ReqRoleList& operator=(ReqRoleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRoleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRoleList* internal_default_instance() {
    return reinterpret_cast<const ReqRoleList*>(
               &_ReqRoleList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ReqRoleList* other);
  friend void swap(ReqRoleList& a, ReqRoleList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRoleList* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqRoleList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqRoleList& from);
  void MergeFrom(const ReqRoleList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqRoleList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // int32 game_id = 1;
  void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqRoleList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::int32 game_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRoleListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleLiteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.RoleLiteInfo) */ {
 public:
  RoleLiteInfo();
  virtual ~RoleLiteInfo();

  RoleLiteInfo(const RoleLiteInfo& from);

  inline RoleLiteInfo& operator=(const RoleLiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleLiteInfo(RoleLiteInfo&& from) noexcept
    : RoleLiteInfo() {
    *this = ::std::move(from);
  }

  inline RoleLiteInfo& operator=(RoleLiteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleLiteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleLiteInfo* internal_default_instance() {
    return reinterpret_cast<const RoleLiteInfo*>(
               &_RoleLiteInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RoleLiteInfo* other);
  friend void swap(RoleLiteInfo& a, RoleLiteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleLiteInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleLiteInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleLiteInfo& from);
  void MergeFrom(const RoleLiteInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleLiteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string noob_name = 5;
  void clear_noob_name();
  static const int kNoobNameFieldNumber = 5;
  const ::std::string& noob_name() const;
  void set_noob_name(const ::std::string& value);
  #if LANG_CXX11
  void set_noob_name(::std::string&& value);
  #endif
  void set_noob_name(const char* value);
  void set_noob_name(const char* value, size_t size);
  ::std::string* mutable_noob_name();
  ::std::string* release_noob_name();
  void set_allocated_noob_name(::std::string* noob_name);

  // string view_record = 12;
  void clear_view_record();
  static const int kViewRecordFieldNumber = 12;
  const ::std::string& view_record() const;
  void set_view_record(const ::std::string& value);
  #if LANG_CXX11
  void set_view_record(::std::string&& value);
  #endif
  void set_view_record(const char* value);
  void set_view_record(const char* value, size_t size);
  ::std::string* mutable_view_record();
  ::std::string* release_view_record();
  void set_allocated_view_record(::std::string* view_record);

  // .AFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::AFMsg::Ident& id() const;
  ::AFMsg::Ident* release_id();
  ::AFMsg::Ident* mutable_id();
  void set_allocated_id(::AFMsg::Ident* id);

  // int32 career = 2;
  void clear_career();
  static const int kCareerFieldNumber = 2;
  ::google::protobuf::int32 career() const;
  void set_career(::google::protobuf::int32 value);

  // int32 sex = 3;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 race = 4;
  void clear_race();
  static const int kRaceFieldNumber = 4;
  ::google::protobuf::int32 race() const;
  void set_race(::google::protobuf::int32 value);

  // int32 game_id = 6;
  void clear_game_id();
  static const int kGameIdFieldNumber = 6;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // int32 role_level = 7;
  void clear_role_level();
  static const int kRoleLevelFieldNumber = 7;
  ::google::protobuf::int32 role_level() const;
  void set_role_level(::google::protobuf::int32 value);

  // int32 delete_time = 8;
  void clear_delete_time();
  static const int kDeleteTimeFieldNumber = 8;
  ::google::protobuf::int32 delete_time() const;
  void set_delete_time(::google::protobuf::int32 value);

  // int32 reg_time = 9;
  void clear_reg_time();
  static const int kRegTimeFieldNumber = 9;
  ::google::protobuf::int32 reg_time() const;
  void set_reg_time(::google::protobuf::int32 value);

  // int32 last_offline_time = 10;
  void clear_last_offline_time();
  static const int kLastOfflineTimeFieldNumber = 10;
  ::google::protobuf::int32 last_offline_time() const;
  void set_last_offline_time(::google::protobuf::int32 value);

  // int32 last_offline_ip = 11;
  void clear_last_offline_ip();
  static const int kLastOfflineIpFieldNumber = 11;
  ::google::protobuf::int32 last_offline_ip() const;
  void set_last_offline_ip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.RoleLiteInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr noob_name_;
  ::google::protobuf::internal::ArenaStringPtr view_record_;
  ::AFMsg::Ident* id_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 delete_time_;
  ::google::protobuf::int32 reg_time_;
  ::google::protobuf::int32 last_offline_time_;
  ::google::protobuf::int32 last_offline_ip_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleLiteInfoImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckRoleLiteInfoList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckRoleLiteInfoList) */ {
 public:
  AckRoleLiteInfoList();
  virtual ~AckRoleLiteInfoList();

  AckRoleLiteInfoList(const AckRoleLiteInfoList& from);

  inline AckRoleLiteInfoList& operator=(const AckRoleLiteInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckRoleLiteInfoList(AckRoleLiteInfoList&& from) noexcept
    : AckRoleLiteInfoList() {
    *this = ::std::move(from);
  }

  inline AckRoleLiteInfoList& operator=(AckRoleLiteInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRoleLiteInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckRoleLiteInfoList* internal_default_instance() {
    return reinterpret_cast<const AckRoleLiteInfoList*>(
               &_AckRoleLiteInfoList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(AckRoleLiteInfoList* other);
  friend void swap(AckRoleLiteInfoList& a, AckRoleLiteInfoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckRoleLiteInfoList* New() const PROTOBUF_FINAL { return New(NULL); }

  AckRoleLiteInfoList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckRoleLiteInfoList& from);
  void MergeFrom(const AckRoleLiteInfoList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckRoleLiteInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.RoleLiteInfo char_data = 1;
  int char_data_size() const;
  void clear_char_data();
  static const int kCharDataFieldNumber = 1;
  const ::AFMsg::RoleLiteInfo& char_data(int index) const;
  ::AFMsg::RoleLiteInfo* mutable_char_data(int index);
  ::AFMsg::RoleLiteInfo* add_char_data();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::RoleLiteInfo >*
      mutable_char_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::RoleLiteInfo >&
      char_data() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckRoleLiteInfoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::RoleLiteInfo > char_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsAckRoleLiteInfoListImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCreateRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCreateRole) */ {
 public:
  ReqCreateRole();
  virtual ~ReqCreateRole();

  ReqCreateRole(const ReqCreateRole& from);

  inline ReqCreateRole& operator=(const ReqCreateRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCreateRole(ReqCreateRole&& from) noexcept
    : ReqCreateRole() {
    *this = ::std::move(from);
  }

  inline ReqCreateRole& operator=(ReqCreateRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreateRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreateRole* internal_default_instance() {
    return reinterpret_cast<const ReqCreateRole*>(
               &_ReqCreateRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ReqCreateRole* other);
  friend void swap(ReqCreateRole& a, ReqCreateRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateRole* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqCreateRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqCreateRole& from);
  void MergeFrom(const ReqCreateRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqCreateRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string noob_name = 5;
  void clear_noob_name();
  static const int kNoobNameFieldNumber = 5;
  const ::std::string& noob_name() const;
  void set_noob_name(const ::std::string& value);
  #if LANG_CXX11
  void set_noob_name(::std::string&& value);
  #endif
  void set_noob_name(const char* value);
  void set_noob_name(const char* value, size_t size);
  ::std::string* mutable_noob_name();
  ::std::string* release_noob_name();
  void set_allocated_noob_name(::std::string* noob_name);

  // int32 career = 2;
  void clear_career();
  static const int kCareerFieldNumber = 2;
  ::google::protobuf::int32 career() const;
  void set_career(::google::protobuf::int32 value);

  // int32 sex = 3;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 race = 4;
  void clear_race();
  static const int kRaceFieldNumber = 4;
  ::google::protobuf::int32 race() const;
  void set_race(::google::protobuf::int32 value);

  // int32 game_id = 6;
  void clear_game_id();
  static const int kGameIdFieldNumber = 6;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCreateRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr noob_name_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 game_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqCreateRoleImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqDeleteRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqDeleteRole) */ {
 public:
  ReqDeleteRole();
  virtual ~ReqDeleteRole();

  ReqDeleteRole(const ReqDeleteRole& from);

  inline ReqDeleteRole& operator=(const ReqDeleteRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqDeleteRole(ReqDeleteRole&& from) noexcept
    : ReqDeleteRole() {
    *this = ::std::move(from);
  }

  inline ReqDeleteRole& operator=(ReqDeleteRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDeleteRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteRole* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteRole*>(
               &_ReqDeleteRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ReqDeleteRole* other);
  friend void swap(ReqDeleteRole& a, ReqDeleteRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteRole* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqDeleteRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqDeleteRole& from);
  void MergeFrom(const ReqDeleteRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqDeleteRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 game_id = 3;
  void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqDeleteRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 game_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqDeleteRoleImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqRecoverRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqRecoverRole) */ {
 public:
  ReqRecoverRole();
  virtual ~ReqRecoverRole();

  ReqRecoverRole(const ReqRecoverRole& from);

  inline ReqRecoverRole& operator=(const ReqRecoverRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRecoverRole(ReqRecoverRole&& from) noexcept
    : ReqRecoverRole() {
    *this = ::std::move(from);
  }

  inline ReqRecoverRole& operator=(ReqRecoverRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRecoverRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRecoverRole* internal_default_instance() {
    return reinterpret_cast<const ReqRecoverRole*>(
               &_ReqRecoverRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ReqRecoverRole* other);
  friend void swap(ReqRecoverRole& a, ReqRecoverRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRecoverRole* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqRecoverRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqRecoverRole& from);
  void MergeFrom(const ReqRecoverRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqRecoverRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 game_id = 3;
  void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqRecoverRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 game_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsReqRecoverRoleImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ServerHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ServerHeartBeat) */ {
 public:
  ServerHeartBeat();
  virtual ~ServerHeartBeat();

  ServerHeartBeat(const ServerHeartBeat& from);

  inline ServerHeartBeat& operator=(const ServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerHeartBeat(ServerHeartBeat&& from) noexcept
    : ServerHeartBeat() {
    *this = ::std::move(from);
  }

  inline ServerHeartBeat& operator=(ServerHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ServerHeartBeat*>(
               &_ServerHeartBeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ServerHeartBeat* other);
  friend void swap(ServerHeartBeat& a, ServerHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerHeartBeat* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerHeartBeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerHeartBeat& from);
  void MergeFrom(const ServerHeartBeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ServerHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsServerHeartBeatImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleOnlineNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.RoleOnlineNotify) */ {
 public:
  RoleOnlineNotify();
  virtual ~RoleOnlineNotify();

  RoleOnlineNotify(const RoleOnlineNotify& from);

  inline RoleOnlineNotify& operator=(const RoleOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleOnlineNotify(RoleOnlineNotify&& from) noexcept
    : RoleOnlineNotify() {
    *this = ::std::move(from);
  }

  inline RoleOnlineNotify& operator=(RoleOnlineNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleOnlineNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleOnlineNotify* internal_default_instance() {
    return reinterpret_cast<const RoleOnlineNotify*>(
               &_RoleOnlineNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(RoleOnlineNotify* other);
  friend void swap(RoleOnlineNotify& a, RoleOnlineNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleOnlineNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleOnlineNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleOnlineNotify& from);
  void MergeFrom(const RoleOnlineNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleOnlineNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident guild = 1;
  bool has_guild() const;
  void clear_guild();
  static const int kGuildFieldNumber = 1;
  const ::AFMsg::Ident& guild() const;
  ::AFMsg::Ident* release_guild();
  ::AFMsg::Ident* mutable_guild();
  void set_allocated_guild(::AFMsg::Ident* guild);

  // @@protoc_insertion_point(class_scope:AFMsg.RoleOnlineNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* guild_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOnlineNotifyImpl();
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RoleOfflineNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.RoleOfflineNotify) */ {
 public:
  RoleOfflineNotify();
  virtual ~RoleOfflineNotify();

  RoleOfflineNotify(const RoleOfflineNotify& from);

  inline RoleOfflineNotify& operator=(const RoleOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleOfflineNotify(RoleOfflineNotify&& from) noexcept
    : RoleOfflineNotify() {
    *this = ::std::move(from);
  }

  inline RoleOfflineNotify& operator=(RoleOfflineNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleOfflineNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const RoleOfflineNotify*>(
               &_RoleOfflineNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(RoleOfflineNotify* other);
  friend void swap(RoleOfflineNotify& a, RoleOfflineNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleOfflineNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleOfflineNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleOfflineNotify& from);
  void MergeFrom(const RoleOfflineNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleOfflineNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AFMsg.Ident guild = 1;
  bool has_guild() const;
  void clear_guild();
  static const int kGuildFieldNumber = 1;
  const ::AFMsg::Ident& guild() const;
  ::AFMsg::Ident* release_guild();
  ::AFMsg::Ident* mutable_guild();
  void set_allocated_guild(::AFMsg::Ident* guild);

  // @@protoc_insertion_point(class_scope:AFMsg.RoleOfflineNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AFMsg::Ident* guild_;
  mutable int _cached_size_;
  friend struct ::protobuf_AFMsgPreGame_2eproto::TableStruct;
  friend void ::protobuf_AFMsgPreGame_2eproto::InitDefaultsRoleOfflineNotifyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfoReport

// int32 server_id = 1;
inline void ServerInfoReport::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_id)
  return server_id_;
}
inline void ServerInfoReport::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_id)
}

// string server_name = 2;
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_name)
  return server_name_.GetNoArena();
}
inline void ServerInfoReport::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ServerInfoReport.server_name)
}
#endif
inline void ServerInfoReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ServerInfoReport.server_name)
}
inline ::std::string* ServerInfoReport::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ServerInfoReport.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ServerInfoReport.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ServerInfoReport.server_name)
}

// string server_ip = 3;
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_ip)
  return server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_ip)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ServerInfoReport.server_ip)
}
#endif
inline void ServerInfoReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ServerInfoReport.server_ip)
}
inline ::std::string* ServerInfoReport::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ServerInfoReport.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:AFMsg.ServerInfoReport.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ServerInfoReport.server_ip)
}

// int32 server_port = 4;
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_port)
  return server_port_;
}
inline void ServerInfoReport::set_server_port(::google::protobuf::int32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_port)
}

// int32 server_max_online = 5;
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_max_online)
  return server_max_online_;
}
inline void ServerInfoReport::set_server_max_online(::google::protobuf::int32 value) {
  
  server_max_online_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_max_online)
}

// int32 server_cur_count = 6;
inline void ServerInfoReport::clear_server_cur_count() {
  server_cur_count_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_cur_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_cur_count)
  return server_cur_count_;
}
inline void ServerInfoReport::set_server_cur_count(::google::protobuf::int32 value) {
  
  server_cur_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_cur_count)
}

// .AFMsg.EServerState server_state = 7;
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0;
}
inline ::AFMsg::EServerState ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_state)
  return static_cast< ::AFMsg::EServerState >(server_state_);
}
inline void ServerInfoReport::set_server_state(::AFMsg::EServerState value) {
  
  server_state_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_state)
}

// int32 server_type = 8;
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReport.server_type)
  return server_type_;
}
inline void ServerInfoReport::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfoReport.server_type)
}

// -------------------------------------------------------------------

// ServerInfoReportList

// repeated .AFMsg.ServerInfoReport server_list = 1;
inline int ServerInfoReportList::server_list_size() const {
  return server_list_.size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline const ::AFMsg::ServerInfoReport& ServerInfoReportList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfoReportList.server_list)
  return server_list_.Get(index);
}
inline ::AFMsg::ServerInfoReport* ServerInfoReportList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ServerInfoReportList.server_list)
  return server_list_.Mutable(index);
}
inline ::AFMsg::ServerInfoReport* ServerInfoReportList::add_server_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ServerInfoReportList.server_list)
  return server_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ServerInfoReportList.server_list)
  return &server_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ServerInfoReportList.server_list)
  return server_list_;
}

// -------------------------------------------------------------------

// AckEventResult

// .AFMsg.EGameEventCode event_code = 1;
inline void AckEventResult::clear_event_code() {
  event_code_ = 0;
}
inline ::AFMsg::EGameEventCode AckEventResult::event_code() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.event_code)
  return static_cast< ::AFMsg::EGameEventCode >(event_code_);
}
inline void AckEventResult::set_event_code(::AFMsg::EGameEventCode value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckEventResult.event_code)
}

// .AFMsg.Ident event_object = 2;
inline bool AckEventResult::has_event_object() const {
  return this != internal_default_instance() && event_object_ != NULL;
}
inline const ::AFMsg::Ident& AckEventResult::event_object() const {
  const ::AFMsg::Ident* p = event_object_;
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.event_object)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckEventResult::release_event_object() {
  // @@protoc_insertion_point(field_release:AFMsg.AckEventResult.event_object)
  
  ::AFMsg::Ident* temp = event_object_;
  event_object_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckEventResult::mutable_event_object() {
  
  if (event_object_ == NULL) {
    event_object_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckEventResult.event_object)
  return event_object_;
}
inline void AckEventResult::set_allocated_event_object(::AFMsg::Ident* event_object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_object_);
  }
  if (event_object) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_object, submessage_arena);
    }
    
  } else {
    
  }
  event_object_ = event_object;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckEventResult.event_object)
}

// .AFMsg.Ident event_client = 3;
inline bool AckEventResult::has_event_client() const {
  return this != internal_default_instance() && event_client_ != NULL;
}
inline const ::AFMsg::Ident& AckEventResult::event_client() const {
  const ::AFMsg::Ident* p = event_client_;
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.event_client)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckEventResult::release_event_client() {
  // @@protoc_insertion_point(field_release:AFMsg.AckEventResult.event_client)
  
  ::AFMsg::Ident* temp = event_client_;
  event_client_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckEventResult::mutable_event_client() {
  
  if (event_client_ == NULL) {
    event_client_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckEventResult.event_client)
  return event_client_;
}
inline void AckEventResult::set_allocated_event_client(::AFMsg::Ident* event_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_client_);
  }
  if (event_client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_client, submessage_arena);
    }
    
  } else {
    
  }
  event_client_ = event_client;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckEventResult.event_client)
}

// string Parame1 = 4;
inline void AckEventResult::clear_parame1() {
  parame1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckEventResult::parame1() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.Parame1)
  return parame1_.GetNoArena();
}
inline void AckEventResult::set_parame1(const ::std::string& value) {
  
  parame1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckEventResult.Parame1)
}
#if LANG_CXX11
inline void AckEventResult::set_parame1(::std::string&& value) {
  
  parame1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckEventResult.Parame1)
}
#endif
inline void AckEventResult::set_parame1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parame1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckEventResult.Parame1)
}
inline void AckEventResult::set_parame1(const char* value, size_t size) {
  
  parame1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckEventResult.Parame1)
}
inline ::std::string* AckEventResult::mutable_parame1() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckEventResult.Parame1)
  return parame1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckEventResult::release_parame1() {
  // @@protoc_insertion_point(field_release:AFMsg.AckEventResult.Parame1)
  
  return parame1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckEventResult::set_allocated_parame1(::std::string* parame1) {
  if (parame1 != NULL) {
    
  } else {
    
  }
  parame1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parame1);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckEventResult.Parame1)
}

// string Parame2 = 5;
inline void AckEventResult::clear_parame2() {
  parame2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckEventResult::parame2() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.Parame2)
  return parame2_.GetNoArena();
}
inline void AckEventResult::set_parame2(const ::std::string& value) {
  
  parame2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckEventResult.Parame2)
}
#if LANG_CXX11
inline void AckEventResult::set_parame2(::std::string&& value) {
  
  parame2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckEventResult.Parame2)
}
#endif
inline void AckEventResult::set_parame2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parame2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckEventResult.Parame2)
}
inline void AckEventResult::set_parame2(const char* value, size_t size) {
  
  parame2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckEventResult.Parame2)
}
inline ::std::string* AckEventResult::mutable_parame2() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckEventResult.Parame2)
  return parame2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckEventResult::release_parame2() {
  // @@protoc_insertion_point(field_release:AFMsg.AckEventResult.Parame2)
  
  return parame2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckEventResult::set_allocated_parame2(::std::string* parame2) {
  if (parame2 != NULL) {
    
  } else {
    
  }
  parame2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parame2);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckEventResult.Parame2)
}

// string Parame3 = 6;
inline void AckEventResult::clear_parame3() {
  parame3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckEventResult::parame3() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckEventResult.Parame3)
  return parame3_.GetNoArena();
}
inline void AckEventResult::set_parame3(const ::std::string& value) {
  
  parame3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckEventResult.Parame3)
}
#if LANG_CXX11
inline void AckEventResult::set_parame3(::std::string&& value) {
  
  parame3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckEventResult.Parame3)
}
#endif
inline void AckEventResult::set_parame3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parame3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckEventResult.Parame3)
}
inline void AckEventResult::set_parame3(const char* value, size_t size) {
  
  parame3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckEventResult.Parame3)
}
inline ::std::string* AckEventResult::mutable_parame3() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckEventResult.Parame3)
  return parame3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckEventResult::release_parame3() {
  // @@protoc_insertion_point(field_release:AFMsg.AckEventResult.Parame3)
  
  return parame3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckEventResult::set_allocated_parame3(::std::string* parame3) {
  if (parame3 != NULL) {
    
  } else {
    
  }
  parame3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parame3);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckEventResult.Parame3)
}

// -------------------------------------------------------------------

// ReqAccountLogin

// string account = 2;
inline void ReqAccountLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.account)
  return account_.GetNoArena();
}
inline void ReqAccountLogin::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.account)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.account)
}
#endif
inline void ReqAccountLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.account)
}
inline void ReqAccountLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.account)
}
inline ::std::string* ReqAccountLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.account)
}

// string password = 3;
inline void ReqAccountLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::password() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.password)
  return password_.GetNoArena();
}
inline void ReqAccountLogin::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.password)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.password)
}
#endif
inline void ReqAccountLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.password)
}
inline void ReqAccountLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.password)
}
inline ::std::string* ReqAccountLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_password() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.password)
}

// string security_code = 4;
inline void ReqAccountLogin::clear_security_code() {
  security_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::security_code() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.security_code)
  return security_code_.GetNoArena();
}
inline void ReqAccountLogin::set_security_code(const ::std::string& value) {
  
  security_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.security_code)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_security_code(::std::string&& value) {
  
  security_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.security_code)
}
#endif
inline void ReqAccountLogin::set_security_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  security_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.security_code)
}
inline void ReqAccountLogin::set_security_code(const char* value, size_t size) {
  
  security_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.security_code)
}
inline ::std::string* ReqAccountLogin::mutable_security_code() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.security_code)
  return security_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_security_code() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.security_code)
  
  return security_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_security_code(::std::string* security_code) {
  if (security_code != NULL) {
    
  } else {
    
  }
  security_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_code);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.security_code)
}

// string signBuff = 5;
inline void ReqAccountLogin::clear_signbuff() {
  signbuff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::signbuff() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.signBuff)
  return signbuff_.GetNoArena();
}
inline void ReqAccountLogin::set_signbuff(const ::std::string& value) {
  
  signbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.signBuff)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_signbuff(::std::string&& value) {
  
  signbuff_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.signBuff)
}
#endif
inline void ReqAccountLogin::set_signbuff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.signBuff)
}
inline void ReqAccountLogin::set_signbuff(const char* value, size_t size) {
  
  signbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.signBuff)
}
inline ::std::string* ReqAccountLogin::mutable_signbuff() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.signBuff)
  return signbuff_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_signbuff() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.signBuff)
  
  return signbuff_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_signbuff(::std::string* signbuff) {
  if (signbuff != NULL) {
    
  } else {
    
  }
  signbuff_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signbuff);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.signBuff)
}

// int32 clientVersion = 6;
inline void ReqAccountLogin::clear_clientversion() {
  clientversion_ = 0;
}
inline ::google::protobuf::int32 ReqAccountLogin::clientversion() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.clientVersion)
  return clientversion_;
}
inline void ReqAccountLogin::set_clientversion(::google::protobuf::int32 value) {
  
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.clientVersion)
}

// int32 loginMode = 7;
inline void ReqAccountLogin::clear_loginmode() {
  loginmode_ = 0;
}
inline ::google::protobuf::int32 ReqAccountLogin::loginmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.loginMode)
  return loginmode_;
}
inline void ReqAccountLogin::set_loginmode(::google::protobuf::int32 value) {
  
  loginmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.loginMode)
}

// int32 clientIP = 8;
inline void ReqAccountLogin::clear_clientip() {
  clientip_ = 0;
}
inline ::google::protobuf::int32 ReqAccountLogin::clientip() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.clientIP)
  return clientip_;
}
inline void ReqAccountLogin::set_clientip(::google::protobuf::int32 value) {
  
  clientip_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.clientIP)
}

// int64 clientMAC = 9;
inline void ReqAccountLogin::clear_clientmac() {
  clientmac_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqAccountLogin::clientmac() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.clientMAC)
  return clientmac_;
}
inline void ReqAccountLogin::set_clientmac(::google::protobuf::int64 value) {
  
  clientmac_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.clientMAC)
}

// string device_info = 10;
inline void ReqAccountLogin::clear_device_info() {
  device_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::device_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.device_info)
  return device_info_.GetNoArena();
}
inline void ReqAccountLogin::set_device_info(const ::std::string& value) {
  
  device_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.device_info)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_device_info(::std::string&& value) {
  
  device_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.device_info)
}
#endif
inline void ReqAccountLogin::set_device_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.device_info)
}
inline void ReqAccountLogin::set_device_info(const char* value, size_t size) {
  
  device_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.device_info)
}
inline ::std::string* ReqAccountLogin::mutable_device_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.device_info)
  return device_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_device_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.device_info)
  
  return device_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_device_info(::std::string* device_info) {
  if (device_info != NULL) {
    
  } else {
    
  }
  device_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.device_info)
}

// string extra_info = 11;
inline void ReqAccountLogin::clear_extra_info() {
  extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogin::extra_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.extra_info)
  return extra_info_.GetNoArena();
}
inline void ReqAccountLogin::set_extra_info(const ::std::string& value) {
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.extra_info)
}
#if LANG_CXX11
inline void ReqAccountLogin::set_extra_info(::std::string&& value) {
  
  extra_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogin.extra_info)
}
#endif
inline void ReqAccountLogin::set_extra_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogin.extra_info)
}
inline void ReqAccountLogin::set_extra_info(const char* value, size_t size) {
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogin.extra_info)
}
inline ::std::string* ReqAccountLogin::mutable_extra_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogin.extra_info)
  return extra_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogin::release_extra_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogin.extra_info)
  
  return extra_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogin::set_allocated_extra_info(::std::string* extra_info) {
  if (extra_info != NULL) {
    
  } else {
    
  }
  extra_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogin.extra_info)
}

// int32 platform_type = 12;
inline void ReqAccountLogin::clear_platform_type() {
  platform_type_ = 0;
}
inline ::google::protobuf::int32 ReqAccountLogin::platform_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogin.platform_type)
  return platform_type_;
}
inline void ReqAccountLogin::set_platform_type(::google::protobuf::int32 value) {
  
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogin.platform_type)
}

// -------------------------------------------------------------------

// ReqAccountLogout

// string account = 2;
inline void ReqAccountLogout::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogout::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogout.account)
  return account_.GetNoArena();
}
inline void ReqAccountLogout::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogout.account)
}
#if LANG_CXX11
inline void ReqAccountLogout::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogout.account)
}
#endif
inline void ReqAccountLogout::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogout.account)
}
inline void ReqAccountLogout::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogout.account)
}
inline ::std::string* ReqAccountLogout::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogout.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogout::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogout.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogout::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogout.account)
}

// string extra_info = 3;
inline void ReqAccountLogout::clear_extra_info() {
  extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAccountLogout::extra_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAccountLogout.extra_info)
  return extra_info_.GetNoArena();
}
inline void ReqAccountLogout::set_extra_info(const ::std::string& value) {
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAccountLogout.extra_info)
}
#if LANG_CXX11
inline void ReqAccountLogout::set_extra_info(::std::string&& value) {
  
  extra_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqAccountLogout.extra_info)
}
#endif
inline void ReqAccountLogout::set_extra_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAccountLogout.extra_info)
}
inline void ReqAccountLogout::set_extra_info(const char* value, size_t size) {
  
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAccountLogout.extra_info)
}
inline ::std::string* ReqAccountLogout::mutable_extra_info() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAccountLogout.extra_info)
  return extra_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAccountLogout::release_extra_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAccountLogout.extra_info)
  
  return extra_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAccountLogout::set_allocated_extra_info(::std::string* extra_info) {
  if (extra_info != NULL) {
    
  } else {
    
  }
  extra_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAccountLogout.extra_info)
}

// -------------------------------------------------------------------

// ServerInfo

// int32 server_id = 1;
inline void ServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfo.server_id)
  return server_id_;
}
inline void ServerInfo::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfo.server_id)
}

// string name = 2;
inline void ServerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfo.name)
  return name_.GetNoArena();
}
inline void ServerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfo.name)
}
#if LANG_CXX11
inline void ServerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ServerInfo.name)
}
#endif
inline void ServerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ServerInfo.name)
}
inline ::std::string* ServerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ServerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ServerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ServerInfo.name)
}

// int32 wait_count = 3;
inline void ServerInfo::clear_wait_count() {
  wait_count_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::wait_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfo.wait_count)
  return wait_count_;
}
inline void ServerInfo::set_wait_count(::google::protobuf::int32 value) {
  
  wait_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfo.wait_count)
}

// .AFMsg.EServerState status = 4;
inline void ServerInfo::clear_status() {
  status_ = 0;
}
inline ::AFMsg::EServerState ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerInfo.status)
  return static_cast< ::AFMsg::EServerState >(status_);
}
inline void ServerInfo::set_status(::AFMsg::EServerState value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerInfo.status)
}

// -------------------------------------------------------------------

// ReqServerList

// .AFMsg.ReqServerListType type = 1;
inline void ReqServerList::clear_type() {
  type_ = 0;
}
inline ::AFMsg::ReqServerListType ReqServerList::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqServerList.type)
  return static_cast< ::AFMsg::ReqServerListType >(type_);
}
inline void ReqServerList::set_type(::AFMsg::ReqServerListType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqServerList.type)
}

// -------------------------------------------------------------------

// AckServerList

// .AFMsg.ReqServerListType type = 1;
inline void AckServerList::clear_type() {
  type_ = 0;
}
inline ::AFMsg::ReqServerListType AckServerList::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckServerList.type)
  return static_cast< ::AFMsg::ReqServerListType >(type_);
}
inline void AckServerList::set_type(::AFMsg::ReqServerListType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckServerList.type)
}

// repeated .AFMsg.ServerInfo info = 2;
inline int AckServerList::info_size() const {
  return info_.size();
}
inline void AckServerList::clear_info() {
  info_.Clear();
}
inline const ::AFMsg::ServerInfo& AckServerList::info(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckServerList.info)
  return info_.Get(index);
}
inline ::AFMsg::ServerInfo* AckServerList::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckServerList.info)
  return info_.Mutable(index);
}
inline ::AFMsg::ServerInfo* AckServerList::add_info() {
  // @@protoc_insertion_point(field_add:AFMsg.AckServerList.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfo >*
AckServerList::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckServerList.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ServerInfo >&
AckServerList::info() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckServerList.info)
  return info_;
}

// -------------------------------------------------------------------

// ReqConnectWorld

// int32 world_id = 1;
inline void ReqConnectWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::google::protobuf::int32 ReqConnectWorld::world_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqConnectWorld.world_id)
  return world_id_;
}
inline void ReqConnectWorld::set_world_id(::google::protobuf::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqConnectWorld.world_id)
}

// string account = 2;
inline void ReqConnectWorld::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqConnectWorld::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqConnectWorld.account)
  return account_.GetNoArena();
}
inline void ReqConnectWorld::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqConnectWorld.account)
}
#if LANG_CXX11
inline void ReqConnectWorld::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqConnectWorld.account)
}
#endif
inline void ReqConnectWorld::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqConnectWorld.account)
}
inline void ReqConnectWorld::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqConnectWorld.account)
}
inline ::std::string* ReqConnectWorld::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqConnectWorld.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqConnectWorld::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqConnectWorld.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqConnectWorld::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqConnectWorld.account)
}

// .AFMsg.Ident sender = 3;
inline bool ReqConnectWorld::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
inline const ::AFMsg::Ident& ReqConnectWorld::sender() const {
  const ::AFMsg::Ident* p = sender_;
  // @@protoc_insertion_point(field_get:AFMsg.ReqConnectWorld.sender)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* ReqConnectWorld::release_sender() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqConnectWorld.sender)
  
  ::AFMsg::Ident* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* ReqConnectWorld::mutable_sender() {
  
  if (sender_ == NULL) {
    sender_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqConnectWorld.sender)
  return sender_;
}
inline void ReqConnectWorld::set_allocated_sender(::AFMsg::Ident* sender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sender_);
  }
  if (sender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqConnectWorld.sender)
}

// int32 login_id = 4;
inline void ReqConnectWorld::clear_login_id() {
  login_id_ = 0;
}
inline ::google::protobuf::int32 ReqConnectWorld::login_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqConnectWorld.login_id)
  return login_id_;
}
inline void ReqConnectWorld::set_login_id(::google::protobuf::int32 value) {
  
  login_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqConnectWorld.login_id)
}

// -------------------------------------------------------------------

// AckConnectWorldResult

// int32 world_id = 1;
inline void AckConnectWorldResult::clear_world_id() {
  world_id_ = 0;
}
inline ::google::protobuf::int32 AckConnectWorldResult::world_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.world_id)
  return world_id_;
}
inline void AckConnectWorldResult::set_world_id(::google::protobuf::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.world_id)
}

// .AFMsg.Ident sender = 2;
inline bool AckConnectWorldResult::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
inline const ::AFMsg::Ident& AckConnectWorldResult::sender() const {
  const ::AFMsg::Ident* p = sender_;
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.sender)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* AckConnectWorldResult::release_sender() {
  // @@protoc_insertion_point(field_release:AFMsg.AckConnectWorldResult.sender)
  
  ::AFMsg::Ident* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* AckConnectWorldResult::mutable_sender() {
  
  if (sender_ == NULL) {
    sender_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckConnectWorldResult.sender)
  return sender_;
}
inline void AckConnectWorldResult::set_allocated_sender(::AFMsg::Ident* sender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sender_);
  }
  if (sender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckConnectWorldResult.sender)
}

// int32 login_id = 3;
inline void AckConnectWorldResult::clear_login_id() {
  login_id_ = 0;
}
inline ::google::protobuf::int32 AckConnectWorldResult::login_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.login_id)
  return login_id_;
}
inline void AckConnectWorldResult::set_login_id(::google::protobuf::int32 value) {
  
  login_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.login_id)
}

// string account = 4;
inline void AckConnectWorldResult::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckConnectWorldResult::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.account)
  return account_.GetNoArena();
}
inline void AckConnectWorldResult::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.account)
}
#if LANG_CXX11
inline void AckConnectWorldResult::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckConnectWorldResult.account)
}
#endif
inline void AckConnectWorldResult::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckConnectWorldResult.account)
}
inline void AckConnectWorldResult::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckConnectWorldResult.account)
}
inline ::std::string* AckConnectWorldResult::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckConnectWorldResult.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckConnectWorldResult::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.AckConnectWorldResult.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckConnectWorldResult.account)
}

// string world_ip = 5;
inline void AckConnectWorldResult::clear_world_ip() {
  world_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckConnectWorldResult::world_ip() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.world_ip)
  return world_ip_.GetNoArena();
}
inline void AckConnectWorldResult::set_world_ip(const ::std::string& value) {
  
  world_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.world_ip)
}
#if LANG_CXX11
inline void AckConnectWorldResult::set_world_ip(::std::string&& value) {
  
  world_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckConnectWorldResult.world_ip)
}
#endif
inline void AckConnectWorldResult::set_world_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  world_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckConnectWorldResult.world_ip)
}
inline void AckConnectWorldResult::set_world_ip(const char* value, size_t size) {
  
  world_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckConnectWorldResult.world_ip)
}
inline ::std::string* AckConnectWorldResult::mutable_world_ip() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckConnectWorldResult.world_ip)
  return world_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckConnectWorldResult::release_world_ip() {
  // @@protoc_insertion_point(field_release:AFMsg.AckConnectWorldResult.world_ip)
  
  return world_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_world_ip(::std::string* world_ip) {
  if (world_ip != NULL) {
    
  } else {
    
  }
  world_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world_ip);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckConnectWorldResult.world_ip)
}

// int32 world_port = 6;
inline void AckConnectWorldResult::clear_world_port() {
  world_port_ = 0;
}
inline ::google::protobuf::int32 AckConnectWorldResult::world_port() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.world_port)
  return world_port_;
}
inline void AckConnectWorldResult::set_world_port(::google::protobuf::int32 value) {
  
  world_port_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.world_port)
}

// string world_key = 7;
inline void AckConnectWorldResult::clear_world_key() {
  world_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckConnectWorldResult::world_key() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckConnectWorldResult.world_key)
  return world_key_.GetNoArena();
}
inline void AckConnectWorldResult::set_world_key(const ::std::string& value) {
  
  world_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckConnectWorldResult.world_key)
}
#if LANG_CXX11
inline void AckConnectWorldResult::set_world_key(::std::string&& value) {
  
  world_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.AckConnectWorldResult.world_key)
}
#endif
inline void AckConnectWorldResult::set_world_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  world_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckConnectWorldResult.world_key)
}
inline void AckConnectWorldResult::set_world_key(const char* value, size_t size) {
  
  world_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckConnectWorldResult.world_key)
}
inline ::std::string* AckConnectWorldResult::mutable_world_key() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.AckConnectWorldResult.world_key)
  return world_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckConnectWorldResult::release_world_key() {
  // @@protoc_insertion_point(field_release:AFMsg.AckConnectWorldResult.world_key)
  
  return world_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckConnectWorldResult::set_allocated_world_key(::std::string* world_key) {
  if (world_key != NULL) {
    
  } else {
    
  }
  world_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world_key);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckConnectWorldResult.world_key)
}

// -------------------------------------------------------------------

// ReqSelectServer

// int32 world_id = 1;
inline void ReqSelectServer::clear_world_id() {
  world_id_ = 0;
}
inline ::google::protobuf::int32 ReqSelectServer::world_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSelectServer.world_id)
  return world_id_;
}
inline void ReqSelectServer::set_world_id(::google::protobuf::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSelectServer.world_id)
}

// -------------------------------------------------------------------

// ReqKickFromWorld

// int32 world_id = 1;
inline void ReqKickFromWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::google::protobuf::int32 ReqKickFromWorld::world_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqKickFromWorld.world_id)
  return world_id_;
}
inline void ReqKickFromWorld::set_world_id(::google::protobuf::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqKickFromWorld.world_id)
}

// string account = 2;
inline void ReqKickFromWorld::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqKickFromWorld::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqKickFromWorld.account)
  return account_.GetNoArena();
}
inline void ReqKickFromWorld::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqKickFromWorld.account)
}
#if LANG_CXX11
inline void ReqKickFromWorld::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqKickFromWorld.account)
}
#endif
inline void ReqKickFromWorld::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqKickFromWorld.account)
}
inline void ReqKickFromWorld::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqKickFromWorld.account)
}
inline ::std::string* ReqKickFromWorld::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqKickFromWorld.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqKickFromWorld::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqKickFromWorld.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqKickFromWorld::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqKickFromWorld.account)
}

// -------------------------------------------------------------------

// ReqRoleList

// int32 game_id = 1;
inline void ReqRoleList::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqRoleList::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqRoleList.game_id)
  return game_id_;
}
inline void ReqRoleList::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqRoleList.game_id)
}

// string account = 2;
inline void ReqRoleList::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRoleList::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqRoleList.account)
  return account_.GetNoArena();
}
inline void ReqRoleList::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqRoleList.account)
}
#if LANG_CXX11
inline void ReqRoleList::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqRoleList.account)
}
#endif
inline void ReqRoleList::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqRoleList.account)
}
inline void ReqRoleList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqRoleList.account)
}
inline ::std::string* ReqRoleList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqRoleList.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRoleList::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqRoleList.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRoleList::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqRoleList.account)
}

// -------------------------------------------------------------------

// RoleLiteInfo

// .AFMsg.Ident id = 1;
inline bool RoleLiteInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::AFMsg::Ident& RoleLiteInfo::id() const {
  const ::AFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* RoleLiteInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.RoleLiteInfo.id)
  
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* RoleLiteInfo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.RoleLiteInfo.id)
  return id_;
}
inline void RoleLiteInfo::set_allocated_id(::AFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.RoleLiteInfo.id)
}

// int32 career = 2;
inline void RoleLiteInfo::clear_career() {
  career_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::career() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.career)
  return career_;
}
inline void RoleLiteInfo::set_career(::google::protobuf::int32 value) {
  
  career_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.career)
}

// int32 sex = 3;
inline void RoleLiteInfo::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::sex() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.sex)
  return sex_;
}
inline void RoleLiteInfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.sex)
}

// int32 race = 4;
inline void RoleLiteInfo::clear_race() {
  race_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::race() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.race)
  return race_;
}
inline void RoleLiteInfo::set_race(::google::protobuf::int32 value) {
  
  race_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.race)
}

// string noob_name = 5;
inline void RoleLiteInfo::clear_noob_name() {
  noob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleLiteInfo::noob_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.noob_name)
  return noob_name_.GetNoArena();
}
inline void RoleLiteInfo::set_noob_name(const ::std::string& value) {
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.noob_name)
}
#if LANG_CXX11
inline void RoleLiteInfo::set_noob_name(::std::string&& value) {
  
  noob_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.RoleLiteInfo.noob_name)
}
#endif
inline void RoleLiteInfo::set_noob_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.RoleLiteInfo.noob_name)
}
inline void RoleLiteInfo::set_noob_name(const char* value, size_t size) {
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.RoleLiteInfo.noob_name)
}
inline ::std::string* RoleLiteInfo::mutable_noob_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.RoleLiteInfo.noob_name)
  return noob_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleLiteInfo::release_noob_name() {
  // @@protoc_insertion_point(field_release:AFMsg.RoleLiteInfo.noob_name)
  
  return noob_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleLiteInfo::set_allocated_noob_name(::std::string* noob_name) {
  if (noob_name != NULL) {
    
  } else {
    
  }
  noob_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noob_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.RoleLiteInfo.noob_name)
}

// int32 game_id = 6;
inline void RoleLiteInfo::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.game_id)
  return game_id_;
}
inline void RoleLiteInfo::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.game_id)
}

// int32 role_level = 7;
inline void RoleLiteInfo::clear_role_level() {
  role_level_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::role_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.role_level)
  return role_level_;
}
inline void RoleLiteInfo::set_role_level(::google::protobuf::int32 value) {
  
  role_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.role_level)
}

// int32 delete_time = 8;
inline void RoleLiteInfo::clear_delete_time() {
  delete_time_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::delete_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.delete_time)
  return delete_time_;
}
inline void RoleLiteInfo::set_delete_time(::google::protobuf::int32 value) {
  
  delete_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.delete_time)
}

// int32 reg_time = 9;
inline void RoleLiteInfo::clear_reg_time() {
  reg_time_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::reg_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.reg_time)
  return reg_time_;
}
inline void RoleLiteInfo::set_reg_time(::google::protobuf::int32 value) {
  
  reg_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.reg_time)
}

// int32 last_offline_time = 10;
inline void RoleLiteInfo::clear_last_offline_time() {
  last_offline_time_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::last_offline_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.last_offline_time)
  return last_offline_time_;
}
inline void RoleLiteInfo::set_last_offline_time(::google::protobuf::int32 value) {
  
  last_offline_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.last_offline_time)
}

// int32 last_offline_ip = 11;
inline void RoleLiteInfo::clear_last_offline_ip() {
  last_offline_ip_ = 0;
}
inline ::google::protobuf::int32 RoleLiteInfo::last_offline_ip() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.last_offline_ip)
  return last_offline_ip_;
}
inline void RoleLiteInfo::set_last_offline_ip(::google::protobuf::int32 value) {
  
  last_offline_ip_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.last_offline_ip)
}

// string view_record = 12;
inline void RoleLiteInfo::clear_view_record() {
  view_record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleLiteInfo::view_record() const {
  // @@protoc_insertion_point(field_get:AFMsg.RoleLiteInfo.view_record)
  return view_record_.GetNoArena();
}
inline void RoleLiteInfo::set_view_record(const ::std::string& value) {
  
  view_record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.RoleLiteInfo.view_record)
}
#if LANG_CXX11
inline void RoleLiteInfo::set_view_record(::std::string&& value) {
  
  view_record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.RoleLiteInfo.view_record)
}
#endif
inline void RoleLiteInfo::set_view_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  view_record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.RoleLiteInfo.view_record)
}
inline void RoleLiteInfo::set_view_record(const char* value, size_t size) {
  
  view_record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.RoleLiteInfo.view_record)
}
inline ::std::string* RoleLiteInfo::mutable_view_record() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.RoleLiteInfo.view_record)
  return view_record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleLiteInfo::release_view_record() {
  // @@protoc_insertion_point(field_release:AFMsg.RoleLiteInfo.view_record)
  
  return view_record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleLiteInfo::set_allocated_view_record(::std::string* view_record) {
  if (view_record != NULL) {
    
  } else {
    
  }
  view_record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_record);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.RoleLiteInfo.view_record)
}

// -------------------------------------------------------------------

// AckRoleLiteInfoList

// repeated .AFMsg.RoleLiteInfo char_data = 1;
inline int AckRoleLiteInfoList::char_data_size() const {
  return char_data_.size();
}
inline void AckRoleLiteInfoList::clear_char_data() {
  char_data_.Clear();
}
inline const ::AFMsg::RoleLiteInfo& AckRoleLiteInfoList::char_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Get(index);
}
inline ::AFMsg::RoleLiteInfo* AckRoleLiteInfoList::mutable_char_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Mutable(index);
}
inline ::AFMsg::RoleLiteInfo* AckRoleLiteInfoList::add_char_data() {
  // @@protoc_insertion_point(field_add:AFMsg.AckRoleLiteInfoList.char_data)
  return char_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::RoleLiteInfo >*
AckRoleLiteInfoList::mutable_char_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckRoleLiteInfoList.char_data)
  return &char_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::RoleLiteInfo >&
AckRoleLiteInfoList::char_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckRoleLiteInfoList.char_data)
  return char_data_;
}

// -------------------------------------------------------------------

// ReqCreateRole

// string account = 1;
inline void ReqCreateRole::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCreateRole::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.account)
  return account_.GetNoArena();
}
inline void ReqCreateRole::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.account)
}
#if LANG_CXX11
inline void ReqCreateRole::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqCreateRole.account)
}
#endif
inline void ReqCreateRole::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqCreateRole.account)
}
inline void ReqCreateRole::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqCreateRole.account)
}
inline ::std::string* ReqCreateRole::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreateRole.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCreateRole::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreateRole.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreateRole.account)
}

// int32 career = 2;
inline void ReqCreateRole::clear_career() {
  career_ = 0;
}
inline ::google::protobuf::int32 ReqCreateRole::career() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.career)
  return career_;
}
inline void ReqCreateRole::set_career(::google::protobuf::int32 value) {
  
  career_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.career)
}

// int32 sex = 3;
inline void ReqCreateRole::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 ReqCreateRole::sex() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.sex)
  return sex_;
}
inline void ReqCreateRole::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.sex)
}

// int32 race = 4;
inline void ReqCreateRole::clear_race() {
  race_ = 0;
}
inline ::google::protobuf::int32 ReqCreateRole::race() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.race)
  return race_;
}
inline void ReqCreateRole::set_race(::google::protobuf::int32 value) {
  
  race_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.race)
}

// string noob_name = 5;
inline void ReqCreateRole::clear_noob_name() {
  noob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCreateRole::noob_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.noob_name)
  return noob_name_.GetNoArena();
}
inline void ReqCreateRole::set_noob_name(const ::std::string& value) {
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.noob_name)
}
#if LANG_CXX11
inline void ReqCreateRole::set_noob_name(::std::string&& value) {
  
  noob_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqCreateRole.noob_name)
}
#endif
inline void ReqCreateRole::set_noob_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqCreateRole.noob_name)
}
inline void ReqCreateRole::set_noob_name(const char* value, size_t size) {
  
  noob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqCreateRole.noob_name)
}
inline ::std::string* ReqCreateRole::mutable_noob_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreateRole.noob_name)
  return noob_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCreateRole::release_noob_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreateRole.noob_name)
  
  return noob_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_noob_name(::std::string* noob_name) {
  if (noob_name != NULL) {
    
  } else {
    
  }
  noob_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noob_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreateRole.noob_name)
}

// int32 game_id = 6;
inline void ReqCreateRole::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqCreateRole::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreateRole.game_id)
  return game_id_;
}
inline void ReqCreateRole::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqCreateRole.game_id)
}

// -------------------------------------------------------------------

// ReqDeleteRole

// string account = 1;
inline void ReqDeleteRole::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqDeleteRole::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqDeleteRole.account)
  return account_.GetNoArena();
}
inline void ReqDeleteRole::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqDeleteRole.account)
}
#if LANG_CXX11
inline void ReqDeleteRole::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqDeleteRole.account)
}
#endif
inline void ReqDeleteRole::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqDeleteRole.account)
}
inline void ReqDeleteRole::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqDeleteRole.account)
}
inline ::std::string* ReqDeleteRole::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqDeleteRole.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqDeleteRole::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqDeleteRole.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqDeleteRole::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqDeleteRole.account)
}

// string name = 2;
inline void ReqDeleteRole::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqDeleteRole::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqDeleteRole.name)
  return name_.GetNoArena();
}
inline void ReqDeleteRole::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqDeleteRole.name)
}
#if LANG_CXX11
inline void ReqDeleteRole::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqDeleteRole.name)
}
#endif
inline void ReqDeleteRole::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqDeleteRole.name)
}
inline void ReqDeleteRole::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqDeleteRole.name)
}
inline ::std::string* ReqDeleteRole::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqDeleteRole.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqDeleteRole::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqDeleteRole.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqDeleteRole::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqDeleteRole.name)
}

// int32 game_id = 3;
inline void ReqDeleteRole::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqDeleteRole::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqDeleteRole.game_id)
  return game_id_;
}
inline void ReqDeleteRole::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqDeleteRole.game_id)
}

// -------------------------------------------------------------------

// ReqRecoverRole

// string account = 1;
inline void ReqRecoverRole::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRecoverRole::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqRecoverRole.account)
  return account_.GetNoArena();
}
inline void ReqRecoverRole::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqRecoverRole.account)
}
#if LANG_CXX11
inline void ReqRecoverRole::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqRecoverRole.account)
}
#endif
inline void ReqRecoverRole::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqRecoverRole.account)
}
inline void ReqRecoverRole::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqRecoverRole.account)
}
inline ::std::string* ReqRecoverRole::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqRecoverRole.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRecoverRole::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqRecoverRole.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRecoverRole::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqRecoverRole.account)
}

// string name = 2;
inline void ReqRecoverRole::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRecoverRole::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqRecoverRole.name)
  return name_.GetNoArena();
}
inline void ReqRecoverRole::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqRecoverRole.name)
}
#if LANG_CXX11
inline void ReqRecoverRole::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AFMsg.ReqRecoverRole.name)
}
#endif
inline void ReqRecoverRole::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqRecoverRole.name)
}
inline void ReqRecoverRole::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqRecoverRole.name)
}
inline ::std::string* ReqRecoverRole::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqRecoverRole.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRecoverRole::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqRecoverRole.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRecoverRole::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqRecoverRole.name)
}

// int32 game_id = 3;
inline void ReqRecoverRole::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqRecoverRole::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqRecoverRole.game_id)
  return game_id_;
}
inline void ReqRecoverRole::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqRecoverRole.game_id)
}

// -------------------------------------------------------------------

// ServerHeartBeat

// int32 count = 1;
inline void ServerHeartBeat::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 ServerHeartBeat::count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ServerHeartBeat.count)
  return count_;
}
inline void ServerHeartBeat::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ServerHeartBeat.count)
}

// -------------------------------------------------------------------

// RoleOnlineNotify

// .AFMsg.Ident guild = 1;
inline bool RoleOnlineNotify::has_guild() const {
  return this != internal_default_instance() && guild_ != NULL;
}
inline const ::AFMsg::Ident& RoleOnlineNotify::guild() const {
  const ::AFMsg::Ident* p = guild_;
  // @@protoc_insertion_point(field_get:AFMsg.RoleOnlineNotify.guild)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* RoleOnlineNotify::release_guild() {
  // @@protoc_insertion_point(field_release:AFMsg.RoleOnlineNotify.guild)
  
  ::AFMsg::Ident* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* RoleOnlineNotify::mutable_guild() {
  
  if (guild_ == NULL) {
    guild_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.RoleOnlineNotify.guild)
  return guild_;
}
inline void RoleOnlineNotify::set_allocated_guild(::AFMsg::Ident* guild) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_);
  }
  if (guild) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild, submessage_arena);
    }
    
  } else {
    
  }
  guild_ = guild;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.RoleOnlineNotify.guild)
}

// -------------------------------------------------------------------

// RoleOfflineNotify

// .AFMsg.Ident guild = 1;
inline bool RoleOfflineNotify::has_guild() const {
  return this != internal_default_instance() && guild_ != NULL;
}
inline const ::AFMsg::Ident& RoleOfflineNotify::guild() const {
  const ::AFMsg::Ident* p = guild_;
  // @@protoc_insertion_point(field_get:AFMsg.RoleOfflineNotify.guild)
  return p != NULL ? *p : *reinterpret_cast<const ::AFMsg::Ident*>(
      &::AFMsg::_Ident_default_instance_);
}
inline ::AFMsg::Ident* RoleOfflineNotify::release_guild() {
  // @@protoc_insertion_point(field_release:AFMsg.RoleOfflineNotify.guild)
  
  ::AFMsg::Ident* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline ::AFMsg::Ident* RoleOfflineNotify::mutable_guild() {
  
  if (guild_ == NULL) {
    guild_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.RoleOfflineNotify.guild)
  return guild_;
}
inline void RoleOfflineNotify::set_allocated_guild(::AFMsg::Ident* guild) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guild_);
  }
  if (guild) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild, submessage_arena);
    }
    
  } else {
    
  }
  guild_ = guild;
  // @@protoc_insertion_point(field_set_allocated:AFMsg.RoleOfflineNotify.guild)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AFMsg::EServerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::EServerState>() {
  return ::AFMsg::EServerState_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqServerListType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqServerListType>() {
  return ::AFMsg::ReqServerListType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AFMsgPreGame_2eproto__INCLUDED
